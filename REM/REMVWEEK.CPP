/*---------------------------------------------------------------------+\|																		||				copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remvweek.cpp  --  view class for weekly messages||	Purpose:|	Author and Date:	J.Griswold			11-Mar-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	25-Mar-1997			J.Griswold		Change cmdSetDate so that it only updates the members if the		new values would require them to change.	11-Mar-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "strform.h"#include "remappl.h"#include "remvweek.h"#include "remdoc.h"#include "datevalu.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	RemindViewBase/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0#pragma mark ____WeeklyDrawDate____#endif/*---------------------------------------------------------------------+\ *  NAME:	displayDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	WeeklyDrawJDay::displayDate		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y,		NodeJDayPtr	pList		){	int			nLabelHeight;	int			nLabelAscent;	int			nHeight;	URect		r;	TextRangeInfo	tRange;	NodeJDayPtr	pItem;	Long		nJulian;	XPFontPtr	pFontServer;	char		sDate[16];	char		sWeekday[20];		UNREFERENCED_PARAMETER( x );		nLabelHeight = vpLabelStyle->getHeight();	nLabelAscent = vpLabelStyle->getAscent();	pDraw->getUpdateRect( &r );		pFontServer = XPFont::getFontServer();		for ( pItem = pList; pItem; pItem = (NodeJDayPtr)pItem->getNext() )	{		if ( r.bottom < y )			break;		pItem->getDisplaySize( &tRange );		nHeight = tRange.rect.bottom - tRange.rect.top;				if ( r.top 				< (y + ((nHeight < nLabelHeight) ? nLabelHeight : nHeight))				)		{			nJulian = pItem->getJulianDay();			strDate_weekdayFromJulian( sWeekday, nJulian );	    	strDate_ddmmmyyyyFromJulian( sDate, nJulian );	    	vpLabelStyle->activateStyle( pFontServer );	    	pFontServer->drawString( pDraw, 							    	vnDayName, y+nLabelAscent,	    							sWeekday );	    	pFontServer->drawString( pDraw,							    	vnDate, y+nLabelAscent,							    	sDate );		}		if ( nHeight < nLabelHeight )		{			pItem->drawAt( pDraw, vnMessage, y + nLabelAscent - tRange.nAscender );			y += nLabelHeight;		}		else		{			pItem->drawAt( pDraw, vnMessage, y );			y += nHeight;		}	}}/*---------------------------------------------------------------------+\ *  NAME:	gatherRange - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	WeeklyDrawJDay::gatherRange		(		UPointPtr	pSize,		NodeJDayPtr	pList		){	pList->getDisplayExtents( pSize );	pSize->x += vnMessage;	if ( pSize->y < vpLabelStyle->getHeight() )		pSize->y = vpLabelStyle->getHeight();}#if 0#pragma mark ____WeeklyDrawWeek____#endif/*---------------------------------------------------------------------+\ *  NAME:	displayJDayList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	WeeklyDrawWeek::displayJDayList		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y,		NodeJDayOwnerPtr	pList		){	NodeJDayPtr	pItem;	NodeJDayPtr	pNext;	UPoint		range;	URect		r;	URect		rBox;		pDraw->getUpdateRect( &r );		rBox.top = y + 1;	rBox.left = r.left;	rBox.right = r.right;	y += VIEW_MARGIN_TOP;		pItem = pList->getJDayList();	while ( pItem )	{		if ( r.bottom < y )			break;		pNext = (NodeJDayPtr)pItem->getNext();		vpDrawJDay->gatherRange( &range, pItem );		rBox.bottom = y + range.y;		if ( r.top <= rBox.bottom )		{			if ( vbBox )			{				if ( NULL == pNext )					rBox.bottom += VIEW_MARGIN_TOP;				pDraw->setForeColor( XPColor( COLOR_Gray_5 ) );				pDraw->drawFillRect( &rBox );			}			vpDrawJDay->displayDate( pDraw, x, y, pItem );		}		y += range.y;		rBox.top = y;		vbBox = !vbBox;		pItem = pNext;	}	if ( pList->getNext() )	{		XPColor	black( 0, 0, 0 );				y += VIEW_MARGIN_TOP;		pDraw->setWidth( 1 );		pDraw->setForeColor( black );		pDraw->drawMoveTo( 0, y );		pDraw->drawLineTo( r.right, y );	}}/*---------------------------------------------------------------------+\ *  NAME:	gatherRange - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	WeeklyDrawWeek::gatherRange		(		UPointPtr			pSize,		NodeJDayOwnerPtr	pList		){	NodeJDayPtr		pItem;	UPoint			range;		pSize->x = 0;	pSize->y = 0;		pItem = pList->getJDayList();	while ( pItem )	{		vpDrawJDay->gatherRange( &range, pItem );		if ( range.x > pSize->x )			pSize->x = range.x;		pSize->y += range.y;		pItem = (NodeJDayPtr)pItem->getNext();	}	pSize->y += VIEW_MARGIN_TOP * 2;}#if 0#pragma mark ____class____#endifIMPL_StreamCreate( RemindViewWeekly, INHERITED )#if 0_(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 initRemindViewWeekly - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Feb-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::initRemindViewWeekly		(		void		){	vJulianSunday = 0;	vNumWeeks = 2;	vpNodeJDay = NULL;	vpNodeWeek = NULL;}/*---------------------------------------------------------------------+\ *  NAME:	 RemindViewWeekly - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Feb-1995\+---------------------------------------------------------------------*/RemindViewWeekly::RemindViewWeekly		(		void		){	initRemindViewWeekly();}/*---------------------------------------------------------------------+\ *  NAME:	 ~RemindViewWeekly - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Feb-1995\+---------------------------------------------------------------------*/RemindViewWeekly::~RemindViewWeekly		(		void		){	if ( vpNodeJDay )		vpNodeJDay->destroyAllLinks();	vpNodeJDay = NULL;	if ( vpNodeWeek )		vpNodeWeek->destroyAllLinks();	vpNodeWeek = NULL;	if ( vDrawJDay.vpLabelStyle )		vDrawJDay.vpLabelStyle->release();		NONPORT_RemindViewWeeklyDestructor}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0#pragma mark ____public____#endifvoid	RemindViewWeekly::cmdOneWeek		(		void		){	vNumWeeks = 1;	gatherDates();	viewRefresh();	imageSetOrigin( 0, 0 );}void	RemindViewWeekly::cmdTwoWeeks		(		void		){	vNumWeeks = 2;	gatherDates();	viewRefresh();	imageSetOrigin( 0, 0 );}void	RemindViewWeekly::cmdThreeWeeks		(		void		){	vNumWeeks = 3;	gatherDates();	viewRefresh();	imageSetOrigin( 0, 0 );}void	RemindViewWeekly::cmdFourWeeks		(		void		){	vNumWeeks = 4;	gatherDates();	viewRefresh();	imageSetOrigin( 0, 0 );}void	RemindViewWeekly::cmdFiveWeeks		(		void		){	vNumWeeks = 5;	gatherDates();	viewRefresh();	imageSetOrigin( 0, 0 );}void	RemindViewWeekly::cmdSixWeeks		(		void		){	vNumWeeks = 6;	gatherDates();	viewRefresh();	imageSetOrigin( 0, 0 );}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0#pragma mark ____protected____#endif/*---------------------------------------------------------------------+\ *  NAME:	 gatherDisplayExtents - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::gatherDisplayExtents		(		UPointPtr	pExtents		){	NodeWeekPtr	pItem;	UPoint		range;		pExtents->x = 0;	pExtents->y = 0;	range.x = range.y = 0;	pItem = vpNodeWeek;	while ( pItem )	{		vDrawWeek.gatherRange( &range, pItem );		if ( pExtents->x < range.x )			pExtents->x = range.x;		pExtents->y += range.y;		pItem = (NodeWeekPtr)pItem->getNext();	}	pExtents->x += VIEW_MARGIN_LEFT;}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0#pragma mark ____private____#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0#pragma mark ________Overrides________#endif/*---------------------------------------------------------------------+\ *  NAME:	 documentInitialAttachment - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Apr-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::documentInitialAttachment		(		void		){	INHERITED::documentInitialAttachment();		vDrawWeek.vpDrawJDay = &vDrawJDay;	vDrawJDay.vpLabelStyle = ((RemindApplication*)XPApplication::getApplicationPtr())->getStyleDefaultLabel();	if ( vDrawJDay.vpLabelStyle )	{		XPFontPtr	pFontServer;				vDrawJDay.vpLabelStyle->addRef();				pFontServer = XPFont::getFontServer();		vDrawJDay.vpLabelStyle->activateStyle( pFontServer );		vDrawJDay.vnDayName = VIEW_MARGIN_LEFT;		vDrawJDay.vnDate = vDrawJDay.vnDayName + pFontServer->getStringWidth( "Wednesday   " );		vDrawJDay.vnMessage = vDrawJDay.vnDate + pFontServer->getStringWidth( "99-Mmm-9999   " );	}	vJulianSunday = dateValue_sunday();	gatherDates();}#if 0#pragma mark ____RemindViewBase____#endif/*---------------------------------------------------------------------+\ *  NAME:	cmdSetDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-May-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::cmdSetDate		(		Long	nJulian		){	Long	nSunday;		nSunday = nJulian - julianDate_weekdayFromNumber( nJulian ) + 1;	if ( nSunday != vJulianSunday )	{		vJulianSunday = nSunday;		gatherDates();		imageSetOrigin( 0, 0 );		viewRefresh();	}}/*---------------------------------------------------------------------+\ *  NAME:	calcCalendarHilite - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-May-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::calcCalendarHilite		(		void		){	requestCalendarHilite( vJulianSunday, vJulianSunday + vNumWeeks*7 - 1 );}/*---------------------------------------------------------------------+\ *  NAME:	 buildViewHeader - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-May-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::buildViewHeader		(		void		){	static char	*sWeekTitles[]			= {			"the Week",			"Two Weeks",			"Three Weeks",			"Four Weeks",			"Five Weeks",			"Six Weeks",			0			};	Char	sTitle[80];	CharPtr	p;	int		nWeekNum;		p = sTitle;	::strcpy( p, "Reminders for " );	p += ::strlen( p );	::strcpy( p, sWeekTitles[ vNumWeeks-1 ] );	p += ::strlen( p );	::strcpy( p, " -- " );	p += ::strlen( p );    strDate_ddmmmyyyyFromJulian( p, vJulianSunday );	p += ::strlen( p );		nWeekNum = julianDate_weeknumFromNumber( vJulianSunday );	::strcpy( p, "  (Week " );	p += ::strlen( p );	p += strFormat_decimal( p, (long)nWeekNum );	::strcpy( p, ")" );	p += ::strlen( p );	setCaption( sTitle );}/*---------------------------------------------------------------------+\ *  NAME:	getViewCmd - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Jan-1996\+---------------------------------------------------------------------*/long	RemindViewWeekly::getViewCmd		(		void		){	return CMD_NewWeekly;}/*---------------------------------------------------------------------+\ *  NAME:	 dateNext - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::dateNext		(		void		){	vJulianSunday += 7;}/*---------------------------------------------------------------------+\ *  NAME:	 datePrevious - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::datePrevious		(		void		){	vJulianSunday -= 7;}/*---------------------------------------------------------------------+\ *  NAME:	 dateBlockNext - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jan-1996\+---------------------------------------------------------------------*/void	RemindViewWeekly::dateBlockNext		(		void		){	vJulianSunday += 7 * vNumWeeks;}/*---------------------------------------------------------------------+\ *  NAME:	 dateBlockPrevious - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jan-1996\+---------------------------------------------------------------------*/void	RemindViewWeekly::dateBlockPrevious		(		void		){	vJulianSunday -= 7 * vNumWeeks;}/*---------------------------------------------------------------------+\ *  NAME:	 gatherDates - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/Bool	RemindViewWeekly::gatherDates		(		void		){	Bool			result = NO;	RemindDocument	*pDoc;	NodeJDayPtr		pNodeJDay;	buildViewHeader();	pDoc = (RemindDocumentPtr)documentFetch();	if ( pDoc )	{		if ( vpNodeWeek )			vpNodeWeek->destroyAllLinks();				pNodeJDay = pDoc->getRange( vJulianSunday, vJulianSunday+(vNumWeeks*7-1) );		if ( pNodeJDay )		{			UPoint	pt;						vpNodeWeek = NodeWeek::buildWeekList( pNodeJDay );			result = YES;			gatherDisplayExtents( &pt );			imageSetSize( pt.x, pt.y );		}		else		{			vpNodeWeek = NULL;			imageSetOrigin( 0, 0 );			imageSetSize( 5, 5 );		}		calcCalendarHilite();	}	return result;}/*---------------------------------------------------------------------+\ *  NAME:	 displayJDays - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/void	RemindViewWeekly::displayJDays		(		XPDrawPtr	pDraw,		URectPtr	pUpdateRect		){	NodeWeekPtr		pItem;	Long			x, y;	UPoint			range;		vDrawWeek.vbBox = NO;	pItem = vpNodeWeek;		x = 4;	y = 0;	while ( pItem )	{		if ( pUpdateRect->bottom < y )			break;		vDrawWeek.gatherRange( &range, pItem );		if ( pUpdateRect->top <= y + range.y )		{			vDrawWeek.displayJDayList( pDraw, x, y, pItem );		}		else		{			int		nCount = pItem->getJDayCount();						if ( 0 != nCount % 2 )				vDrawWeek.vbBox = ! vDrawWeek.vbBox;		}		y += range.y;		pItem = (NodeWeekPtr)pItem->getNext();	}}/*---------------------------------------------------------------------+\ *  NAME:	somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/