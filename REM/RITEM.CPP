/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1995 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	ritem.cpp  --  brief description of what ritem.cpp is for||	Purpose:|	Author and Date:	J.Griswold			29-Apr-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	29-Apr-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include "xpassert.h"#include "zcatgmgr.h"#include "zstylmgr.h"#include "ritem.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	TextLine/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	RItem - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Apr-1995\+---------------------------------------------------------------------*/RItem::RItem		(		void		)		: INHERITED(), NodeLink(){	initRItem();}/*---------------------------------------------------------------------+\ *  NAME:	RItem - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Apr-1995\+---------------------------------------------------------------------*/RItem::RItem		(		CharPtr	s,		int		numChars		)		: INHERITED( s, numChars ), NodeLink(){	initRItem();}/*---------------------------------------------------------------------+\ *  NAME:	~RItem - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Apr-1995\+---------------------------------------------------------------------*/RItem::~RItem		(		void		){	if ( vCategory )	{		ZCategoryManagerPtr	pMgr;				pMgr = ZCategoryManager::getCategoryManager();		XP_Assert( pMgr );		if ( pMgr )			pMgr->releaseID( vCategory );		vCategory = 0;	}}/*---------------------------------------------------------------------+\ *  NAME:	initRItem -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Apr-1995\+---------------------------------------------------------------------*/void	RItem::initRItem		(		void		){	vCategory = 0;}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	getStylePtr - support getting style from category *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Oct-1995\+---------------------------------------------------------------------*/ZStylePtr		RItem::getStylePtr		(		void		) const{	ZStylePtr	pStyle = NULL;		if ( 0 != vnStyleID )		pStyle = INHERITED::getStylePtr();		if ( NULL == pStyle )	{		RCategoryPtr	pCat;				pCat = getCategoryPtr();		if ( pCat )			pStyle = pCat->getStylePtr();		if ( NULL == pStyle )		{			ZStyleManagerPtr	pMgr;						pMgr = ZStyleManager::getStyleManager();			if ( pMgr )			{				ZStyleID	nStyle;								nStyle = pMgr->findNamedStyle( "Default" );				pStyle = (RStylePtr)pMgr->getStyleFromID( nStyle );			}		}	}	return pStyle;}/*---------------------------------------------------------------------+\ *  NAME:	getStyleID - support getting style from category *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	09-May-1996\+---------------------------------------------------------------------*/ZStyleID		RItem::getStyleID		(		void		) const{	ZStyleID	nStyle = 0;		nStyle = INHERITED::getStyleID();		if ( 0 == nStyle )	{		RCategoryPtr	pCat;				pCat = getCategoryPtr();		if ( pCat )			nStyle = pCat->getStyleID();	}	return nStyle;}/*---------------------------------------------------------------------+\ *  NAME:	setCategoryID - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Oct-1995\+---------------------------------------------------------------------*/void	RItem::setCategoryID		(		ZCategoryID	nIdent		){	ZCategoryManagerPtr	pMgr;		pMgr = ZCategoryManager::getCategoryManager();	XP_Assert( pMgr );	if ( pMgr )	{		if ( nIdent )			pMgr->addRefID( nIdent );				if ( vCategory )			pMgr->releaseID( vCategory );	}	vCategory = nIdent;}/*---------------------------------------------------------------------+\ *  NAME:	getCategoryPtr - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Oct-1995\+---------------------------------------------------------------------*/RCategoryPtr		RItem::getCategoryPtr		(		void		) const{	RCategoryPtr	pCat = NULL;		if ( vCategory )	{		ZCategoryManagerPtr	pMgr;		pMgr = ZCategoryManager::getCategoryManager();		XP_Assert( pMgr );		if ( pMgr )		{			pCat = (RCategoryPtr)pMgr->getCategoryFromID( vCategory );			XP_Assert( pCat );		}	}	return pCat;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/