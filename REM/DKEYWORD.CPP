/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	dkeyword.c  --  define the globals for the various date keywords||	Purpose:|	Author and Date:	J.Griswold			27-Oct-1993|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	01-Dec-1996			J.Griswold		Add "passover" and "rosh_hashanah" keywords	27-Oct-1993			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <stdio.h>#include "dkeyword.h"#include "rstring.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*/char *gDayKwds[]={	"sunday",	"monday",	"tuesday",	"wednesday",	"thursday",	"friday",	"saturday",	0};char *gSpecialDayKwds[]={	"weekday",	"weekend",	"holiday",	"workday",	"offday",	"cancel",	0};	char *gMonthKwds[]={	"january",	"february",	"march",	"april",	"may",	"june",	"july",	"august",	"september",	"october",	"november",	"december",	0};char *gJewishMonthKwds[]={	"tishri",	"heshvan",	"kislev",	"tevet",	"shvat"	"adar",	"adar2",	"nisan",	"iyar",	"sivan",	"tammuz",	"av",	"elul",0};char *gMoonKwds[]={	"new",	"first",	"full",	"last",	0};char *gPaschalKwds[]={	"easter",	"paschal_moon",	"passover",	"rosh_hashanah",	0};char *gOddKwds[]={	"odd",	"even",	0};char *gCycleKwds[]={	"bimonthly",	//	2	"quarterly",	//	3	"semiannual",	//	6	"annual",		//	12	0};	/*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_findWeekday -  *  DESCRIPTION:		This routine converts an ascii day (monday, tuesday, ...)		to a numeric representation.			returns:			0 = unrecognized or ambiguous			1-7 = numeric weekday (1=sunday). *  AUTHOR: J.Griswold		DATE:	27-Oct-1993\+---------------------------------------------------------------------*/int dkeyword_findWeekday		(		char	*string		){	return kwdlist_match( gDayKwds, string );}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_strWeekday - get the weekday name		This routine returns a pointer to the weekday name.  *  AUTHOR: J.Griswold		DATE:	13-Nov-1993\+---------------------------------------------------------------------*/char	*dkeyword_strWeekday		(		int		nDay	/* IN:	weekday number */		){	if ( 1 <= nDay  &&  nDay <= 7 )		return gDayKwds[ nDay - 1 ];	else		return NULL;}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_findPaschal - get special keyword names *  AUTHOR: J.Griswold		DATE:	27-Oct-1993\+---------------------------------------------------------------------*/int dkeyword_findPaschal( char *string ){	return kwdlist_match( gPaschalKwds, string );}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_findSpecialDay - get special day names *  AUTHOR: J.Griswold		DATE:	27-Oct-1993\+---------------------------------------------------------------------*/int dkeyword_findSpecialDay( char *string ){	return kwdlist_match( gSpecialDayKwds, string ) * (-1);}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_findMonth - get month number from name		This routine returns the numeric month.		returns:			0		= undefined or ambiguous			1-12	= numeric month  *  AUTHOR: J.Griswold		DATE:	27-Oct-1993\+---------------------------------------------------------------------*/int dkeyword_findMonth( char *string ){	return kwdlist_match( gMonthKwds, string );}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_strMonth - get the month name		This routine returns a pointer to the month name.  *  AUTHOR: J.Griswold		DATE:	13-Nov-1993\+---------------------------------------------------------------------*/char	*dkeyword_strMonth		(		int		nMonth		){	if ( 1 <= nMonth  &&  nMonth <= 12 )		return gMonthKwds[ nMonth - 1 ];	else		return NULL;}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_findJewishMonth - get month name		This routine returns the numeric month.		returns:			0		= undefined or ambiguous			1-12	= numeric month  *  AUTHOR: J.Griswold		DATE:	05-Nov-1993\+---------------------------------------------------------------------*/int dkeyword_findJewishMonth( char *string ){	return kwdlist_match( gJewishMonthKwds, string );}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_strJewishMonth - get the month name		This routine returns a pointer to the month name.  *  AUTHOR: J.Griswold		DATE:	13-Nov-1993\+---------------------------------------------------------------------*/char	*dkeyword_strJewishMonth		(		int		nMonth		){	if ( 1 <= nMonth  &&  nMonth <= 12 )		return gJewishMonthKwds[ nMonth - 1 ];	else		return NULL;}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_findEvenOdd - get even or odd		This routine returns identifier for odd or even keyword.		returns:			0		= undefined or ambiguous			1		= odd			2		= even  *  AUTHOR: J.Griswold		DATE:	27-Oct-1993\+---------------------------------------------------------------------*/int dkeyword_findEvenOdd( char *string ){	return kwdlist_match( gOddKwds, string );}/*---------------------------------------------------------------------+\ *  NAME:	 dkeyword_findMonthCycle - get month cycle		This routine returns identifier for month cycle keyword.		returns:			0		= undefined or ambiguous			2		= bimonthly			3		= quarterly			6		= semiannual  *  AUTHOR: J.Griswold		DATE:	09-Jun-1995\+---------------------------------------------------------------------*/int dkeyword_findMonthCycle( char *string ){	static int	nCycle[] = { 0, 2, 3, 6 };	int		n; 	n = kwdlist_match( gCycleKwds, string );	return nCycle[n];}