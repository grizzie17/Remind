/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	textline.cpp  --  brief description of what textline.cpp is for||	Purpose:|	Author and Date:	J.Griswold			15-Apr-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	15-Apr-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <ctype.h>#include <string.h>#include <math.h>#include "bcrtti.h"#include "token.h"#include "tokencnv.h"#include "strform.h"#include "zstylmgr.h"#include "xpassert.h"#include "xpdraw.h"#include "ztextsrv.h"#include "rstring.h"#include "julian.h"#include "lunar.h"#include "datevalu.h"#include "textline.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	ZStyledString/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 TextLine - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Apr-1995\+---------------------------------------------------------------------*/TextLine::TextLine		(		void		)		: INHERITED(){	initTextLine();}/*---------------------------------------------------------------------+\ *  NAME:	 TextLine - copy constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Apr-1995\+---------------------------------------------------------------------*/TextLine::TextLine		(		TextLine&	a		)		: INHERITED( a ){}/*---------------------------------------------------------------------+\ *  NAME:	 TextLine - copy constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Jul-1995\+---------------------------------------------------------------------*/TextLine::TextLine		(		XPStringRef	s		)		: INHERITED( s ){	initTextLine();}/*---------------------------------------------------------------------+\ *  NAME:	 TextLine - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Apr-1995\+---------------------------------------------------------------------*/TextLine::TextLine		(		const CharPtr	s,		int				numChars		)		: INHERITED( s, numChars ){	initTextLine();}/*---------------------------------------------------------------------+\ *  NAME:	 ~TextLine - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Apr-1995\+---------------------------------------------------------------------*/TextLine::~TextLine		(		void		){}/*---------------------------------------------------------------------+\ *  NAME:	 initTextLine - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Apr-1995\+---------------------------------------------------------------------*/void	TextLine::initTextLine		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getExtents - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	05-Jun-1995\+---------------------------------------------------------------------*/void	TextLine::getExtents		(		TextRangePtr	pExtents,		Pixel			nMaxWidth,		long			nJulian		){	UNREFERENCED_PARAMETER( nMaxWidth );	UNREFERENCED_PARAMETER( nJulian );		if ( 0 < getLength() )	{		ZTextServerPtr	pTextServer;				pTextServer = getTextServer();		XP_Assert( pTextServer );		if ( pTextServer )		{			UPoint	pt;			URect	r;			r.top = 0;			r.left = 0;			r.right = nMaxWidth;			r.bottom = 1;			pt.x = pt.y = 0;			pTextServer->rangeBlock( pExtents, &r,											DYNAMIC_CAST( RStylePtr, getStylePtr() ),											this, TEXTALIGN_Left, &nJulian );#if 0			pTextServer->rangeMultiString( pExtents, &pt,											DYNAMIC_CAST( RStylePtr, getStylePtr() ),											this, TEXTJUST_TopLeft, &nJulian );#endif		}		else		{			::memset( pExtents, 0, sizeof( TextRangeInfo ) );		}	}	else	{		::memset( pExtents, 0, sizeof( TextRangeInfo ) );	}}/*---------------------------------------------------------------------+\ *  NAME:	 f_years - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/static void		f_years		(		CharPtr	out,		int		*oi,		CharPtr	in,		int		*ii,		long	jdate		){	int		k;	long	year;	int		d,m,y;	CharPtr	inBegin;	CharPtr	outBegin;		inBegin = in;	outBegin = out;	*ii = 0;	*oi = 0;		in += tok_blank( in );	if ( '(' == *in )	{		++in;		in += tok_blank( in );		k = tokenCnv_decimal( &year, in );		if ( k )		{			in += k;			in += tok_blank( in );			if ( ')' == *in )				++in;			julianDate_gregorianFromNumber( &d, &m, &y, jdate );			strFormat_decimal( out, (long)(y - year) );			k = strlen( out );			out += k;			if ( k > 1  &&  *(out-2) == '1' )			{				strcpy( out, "th" );			}			else			{				switch( *(out-1) )				{				case '1':					strcpy( out, "st" );					break;				case '2':					strcpy( out, "nd" );					break;				case '3':					strcpy( out, "rd" );					break;				default:					strcpy( out, "th" );					break;	    	    	    				}			}			out += 2;			*ii = in - inBegin;			*oi = out - outBegin;		}	}}/*---------------------------------------------------------------------+\ *  NAME:	 f_julian - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/static void		f_julian		(		CharPtr	out,		int		*oi,		CharPtr	in,		int		*ii,		long	jdate		){	int		k;	CharPtr	outBegin;	CharPtr	inBegin;		*ii = 0;	*oi = 0;	inBegin = in;	outBegin = out;		in += tok_blank( in );	if ( *in == '(' && *(in+1) == ')' )	{		in += 2;		k = strFormat_decimal( out, jdate );		out += k;		*ii = in - inBegin;		*oi = out - outBegin;	}}/*---------------------------------------------------------------------+\ *  NAME:	 f_moon_time - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/static void		f_moon_time		(		CharPtr	out,		int		*oi,		CharPtr	in,		int		*ii,		long	julian		){	double	frac;	double	dph;	long	jd, jdate;	int		n,nph;	int		hr,mn;	CharPtr	inBegin;	CharPtr	outBegin;		inBegin = in;	outBegin = out;	*ii = 0;	*oi = 0;		do	/* sequence */	{		in += tok_blank( in );		if ( *in != '(' )			break;		++in;		in += tok_blank( in );		if ( *in != ')' )			break;		++in;				n = (int)(((double)(julian - 2415020L) + 1.265465278) / MOON_CYCLE);		/*		full moon offset = 16.03075926 */		jdate = flmoon( n, 0, &jd, &frac );		jd = (julian - jdate);		if ( jd > 0 )		{			dph = 1.0 / (1.0 - (double)jd/MOON_CYCLE) + 0.5;			nph = (int)dph;		}		else		{			nph = 0;			dph = 0.0;		}		if ( dph < 0.0 )			dph -= 0.5;		nph = (int)dph;		n = (int)(((double)(julian - 2415020L) + (double)1.265465278 				+ MOON_CYCLE * (double)(nph/4)) / MOON_CYCLE);		jdate = flmoon( n, nph, &jd, &frac );		frac = frac - (long)frac;		frac = frac + 0.5 - (double)dateValue_timezone()/24.0;		if ( frac >= 1.0 )			frac -= floor( frac );		frac *= 24.0;		hr = (int)frac;		frac -= (double)hr;		frac *= 60.0;		mn = (int)frac;		strFormat_scontrol( out, "%2d:%02d", hr, mn );		out += 5;		*ii = in - inBegin;		*oi = out - outBegin;	} while ( 0 );	/* end sequence */}/*---------------------------------------------------------------------+\ *  NAME:	 f_days - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/static void		f_days		(		CharPtr	out,		int		*oi,		CharPtr	in,		int		*ii,		long	jdate		){	int		k;	long	diff;	CharPtr	inBegin;	CharPtr	outBegin;	inBegin = in;	outBegin = out;	*ii = 0;	*oi = 0;		in += tok_blank( in );	if ( *in == '('  &&  *(in+1) == ')' )	{		in += 2;		diff = jdate - dateValue_today();		strFormat_decimal( out, (long)diff );		k = strlen( out );		out += k;		*ii = in - inBegin;		*oi = out - outBegin;	}}/*---------------------------------------------------------------------+\ *  NAME:	f_hilite - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/static void		f_hilite		(		char	out[],		int		*oi,		char	in[],		int		*ii,		long	jdate		){	int		k;	long	diff;	CharPtr	inBegin;	CharPtr	outBegin;	inBegin = in;	outBegin = out;	*ii = 0;	*oi = 0;		in += tok_blank( in );	if ( *in == '('  &&  *(in+1) == ')' )	{		in += 2;		diff = jdate - dateValue_today();		strFormat_decimal( out, (long)diff );		k = strlen( out );		out += k;		*ii = in - inBegin;		*oi = out - outBegin;	}}/*---------------------------------------------------------------------+\ *  NAME:	f_picture - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Mar-1997\+---------------------------------------------------------------------*/static void		f_picture		(		char	out[],		int		*oi,		char	in[],		int		*ii,		long	jdate		){}/*---------------------------------------------------------------------+\ *  NAME:	 format_message - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/static void		format_message		(		CharPtr	out,		CharPtr	in,		long	jdate		){    int		i,j,k;    char	token[40];	*out = '\0';	i = 0;	j = 0;	while ( *in )	{		if ( 'f' == tolower(*in)  &&  '$' == *(in+1) )		{		    k = tokenCnv_symbolDollar( token, in, sizeof( token ) );		    if ( k )		    {		    	switch ( get_function( token ) )		    	{		    	case FUNC_Years:		    		in += k;		    		f_years( out,&j, in,&i, jdate );		    		break;		    	case FUNC_Julian:		    		in += k;		    		f_julian( out,&j, in,&i, jdate );		    		break;		    	case FUNC_Days:		    		in += k;		    		f_days( out,&j, in,&i, jdate );		    		break;		    	case FUNC_Moon_Time:		    		in += k;		    		f_moon_time( out,&j, in,&i, jdate );		    		break;		    	case FUNC_Hilite:		    		in += k;		    		f_hilite( out,&j, in,&i, jdate );		    		break;		    	case FUNC_Picture:		    		break;		    	default:		    	    strcpy( out, token );		    	    i = j = k;		    		break;		    	}		    	in += i;		    	out += j;		    }	    }	    else	    {	    	*out++ = *in++;	    }	}	*out = '\0';}/*---------------------------------------------------------------------+\ *  NAME:	 display - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-May-1995\+---------------------------------------------------------------------*/void	TextLine::display		(		XPDrawPtr	pDraw,		URectPtr	pRect,		long		nJulian		){	if ( 0 < getLength() )	{		ZTextServerPtr	pTextServer;		//char			string[256];						//format_message( string, pointString(), nJulian );				pTextServer = getTextServer();		XP_Assert( pTextServer );		if ( pTextServer )		{			pTextServer->displayBlock( pDraw, pRect,										DYNAMIC_CAST( RStylePtr, getStylePtr() ),										this, TEXTALIGN_Left, &nJulian );#if 0			UPoint	pt;						pt.x = x;			pt.y = y;			pTextServer->displayString( pDraw, x, y,										DYNAMIC_CAST( RStylePtr, getStylePtr() ),										string );#endif		}#if 0					XPFontPtr	pFontServer;		pFontServer = XPFont::getFontServer();		XP_Assert( pFontServer );		if ( pFontServer )		{			activateStyle();			pFontServer->drawString( pDraw, x, y, string );		}#endif	}}/*---------------------------------------------------------------------+\ *  NAME:	 display - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-May-1995\+---------------------------------------------------------------------*/void	TextLine::display		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y,		long		nJulian		){	if ( 0 < getLength() )	{		ZTextServerPtr	pTextServer;		//char			string[256];						//format_message( string, pointString(), nJulian );				pTextServer = getTextServer();		XP_Assert( pTextServer );		if ( pTextServer )		{			UPoint	pt;						pt.x = x;			pt.y = y;			pTextServer->displayMultiString( pDraw, &pt,										DYNAMIC_CAST( RStylePtr, getStylePtr() ),										this, TEXTJUST_TopLeft, &nJulian );		}#if 0					XPFontPtr	pFontServer;		pFontServer = XPFont::getFontServer();		XP_Assert( pFontServer );		if ( pFontServer )		{			activateStyle();			pFontServer->drawString( pDraw, x, y, string );		}#endif	}}/*---------------------------------------------------------------------+\ *  NAME:	 getAscent - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	16-May-1995\+---------------------------------------------------------------------*/int		TextLine::getAscent		(		void		) const{	RStylePtr			pStyle;		pStyle = DYNAMIC_CAST( RStylePtr, getStylePtr() );	if ( pStyle )		return pStyle->getAscent();	else		return 0;}/*---------------------------------------------------------------------+\ *  NAME:	 getHeight - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/int		TextLine::getHeight		(		void		){	if ( getLength() > 0 )	{		ZTextServerPtr	pTextServer;				pTextServer = getTextServer();		XP_Assert( pTextServer );		if ( pTextServer )		{			TextRangeInfo	range;			UPoint			pt;			pt.x = pt.y = 0;			pTextServer->rangeMultiString( &range, &pt,											DYNAMIC_CAST( RStylePtr, getStylePtr() ),											this );			return range.rect.bottom - range.rect.top;		}		else		{			return 0;		}	}	else	{		return 0;	}#if 0	RStylePtr			pStyle;		pStyle = DYNAMIC_CAST( RStylePtr, getStylePtr() );	if ( pStyle )		return pStyle->getHeight();	else		return 0;#endif}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	activateStyle - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	05-Jun-1995\+---------------------------------------------------------------------*/void	TextLine::activateStyle		(		void		){	RStylePtr			pStyle;		pStyle = DYNAMIC_CAST( RStylePtr, getStylePtr() );	if ( pStyle )	{		XPFontPtr	pFontServer;		pFontServer = XPFont::getFontServer();		XP_Assert( pFontServer );		pStyle->activateStyle( pFontServer );	}}/*---------------------------------------------------------------------+\ *  NAME:	RStyleRunHandlerImp::getRunChars - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	23-May-1996\+---------------------------------------------------------------------*/int		TextLine::RStyleRunHandlerImp::getRunChars		(		CharPtr		pOutString,				// OUT		IntPtr		pOutCount,				// OUT		CharPtr		pInStringBase,			// IN		int			nIndex,					// IN		int			nCount,					// IN		RCharStyleDescriptorPtr	pStyleDesc,	// IN		VoidPtr		pValue					// IN:		){	int		nOutCount = 0;	long	nJulian = 0;		UNREFERENCED_PARAMETER( pStyleDesc );		if ( pValue )		nJulian = *(long*)pValue;		if ( nJulian )	{	    int		i,j,k;	    char	token[40];		CharPtr	in;				nJulian = *(long*)pValue;				k = ::tokenCnv_symbolDollar( token, pInStringBase+nIndex, sizeof( token ) );		if ( k )		{			j = 0;			i = 0;			in = pInStringBase+nIndex;	    	switch ( get_function( token ) )	    	{	    	case 1:	    		in += k;	    		f_years( pOutString,&j, in,&i, nJulian );	    		break;	    	case 2:	    		in += k;	    		f_julian( pOutString,&j, in,&i, nJulian );	    		break;	    	case 3:	    		in += k;	    		f_days( pOutString,&j, in,&i, nJulian );	    		break;	    	case 4:	    		in += k;	    		f_moon_time( pOutString,&j, in,&i, nJulian );	    		break;	    	case 5:	    		in += k;	    		f_hilite( pOutString,&j, in,&i, nJulian );	    		break;	    	default:	    	    strcpy( pOutString, token );	    	    i = j = k;	    		break;	    	}	    	nOutCount = j;		}	}	else	{		::strncpy( pOutString, pInStringBase+nIndex, nCount );		nOutCount = nCount;	}		*pOutCount = nOutCount;	return nOutCount;}/*---------------------------------------------------------------------+\ *  NAME:	RStyleRunHandlerImp::dispose - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	23-May-1996\+---------------------------------------------------------------------*/void	TextLine::RStyleRunHandlerImp::dispose		(		){}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif#if 0#pragma mark ____ZStyledString____#endif/*---------------------------------------------------------------------+\ *  NAME:	setStyleRuns - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	22-May-1996\+---------------------------------------------------------------------*/Bool	TextLine::setStyleRuns		(		RTextStyleDataPtr	pRunData		){	Bool	result;		result = INHERITED::setStyleRuns( pRunData );	if ( result )	{		if ( vpMultiStyle )		{			RCharStyleDescriptorPtr	pDesc;			RCharStyleDescriptorPtr	pEnd;						pDesc = vpMultiStyle->styleDescriptors.pointArray();			pEnd = pDesc + vpMultiStyle->styleDescriptors.length();			while ( pDesc < pEnd )			{				if ( (RStyleRunHandler*)0xFFFFFFFFL == pDesc->pHandler )					pDesc->pHandler = &vRStyleRunHandler;				++pDesc;			}		}	}		return result;}#if 0#pragma mark ____BCDisplay____#endif/*---------------------------------------------------------------------+\ *  NAME:	draw - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Apr-1995\+---------------------------------------------------------------------*/void	TextLine::draw		(		XPDrawPtr	pDraw		){	drawAt( pDraw, 10, getAscent() );}/*---------------------------------------------------------------------+\ *  NAME:	drawAt - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/void	TextLine::drawAt		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y		){	if ( getLength() > 0 )	{		XPFontPtr	pFontServer;				pFontServer = XPFont::getFontServer();		activateStyle();		pFontServer->drawString( pDraw, x, y, pointString() );	}}/*---------------------------------------------------------------------+\ *  NAME:	 someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/