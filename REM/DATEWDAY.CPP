/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	datewday.cpp  --  brief description of what datewday.c is for||	Purpose:|	Author and Date:	J.Griswold			11-May-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	11-May-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "julian.h"#include "datewday.h"#include "dkeyword.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	DateRoot/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DateWeekday - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateWeekday::DateWeekday		(		void		)		: INHERITED(){	vnWeekday = 0;	vnCycle = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateWeekday - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateWeekday::DateWeekday		(		int		nDay		)		: INHERITED(){	vnWeekday = nDay;	vnCycle = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateWeekday - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateWeekday::DateWeekday		(		int		nDay,		int		nCycle		)		: INHERITED(){	vnWeekday = nDay;	vnCycle = nCycle;}/*---------------------------------------------------------------------+\ *  NAME:	 ~DateWeekday - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateWeekday::~DateWeekday		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getDateType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateEnum		DateWeekday::getDateType		(		void		){	return DATE_Weekday;}/*---------------------------------------------------------------------+\ *  NAME:	 caldDateList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/int		DateWeekday::calcDateList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	//	number of julian dates generated	Long	jdate = 0;	int		nWeekday;		nWeekday = julianDate_weekdayFromNumber( nEarly );	jdate = nEarly - (nWeekday - 1);	jdate += vnWeekday - 1;	while ( jdate <= nLate )	{		if ( jdate >= nEarly )		{			switch ( vnCycle )			{			case 1:	// odd							if ( ODD( (long)((jdate-6)/7+1) ) )					list[numDates++] = jdate;				break;						case 2: // even							if ( EVEN( (long)((jdate-6)/7+1) ) )					list[numDates++] = jdate;				break;						default:							list[numDates++] = jdate;				break;			}		}		jdate += 7;	}	return numDates;}/*---------------------------------------------------------------------+\ *  NAME:	 getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Aug-1995\+---------------------------------------------------------------------*/int		DateWeekday::getSaveString		(		CharPtr	string,		int		nMaxString		){	CharPtr	start = string;	CharPtr	sName;		UNREFERENCED_PARAMETER( nMaxString );		sName = dkeyword_strWeekday( vnWeekday );	if ( vnCycle > 0 )	{		int		i;				if ( 1 == vnCycle )	// odd			::strcpy( string, "odd:" );		else			::strcpy( string, "even:" );		i = ::strlen( string );		string += i;	}	::strcpy( string, sName );	string += ::strlen( sName );	return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	 somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/