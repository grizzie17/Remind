/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	nodejday.cpp  --  brief description of what nodeday.cpp is for||	Purpose:|	Author and Date:	J.Griswold			07-May-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	07-May-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include "beardefs.h"#include "xpdraw.h"#include "nodejday.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	NodeLink/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0#pragma mark ____class____#endif/*---------------------------------------------------------------------+\ *  NAME:	 NodeJDay - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	07-May-1995\+---------------------------------------------------------------------*/NodeJDay::NodeJDay		(		void		)		: INHERITED(){	initNodeJDay();}/*---------------------------------------------------------------------+\ *  NAME:	 NodeJDay - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	07-May-1995\+---------------------------------------------------------------------*/NodeJDay::NodeJDay		(		Long	nDate		)		: INHERITED(){	initNodeJDay();	vJulian = nDate;}/*---------------------------------------------------------------------+\ *  NAME:	 initNodeJDay - initialization *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	07-May-1995\+---------------------------------------------------------------------*/void	NodeJDay::initNodeJDay		(		void		){	vJulian = 0;	vpItemHead = NULL;	vpItemTail = NULL;}/*---------------------------------------------------------------------+\ *  NAME:	 ~NodeJDay - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	07-May-1995\+---------------------------------------------------------------------*/NodeJDay::~NodeJDay		(		void		){	if ( vpItemHead )	{		vpItemHead->destroyAllLinks();		vpItemHead = NULL;		vpItemTail = NULL;	}}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0#pragma mark ____public____#endif/*---------------------------------------------------------------------+\ *  NAME:	 getJulianDay - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	10-May-1995\+---------------------------------------------------------------------*/Long	NodeJDay::getJulianDay		(		void		) const{	return vJulian;}/*---------------------------------------------------------------------+\ *  NAME:	 getJDayNode - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/NodeJDayPtr		NodeJDay::getJDayNode		(		NodeJDayPtr	pPrev,		Long		nDate		){	NodeJDayPtr	pNode = NULL;	NodeJDayPtr	pNext;		if ( vJulian == nDate )	{		pNode = this;	}	else if ( vJulian < nDate )	{		pNext = (NodeJDayPtr)getNext();		if ( pNext )		{			pNode = pNext->getJDayNode( this, nDate );		}		else		{			pNode = new NodeJDay( nDate );			if ( pNode )			{				pNode->setNext( pNext );				setNext( pNode );			}		}	}	else	{		pNode = new NodeJDay( nDate );		if ( pNode )		{			pNode->setNext( this );			pPrev->setNext( pNode );		}	}	return pNode;}/*---------------------------------------------------------------------+\ *  NAME:	 addRItem - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/Bool	NodeJDay::addRItem		(		RItemPtr	pRItem		){	Bool			result = NO;	NodeRItemPtr	pNode;		pNode = new NodeRItem( pRItem );	if ( pNode )	{		result = YES;				if ( vpItemHead )			vpItemTail->setNext( pNode );		else			vpItemHead = pNode;		vpItemTail = pNode;	}	return result;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0#pragma mark ____protected____#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0#pragma mark ____private____#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0#pragma mark ________Overrides________#endif#if 0#pragma mark ____NodeLink____#endif/*---------------------------------------------------------------------+\ *  NAME:	calcDisplaySize - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	23-May-1996\+---------------------------------------------------------------------*/void	NodeJDay::calcDisplaySize		(		Pixel	nMaxWidth,		VoidPtr	pVoid		){	NodeRItemPtr	pNode;	TextRangeInfo	tRange;		INHERITED::calcDisplaySize( nMaxWidth, pVoid );	pNode = vpItemHead;	while ( pNode )	{		pNode->calcDisplaySize( nMaxWidth, &vJulian );		pNode->getDisplaySize( &tRange );		if ( 0 == vTextRange.nAscender )		{			vTextRange = tRange;		}		else		{			vTextRange.rect.bottom += tRange.rect.bottom - tRange.rect.top;			vTextRange.nDescender = tRange.nDescender;			if ( vTextRange.rect.right < tRange.rect.right )				vTextRange.rect.right = tRange.rect.right;		}		pNode = (NodeRItemPtr)pNode->getNext();	}}/*---------------------------------------------------------------------+\ *  NAME:	getDisplayHeight - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/int		NodeJDay::getDisplayHeight		(		void		){	if ( 0 == vTextRange.nAscender )		calcDisplaySize();	return INHERITED::getDisplayHeight();}/*---------------------------------------------------------------------+\ *  NAME:	getDisplayExtents - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	05-Jun-1995\+---------------------------------------------------------------------*/void	NodeJDay::getDisplayExtents		(		UPointPtr	pExtents		){	if ( 0 == vTextRange.nAscender )		calcDisplaySize();	INHERITED::getDisplayExtents( pExtents );}#if 0#pragma mark ____BCDisplay____#endif/*---------------------------------------------------------------------+\ *  NAME:	 draw - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/void	NodeJDay::draw		(		XPDrawPtr	pDraw		){	drawAt( pDraw, 0, 0 );}/*---------------------------------------------------------------------+\ *  NAME:	 drawAt - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/void	NodeJDay::drawAt		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y		){	NodeRItemPtr	pItem;		pItem = vpItemHead;	while ( pItem )	{		pItem->display( pDraw, x, y, vJulian );		y += pItem->getDisplayHeight();		pItem = (NodeRItemPtr)pItem->getNext();	}}/*---------------------------------------------------------------------+\ *  NAME:	 someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/