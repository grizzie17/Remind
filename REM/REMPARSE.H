/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remparse.h  --  class to parse remind data file||	Purpose:|	Author and Date:	J.Griswold			16-Sep-1995|| optional topics (delete if not used)|	Restrictions/Warnings:|	Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	16-Sep-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*/#ifndef _H_remparse#define _H_remparse/*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "inclnest.h"#include "zcatgmgr.h"#include "zstylmgr.h"#include "rerror.h"#include "rmessage.h"#include "mparse.h"#include "dateroot.h"#include "inclunst.h"/*---------------------------------------------------------------------+\|																		||	Defines																||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Type Definitions													||																		|\+---------------------------------------------------------------------*/typedef struct TBlockData{	long	nCommand;	long	nSubCommand;		long	nBefore;	long	nAfter;	long	nPriority;		long	nFontSize;	long	mFontFace;	long	nFontColor;	Char	sFontName[32];	long	mOverride;	// which parameters from style were processed	Char	sParentStyle[STYLE_MAXNAME];	Char	sParentCategory[STYLE_MAXNAME];	Char	sNameStyle[STYLE_MAXNAME];	Char	sNameCategory[STYLE_MAXNAME];		char	string[256];} TBlockData, *TBlockDataPtr;typedef class RemindParse	*RemindParsePtr;/*---------------------------------------------------------------------+\|																		||	Class Definitions													||																		|\+---------------------------------------------------------------------*/class RemindDocument;	// forward referenceclass RemindParse{public://	construction/initialization/destruction					RemindParse();					RemindParse( RemindDocument* pDoc );	virtual			~RemindParse();private:	void			initRemindParse();public://	public functions	Bool			initialize();	Bool			parseString( CharPtr string );	RMessagePtr		getMessages();	RErrorPtr		getErrors();		static Bool		parsePrefStyle( RStyleInfoPtr pInfo, CharPtr sPref );protected://	protected definitions	enum ParseState	{		STATE_Undefined = 0,		STATE_Normal,		STATE_StyleList,		STATE_CategoryList	};//	protected functions	Bool			parseNormal( CharPtr string );	int				parseDirective( CharPtr string );	Bool			parseStyleList( CharPtr string );	Bool			parseCategoryList( CharPtr string );	int				parseMessagePrefix( TBlockDataPtr pBlock, CharPtr string );	int				parseDate( DateRootPtr* hDate, CharPtr string );	int				parseIncrement( MIncParsePtr pMParse, CharPtr string );	Bool			parseHoliday( CharPtr string );	int				parseMessageText( IntPtr pStyleCount,									TStyleRunRecordPtr pStyleRun,									CharPtr	sOutString,									CharPtr sInString,									RStylePtr pStyle );	void			parseError( CharPtr string );		// fills vnActiveID and vnCategoryActiveID	Bool			activateCategoryAndStyle( TBlockDataPtr pParseBlock );		RCategoryPtr	buildCategory( TBlockDataPtr pParseBlock, RCategoryPtr pDefaultCategory );	RCategoryPtr	newCategory( TBlockDataPtr pParseBlock,								RCategoryPtr pParentCategory,								RStylePtr pStyle );	RStylePtr		buildStyle( TBlockDataPtr pParseBlock, RStylePtr pDefaultStyle );	RStylePtr		newStyle( TBlockDataPtr pParseBlock, RStylePtr pParentStyle );	//	protected data	RemindDocument*		vpDoc;	ParseState			veState;	ZStyleManagerPtr	vpStyleMgr;	ZCategoryManagerPtr	vpCategoryMgr;		RMessagePtr			vpCurr;	RMessagePtr			vpMessages;	RErrorPtr			vpErrors;		//RPendingRange		vDefaultPending;	RStylePtr			vpActiveStyle;	RStylePtr			vpDefaultStyle;	//RStylePtr			vpRunningStyle;	ZStyleID			vnActiveStyleID;	// what actually gets assigned to the message	ZStyleID			vnDefaultStyleID;	//ZStyleID			vnRunningStyleID;		int					vnUntitled;			// counter for generating untitled "named" categories	RCategoryPtr		vpCategoryDefault;	RCategoryPtr		vpCategoryRunning;	RCategoryPtr		vpCategoryActive;	ZCategoryID			vnCategoryDefaultID;	ZCategoryID			vnCategoryRunningID;	ZCategoryID			vnCategoryActiveID;private://	private functions//	private data//============================== Overrides ==============================	//	root	//	BaseClass-1	//	BaseClass};/*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	Function Prototypes													|||																		|\+=====================================================================*//*=====================================================================+\||																		|||	Inline Functions													|||																		|\+=====================================================================*/#endif /* _H_remparse */