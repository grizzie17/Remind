/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	rstyle.cpp  --  brief description of what rstyle.cpp is for||	Purpose:|	Author and Date:	J.Griswold			14-Jun-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	23-Feb-1997			J.Griswold		Adjust "compare" function for new signature.	08-Oct-1996			J.Griswold		Move color-index information to xpcolor.cpp	14-Jun-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include "beardefs.h"#include "strform.h"#include "token.h"#include "bcrtti.h"#include "xpassert.h"#include "rstring.h"#include "rstyle.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	ZStyle/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0#pragma mark ____functions____#endif/*---------------------------------------------------------------------+\ *  NAME:	rstyle_getRawSaveString - generate a string to save to file *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	12-Mar-1997\+---------------------------------------------------------------------*/int		rstyle_getRawSaveString		(		CharPtr		sOutString,		int			nMaxString,		RStylePtr	pStyle,		int			mOverride		){	CharPtr		start = sOutString;	CharPtr		s = sOutString;	CharPtr		p;	int			n;	RStyleInfo	tStyleInfo;		UNREFERENCED_PARAMETER( nMaxString );		pStyle->getData( &tStyleInfo );		if ( mOverride & STYLE_OverrideFont )	{		XPFontPtr	pFontServer;		char		sName[FONTNAME_MAX];				pFontServer = getFontServer();		XP_Assert( pFontServer );		if ( pFontServer )		{			if ( pFontServer->getNameFromFontID( sName, tStyleInfo.font.ident ) )			{				n = ::strlen( sName );				::strcpy( s++, "," );				::strcpy( s, "font=" );				s += ::strlen( s );				if ( n == ::tok_symbol( sName ) )				{					::strcpy( s, sName );					s += n;				}				else				{					*s++ = '\"';					::strcpy( s, sName );					s += n;					*s++ = '\"';				}			}		}			}		if ( mOverride & STYLE_OverrideColor )	{		p = gListColor[ tStyleInfo.nColor ];		::strcpy( s++, "," );		::strcpy( s, p );		s += ::strlen( p );	}		if ( mOverride & STYLE_OverrideFace )	{		if ( tStyleInfo.font.face )		{			FontFaceMask	face = tStyleInfo.font.face;			FontFaceMask	seed;			int				idx;						idx = 0;			seed = 1;			while ( seed <= FONTFACE_Extend )			{				if ( seed & face )				{					::strcpy( s++, "," );					p = gListStyle[ idx ];					::strcpy( s, p );					s += ::strlen( p );				}				++idx;				seed = 0x01 << idx;			}					}		else		{			::strcpy( s++, "," );			::strcpy( s, "plain" );			s += ::strlen( s );		}	}		if ( mOverride & STYLE_OverrideSize )	{		::strcpy( s++, "," );		::strcpy( s, "size=" );		s += 5;		n = ::strFormat_decimal( s, tStyleInfo.font.size );		s += n;	}	if ( start < s )		*start = '%';		return s - start;}#if 0#pragma mark ____class____#endif/*---------------------------------------------------------------------+\ *  NAME:	RStyle - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jun-1995\+---------------------------------------------------------------------*/RStyle::RStyle		(		void		)		: INHERITED(){	vStyleClass = RStyle::StyleClassID;	vFont.ident = 0;	vFont.size = 0;	vFont.face = FONTFACE_Normal;	vnColorIdx = 0;	vmParamOverride = 0;	vnAscent = 0;	vnHeight = 0;}/*---------------------------------------------------------------------+\ *  NAME:	RStyle - copy constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	22-Jun-1995\+---------------------------------------------------------------------*/RStyle::RStyle		(		const RStyleRef	a		)		: INHERITED( a ){	vnRefCount = (-1);	// no references		vFont = a.vFont;	vnColorIdx = a.vnColorIdx;	vmParamOverride = a.vmParamOverride;	vnAscent = a.vnAscent;	vnHeight = a.vnHeight;}/*---------------------------------------------------------------------+\ *  NAME:	RStyle - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jun-1995\+---------------------------------------------------------------------*/RStyle::RStyle		(		const RStyleInfoRef	rInfo		)		: INHERITED(){	vnAscent = 0;	vnHeight = 0;	vmParamOverride = 0;	setData( rInfo );}/*---------------------------------------------------------------------+\ *  NAME:	RStyle - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jun-1995\+---------------------------------------------------------------------*/RStyle::RStyle		(		const RStyleInfoPtr	pInfo		)		: INHERITED(){	vnAscent = 0;	vnHeight = 0;	vmParamOverride = 0;	setData( pInfo );}/*---------------------------------------------------------------------+\ *  NAME:	~RStyle - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jun-1995\+---------------------------------------------------------------------*/RStyle::~RStyle		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0#pragma mark ____public____#endif/*---------------------------------------------------------------------+\ *  NAME:	setData - *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jun-1995\+---------------------------------------------------------------------*/void	RStyle::setData		(		const RStyleInfoRef	rInfo		){	vFont = rInfo.font;	vnColorIdx = rInfo.nColor;		calcHeightStuff();}/*---------------------------------------------------------------------+\ *  NAME:	setData - *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Jun-1995\+---------------------------------------------------------------------*/void	RStyle::setData		(		const RStyleInfoPtr	pInfo		){	vFont = pInfo->font;	vnColorIdx = pInfo->nColor;		calcHeightStuff();}/*---------------------------------------------------------------------+\ *  NAME:	getData - *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	23-Jun-1995\+---------------------------------------------------------------------*/void	RStyle::getData		(		RStyleInfoPtr	pInfo		){	pInfo->font = vFont;	pInfo->nColor = vnColorIdx;}/*---------------------------------------------------------------------+\ *  NAME:	getOverrideMask - *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Sep-1995\+---------------------------------------------------------------------*/Byte	RStyle::getOverrideMask		(		void		) const{	return vmParamOverride;}/*---------------------------------------------------------------------+\ *  NAME:	spawn - close a copy of this style with override *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	12-Sep-1995\+---------------------------------------------------------------------*/RStylePtr		RStyle::spawn		(		const RStyleInfoPtr	pInfo,		int					mOverride,		CharPtr				sName		){	RStylePtr	pStyle;	RStyleInfo	info;		info.font = vFont;	info.nColor = vnColorIdx;		if ( 0 != (mOverride & STYLE_OverrideFont) )		info.font.ident = pInfo->font.ident;		if ( 0 != (mOverride & STYLE_OverrideSize) )		info.font.size = pInfo->font.size;		if ( 0 != (mOverride & STYLE_OverrideFace) )		info.font.face = pInfo->font.face;		if ( 0 != (mOverride & STYLE_OverrideColor) )		info.nColor = pInfo->nColor;		pStyle = new RStyle( &info );	XP_Assert( pStyle );	if ( pStyle )	{		pStyle->setName( sName );		pStyle->vmParamOverride = mOverride;		pStyle->setParentStyle( *this );	}		return pStyle;}/*---------------------------------------------------------------------+\ *  NAME:	activateStyle - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	RStyle::activateStyle		(		XPFontPtr	pFontServer		){	XPColor	textColor( (ColorIndex)vnColorIdx );		pFontServer->selectFontData( &vFont );	pFontServer->setColor( textColor );}/*---------------------------------------------------------------------+\ *  NAME:	getAscent - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	16-May-1995\+---------------------------------------------------------------------*/int		RStyle::getAscent		(		void		) const{	return vnAscent;}/*---------------------------------------------------------------------+\ *  NAME:	getHeight - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/int		RStyle::getHeight		(		void		) const{	return vnHeight;}/*---------------------------------------------------------------------+\ *  NAME:	operator== - equality *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	22-Jun-1995\+---------------------------------------------------------------------*/int		operator==		(		const RStyleRef	a,		const RStyleRef	b		){	return a.compare( b );}/*---------------------------------------------------------------------+\ *  NAME:	operator!= - inequality *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	22-Jun-1995\+---------------------------------------------------------------------*/int		operator!=		(		const RStyleRef	a,		const RStyleRef	b		){	return ! a.compare( b );}/*---------------------------------------------------------------------+\ *  NAME:	operator== - equality *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	22-Jun-1995\+---------------------------------------------------------------------*/int		operator==		(		const RStyleRef		a,		const RStyleInfoRef	b		){	return	a.vFont.ident == b.font.ident			&&	a.vFont.size == b.font.size			&&	a.vFont.face == b.font.face			&&	a.vnColorIdx == b.nColor;}/*---------------------------------------------------------------------+\ *  NAME:	operator!= - inequality *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	22-Jun-1995\+---------------------------------------------------------------------*/int		operator!=		(		const RStyleRef		a,		const RStyleInfoRef	b		){	return	a.vFont.ident != b.font.ident			||	a.vFont.size != b.font.size			||	a.vFont.face != b.font.face			||	a.vnColorIdx != b.nColor;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0#pragma mark ____protected____#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0#pragma mark ____private____#endif/*---------------------------------------------------------------------+\ *  NAME:	calcHeightStuff - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	23-Jun-1995\+---------------------------------------------------------------------*/void	RStyle::calcHeightStuff		(		void		){	FontMetricInfo	metrics;	XPFontPtr		pFontServer;	pFontServer = XPFont::getFontServer();	XP_Assert( pFontServer );		// assertion	activateStyle( pFontServer );		pFontServer->getMetrics( &metrics );	vnHeight = (FontSize)(metrics.dAscent + metrics.dDescent + metrics.dLeading);	vnAscent = (FontSize)metrics.dAscent;}/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0#pragma mark ________Overrides________#endif/*---------------------------------------------------------------------+\ *  NAME:	compare - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	04-Sep-1995\+---------------------------------------------------------------------*/Bool	RStyle::compare		(		const VCatalogItemRef	zc		) const{	Bool	result = NO;		result = INHERITED::compare( zc );	if ( result )	{		try		{			const RStyleRef	zr = DYNAMIC_CAST( RStyleRef, zc );						result =	vFont.ident == zr.vFont.ident					&&	vFont.size == zr.vFont.size					&&	vFont.face == zr.vFont.face					&&	vnColorIdx == zr.vnColorIdx;		}		catch ( bad_cast )		{			result = NO;		}	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1996\+---------------------------------------------------------------------*/