/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remdocnp.cpp  --  non-portable implementation of document||	Purpose:|	Author and Date:	J.Griswold			18-Mar-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	18-Mar-1997			J.Griswold		Add support for CMD_NewYearly	01-Jan-1996			J.Griswold		Add windowCreateOpenSet()	18-Mar-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include "bearstr.h"#include "strform.h"#include "tparse.h"#include "xpappl.h"#include "remdoc.h"#include "remdocnp.h"#include "remcmds.h"#include "remvw.h"#if defined( FRAMEWORK_PowerPlant )#	include <UWindows.h>#endif/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	XPDocument#define	PBcmd				PB_Offset( nCmd )#define	PBleft				PB_Offset( nLeft )#define PBtop				PB_Offset( nTop )#define PBright				PB_Offset( nRight )#define PBbottom			PB_Offset( nBottom )#define	PB_Offset( x )		TPA_Offset( WindowParseData, x )/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*/typedef struct WindowParseData{	long	nCmd;	long	nLeft;	long	nTop;	long	nRight;	long	nBottom;} WindowParseData;/*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Parse Data															|||																		|\+=====================================================================*/#if 0stateWindowSet(){#endifSTATE_	stateWindowSet	TRANS1_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBcmd )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBleft )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBtop )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBright )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBbottom )NEXT_STATE_	TRANS_	TPA_C( ';' )END_STATE_#if 0}#endif/*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____FRAMEWORK_MFC____(){}#endif#if defined( FRAMEWORK_MFC )/*---------------------------------------------------------------------+\ *  NAME:	make -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Apr-1996\+---------------------------------------------------------------------*/RemindDocumentPtr		RemindDocument::make		(		CDocument*	pDoc		){	RemindDocumentPtr	pRemDoc;	pRemDoc = NEW RemindDocument;	if ( pRemDoc )	{		pRemDoc->vpParent = pDoc;	}	return pRemDoc;}/*---------------------------------------------------------------------+\ *  NAME:	mfcCmdViewSaveSettings -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Jan-1996\+---------------------------------------------------------------------*/Bool	RemindDocument::mfcCmdViewSaveSettings		(		void		){	Bool			result = YES;	POSITION		pos;	XPViewPtr		pView;	const CRuntimeClass*	pClassData;	URect			r;	Char			sData[256];	Char			sTemp[256];	Char			string[256];		sData[0] = 0;	pos = getCDocument()->GetFirstViewPosition();	pView = (XPViewPtr)getCDocument()->GetNextView( pos );	while ( pView )	{		pClassData = pView->GetRuntimeClass();		if ( pClassData )		{			pView->windowGetClientRect( &r );			strFormat_scontrol( string, "%s,%ld,%ld,%ld,%ld;",								pClassData->m_lpszClassName,								r.left, r.top, r.right, r.bottom );			if ( ::strlen( string ) + ::strlen( sData )  <  sizeof( sData ) - 1 )			{				::strcpy( sTemp, sData );				::strcpy( sData, string );				::strcat( sData, sTemp );			}		}	}		if ( sData[0] )	{		XPApplicationPtr	pAppl;				pAppl = XPApplication::getApplicationPtr();		pAppl->putPreferenceString( "window", "document", sData );	}	return result;}#if 0____FRAMEWORK_PowerPlant____(){}#endif#elif defined( FRAMEWORK_PowerPlant )/*---------------------------------------------------------------------+\ *  NAME:	 ObeyCommand - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Mar-1995\+---------------------------------------------------------------------*/Boolean	RemindDocument::ObeyCommand		(		CommandT	inCommand,		void		*ioParam		){	Boolean		cmdHandled = true;	switch ( inCommand )	{	case CMD_CloseFile:		Close();		break;		case CMD_NewText:	case CMD_NewPending:	case CMD_NewWeekly:	case CMD_NewMonthly:	case CMD_NewYearly:		windowCreate( inCommand );		break;		case CMD_ViewErrors:			Str255		scName;				::string_pasCopy( scName, vsName );		::string_pasConcat( scName, "\p:Errors" );		if ( nil == UWindows::FindNamedWindow( scName ) )		{			LWindow*	pWindow;						pWindow = constructWindow( CMD_ViewErrors );			if ( pWindow )			{				pWindow->SetDescriptor( scName );				pWindow->Show();			}		}		break;		case CMD_SaveViews:		macCmdViewSaveSettings();		INHERITED::ObeyCommand( inCommand, ioParam );		break;		case CMD_NewMessage:		constructWindow( CMD_NewMessage );		break;		default:		cmdHandled = INHERITED::ObeyCommand( inCommand, ioParam );		break;	}		return cmdHandled;}/*---------------------------------------------------------------------+\ *  NAME:	 FindCommandStatus - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Mar-1995\+---------------------------------------------------------------------*/void	RemindDocument::FindCommandStatus		(		CommandT	inCommand,		Boolean		&outEnabled,		Boolean		&outUsesMark,		Char16		&outMark,		Str255		outName		){	outUsesMark = false;	switch ( inCommand )	{	case CMD_CloseFile:		outEnabled = true;		break;			case CMD_NewView:	case CMD_NewText:	case CMD_NewPending:	case CMD_NewWeekly:	case CMD_NewMonthly:	case CMD_NewYearly:		outEnabled = true;		break;		case CMD_SaveViews:		outEnabled = true;		break;		case CMD_NewMessage:		outEnabled = true;		break;		default:		INHERITED::FindCommandStatus( inCommand, outEnabled,									outUsesMark, outMark, outName );		break;	}}/*---------------------------------------------------------------------+\ *  NAME:	 windowResIDT - return the resource id for the new window *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1995\+---------------------------------------------------------------------*/ResIDT	RemindDocument::windowResIDT		(		CommandT	tCmd		){	if ( tCmd )		return (ResIDT)tCmd;	else		return PEGASUS_ViewPendingResIDT;}/*---------------------------------------------------------------------+\ *  NAME:	windowCreateOpenSet -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Dec-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::windowCreateOpenSet		(		void		){	Bool		result = NO;	XPString	xsData;	XPApplicationPtr	pAppl = XPApplication::getApplicationPtr();		if ( pAppl->getPreferenceString( xsData, "window", "document" ) )	{		Severity		sts;		WindowParseData	windowData;		TParseManager	tpaMgr;		CharPtr			pString;				pString = xsData.pointString();		while ( *pString )		{			tparse_initialize( &tpaMgr );			sts = tparse_parseLine( &tpaMgr, stateWindowSet, &windowData, pString );			if ( ISSUCCESS( sts ) )			{				if ( windowData.nCmd )				{					Rect	r;										r.top = windowData.nTop;					r.left = windowData.nLeft;					r.bottom = windowData.nBottom;					r.right = windowData.nRight;										windowCreate( windowData.nCmd, &r );				}				else				{					windowCreate( windowData.nCmd );				}								pString += tpaMgr.numCharsParsed;				result = YES;			}			else			{				windowCreate( 0 );				result = YES;				break;			}		}	}	else	{			if ( windowCreate( 0 ) )			result = YES;	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	macCmdViewSaveSettings -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Jan-1996\+---------------------------------------------------------------------*/Bool	RemindDocument::macCmdViewSaveSettings		(		void		){	Bool			result = YES;	WindowPeek		pWindow = (WindowPeek) LMGetWindowList();	LWindow*		pLWind;	Rect			r;	PaneIDT			nResID;	Char			sData[256];	Char			sTemp[256];	Char			string[256];		sData[0] = 0;	while ( nil != pWindow )	{		pLWind = LWindow::FetchWindowObject( (WindowPtr)pWindow );		pWindow = pWindow->nextWindow;		if ( pLWind				&&  pLWind->GetSuperCommander() == this				&&	pLWind->HasAttribute( windAttr_Regular ) )		{			nResID = pLWind->GetPaneID();			r = UWindows::GetWindowContentRect( (WindowPtr)pLWind->GetMacPort() );			strFormat_scontrol( string, "%ld,%d,%d,%d,%d;",								(long)nResID, r.left, r.top, r.right, r.bottom );			if ( ::strlen( string ) + ::strlen( sData ) < 255 )			{				::strcpy( sTemp, sData );				::strcpy( sData, string );				::strcat( sData, sTemp );			}		}	}	if ( sData[0] )	{		XPApplicationPtr	pAppl;				pAppl = XPApplication::getApplicationPtr();		pAppl->putPreferenceString( "window", "document", sData );	}	return result;}#endif // FRAMEWORK/*---------------------------------------------------------------------+\ *  NAME:	 someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/