/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1995 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remsplash.cpp  --  brief description of what remsplash.cpp is for||	Purpose:|	Author and Date:	J.Griswold			30-Jun-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|	$Header:	$|	--=>keyflag<=-- "Version %v %f, Locked by %l"|	""\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	12-Sep-1995			J.Griswold		Add function that creates the window for you and then forces		the initial update.		30-Jun-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "remsplash.h"#include "xpappl.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	LView/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	SplashAnim - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/SplashAnim::SplashAnim		(		void		)		: XPAnimation(){	vpLogo = NULL;	vpIcon = NULL;}/*---------------------------------------------------------------------+\ *  NAME:	~SplashAnim - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/SplashAnim::~SplashAnim		(		void		){}/*---------------------------------------------------------------------+\ *  NAME:	initialize - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	SplashAnim::initialize		(		void		){	Bool	result = YES;		do // sequence	{		result = XPAnimation::initialize();		if ( ! result )			break;							} while ( 0 );		return result;}#if 0____class____(){}#endifIMPL_StreamCreate( RemindSplash, INHERITED )#if 0_(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 RemindSplash - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/RemindSplash::RemindSplash		(		void		)		: INHERITED(){	initRemindSplash();}/*---------------------------------------------------------------------+\ *  NAME:	 ~RemindSplash - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/RemindSplash::~RemindSplash		(		void		){	if ( vhPicture )		::ReleaseResource( (Handle)vhPicture );	if ( vpLogoWorld )	{		delete vpLogoWorld;		vpLogoWorld = NULL;	}	if ( vpRemindWorld )	{		delete vpRemindWorld;		vpRemindWorld = NULL;	}	if ( vpViewWorld )	{		delete vpViewWorld;		vpViewWorld = NULL;	}		XPApplication::enablePostedCommands();}/*---------------------------------------------------------------------+\ *  NAME:	 initRemindSplash - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/void	RemindSplash::initRemindSplash		(		void		){	vnStartTime = 0;	vbDone = NO;	vbRepeating = NO;	vnNum = 4;	vnDenom = 8;	vnPictID = 0;	vhPicture = NULL;	vpViewWorld = NULL;	vpLogoWorld = NULL;	vpRemindWorld = NULL;}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 createRemindSplash - static function *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	12-Sep-1995\+---------------------------------------------------------------------*/void	RemindSplash::createRemindSplash		(		void		){	LWindow*	pWind;	pWind = LWindow::CreateWindow( 5000, XPApplication::getApplicationPtr() );	if ( pWind )		pWind->UpdatePort();}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 finishAndClose - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/void	RemindSplash::finishAndClose		(		void		){	if ( vbRepeating )		StopRepeating();	else		StopIdling();	LWindow	*pWind = getLWindow();	if ( pWind )		pWind->DoClose();}/*---------------------------------------------------------------------+\ *  NAME:	 drawPict - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/void	RemindSplash::drawPict		(		void		){	Rect			r;	Rect			rView;	short			nWidth, nHeight;	SDimension16	size;	GrafPtr			pViewPort;	GrafPtr			pPort;	::GetPort( &pViewPort );	vpViewWorld->BeginDrawing();	::GetPort( &pPort );	GetFrameSize( size );	rView.left = 0;	rView.top = 0;	rView.right = size.width;	rView.bottom = size.height;		::EraseRect( &rView );	if ( vpRemindWorld  &&  vnNum < vnDenom )	{		nWidth = vRemindRect.right - vRemindRect.left;		nHeight = vRemindRect.bottom - vRemindRect.top;		r.left = (size.width - nWidth) / 2;		r.top = (size.height - nHeight) / 2;		r.right = r.left + nWidth;		r.bottom = r.top + nHeight;				vpRemindWorld->CopyImage( pPort, r );	}		nWidth = vLogoRect.right - vLogoRect.left;	nHeight = vLogoRect.bottom - vLogoRect.top;		nWidth = nWidth * vnNum / vnDenom;	nHeight = nHeight * vnNum / vnDenom;		r.left = (size.width - nWidth) / 2;	r.top = (size.height - nHeight) / 2;	r.right = r.left + nWidth;	r.bottom = r.top + nHeight;	if ( vpLogoWorld )	{		if ( 1 < vnNum )			vpLogoWorld->CopyImage( pPort, r );	}	else if ( nil != vhPicture )	{		::LoadResource( (Handle)vhPicture );		::DrawPicture( vhPicture, &r );	}	vpViewWorld->EndDrawing();	::SetPort( pViewPort );	vpViewWorld->CopyImage( pViewPort, rView );}/*---------------------------------------------------------------------+\ *  NAME:	 getLWindow - Get pointer to window's super commander *  DESCRIPTION:		This function walks up the super view list.  We assume that		when we find a super view that is null, that we have the window. *  AUTHOR: J.Griswold			DATE:	14-May-1995\+---------------------------------------------------------------------*/LWindow*		RemindSplash::getLWindow		(		void		){	LWindow		*pWindow = NULL;	LView		*pView;		pView = GetSuperView();	if ( pView )	{		LView	*pTempView = pView;				do		{			pTempView = pView->GetSuperView();			if ( pTempView )				pView = pTempView;			else				pWindow = (LWindow*)pView;		} while ( pTempView );	}		return pWindow;}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif#if 0____LPane____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 FinishCreateSelf - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	09-Jul-1995\+---------------------------------------------------------------------*/void	RemindSplash::FinishCreateSelf		(		void		){	GDHandle		hMain;	int				nDepth;	SDimension16	size;	Rect			r;	short			nPictID;		INHERITED::FinishCreateSelf();	hMain = GetMainDevice();	nDepth = (**(**hMain).gdPMap).pixelSize;	GetFrameSize( size );	r.left = 0;	r.top = 0;	r.right = size.width;	r.bottom = size.height;	vpViewWorld = new LGWorld( r, nDepth, 0, 0, hMain );		if ( nDepth >= 8 )		nPictID = 200;	else		nPictID = 201;		vhPicture = ::GetPicture( nPictID );	if ( nil != vhPicture )	{		short	nWidth, nHeight;				vLogoRect = (*vhPicture)->picFrame;		nWidth = vLogoRect.right - vLogoRect.left;		nHeight = vLogoRect.bottom - vLogoRect.top;				r.left = 0;		r.top = 0;		r.right = nWidth;		r.bottom = nHeight;				vnDenom = nHeight / 2;		vnNum = vnDenom; //1; //vnDenom / 3;				vpLogoWorld = new LGWorld( r, nDepth, 0, 0, hMain );		if ( vpLogoWorld )		{			if ( vpLogoWorld->BeginDrawing() )			{				::LoadResource( (Handle)vhPicture );				::DrawPicture( vhPicture, &r );				vpLogoWorld->EndDrawing();			}		}		::ReleaseResource( (Handle)vhPicture );		vhPicture = NULL;	}		if ( nDepth >= 8 )		nPictID = 202;	else		nPictID = 203;	vhPicture = ::GetPicture( nPictID );	if ( nil != vhPicture )	{		Rect	r;		short	nWidth, nHeight;				vRemindRect = (*vhPicture)->picFrame;		nWidth = vRemindRect.right - vRemindRect.left;		nHeight = vRemindRect.bottom - vRemindRect.top;				r.left = 0;		r.top = 0;		r.right = nWidth;		r.bottom = nHeight;				vpRemindWorld = new LGWorld( r, nDepth, 0, 0, hMain );		if ( vpRemindWorld )		{			if ( vpRemindWorld->BeginDrawing() )			{				::LoadResource( (Handle)vhPicture );				::DrawPicture( vhPicture, &r );				vpRemindWorld->EndDrawing();			}		::ReleaseResource( (Handle)vhPicture );		vhPicture = NULL;		}	}	if ( IsVisible() )	{		Refresh();		getLWindow()->UpdatePort();	}	//StartRepeating();	StartIdling();	vbRepeating = NO;	vbDone = NO;}/*---------------------------------------------------------------------+\ *  NAME:	 DrawSelf - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/void	RemindSplash::DrawSelf		(		void		){	INHERITED::DrawSelf();		if ( 0 == vnStartTime )		vnStartTime = ::TickCount();			drawPict();		}/*---------------------------------------------------------------------+\ *  NAME:	 ClickSelf - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/void	RemindSplash::ClickSelf		(		const SMouseDownEvent	&inMouseDown		){	INHERITED::ClickSelf( inMouseDown );	if ( 1 < vnNum )	{		vnNum = 1;		FocusDraw();		drawPict();	}	finishAndClose();}#if 0____LPeriodical____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 SpendTime - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-Jun-1995\+---------------------------------------------------------------------*/void	RemindSplash::SpendTime		(		const EventRecord &inMacEvent		){	long	nDelta;		if ( ! vbRepeating )	{		nDelta = ::TickCount() - vnStartTime;		if ( 30 < nDelta )		{			StopIdling();			StartRepeating();			vbRepeating = YES;		}	}	else if ( 0 < vnStartTime )	{		nDelta = ::TickCount() - vnStartTime;		if ( nDelta < 2 )			return;		if ( 1 < vnNum )		{			--vnNum;			vnStartTime = 0;			Refresh();			getLWindow()->UpdatePort();			//FocusDraw();			//drawPict();		}	}	else	{		nDelta = 0;	}	if ( nDelta > 60*2  &&  1 == vnNum )		finishAndClose();	}/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/