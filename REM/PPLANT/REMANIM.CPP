/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1995 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remanim.cpp  --  brief description of what remanim.cpp is for||	Purpose:|	Author and Date:	J.Griswold			20-Nov-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|	$Header:	$|	--=>keyflag<=-- "Version %v %f, Locked by %l"|	""\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	20-Nov-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "beardefs.h"#include "remanim.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*///#define INHERITED	BaseClass/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	XPSprite - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/XPSprite::XPSprite		(		void		){	vRect.top = 0;	vRect.left = 0;	vRect.bottom = 0;	vRect.right = 0;}/*---------------------------------------------------------------------+\ *  NAME:	~XPSprite - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/XPSprite::~XPSprite		(		void		){}/*---------------------------------------------------------------------+\ *  NAME:	reset - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPSprite::reset		(		void		){	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	hasFrame - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPSprite::hasFrame		(		Long	nFrame		){	UNREFERENCED_PARAMETER( nFrame );	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	draw - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/void	XPSprite::draw		(		Rect*	pViewRect,		Long	nFrame		){	UNREFERENCED_PARAMETER( pViewRect );	UNREFERENCED_PARAMETER( nFrame );}/*---------------------------------------------------------------------+\ *  NAME:	getFrameRect - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	21-Nov-1995\+---------------------------------------------------------------------*/void	XPSprite::getFrameRect		(		Rect*	pSpriteRect,		Rect*	pViewRect,		Long	nFrame		){	UNREFERENCED_PARAMETER( pViewRect );	UNREFERENCED_PARAMETER( nFrame );		pSpriteRect->top = 0;	pSpriteRect->left = 0;	pSpriteRect->bottom = 0;	pSpriteRect->right = 0;}/*---------------------------------------------------------------------+\ *  NAME:	getRect - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	21-Nov-1995\+---------------------------------------------------------------------*/void	XPSprite::getRect		(		Rect*	pSpriteRect		){	*pSpriteRect = vRect;}/*---------------------------------------------------------------------+\ *  NAME:	getSize - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Nov-1995\+---------------------------------------------------------------------*/void	XPSprite::getSize		(		Point*	pSize		){	pSize->h = vRect.right - vRect.left;	pSize->v = vRect.bottom - vRect.top;}#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	XPSpriteGWorld - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Nov-1995\+---------------------------------------------------------------------*/XPSpriteGWorld::XPSpriteGWorld		(		void		){	vpPixWorld = NULL;	vnHeight = 0;	vnWidth = 0;}/*---------------------------------------------------------------------+\ *  NAME:	~XPSpriteGWorld - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Nov-1995\+---------------------------------------------------------------------*/XPSpriteGWorld::~XPSpriteGWorld		(		void		){	if ( vpPixWorld )	{		delete vpPixWorld;		vpPixWorld = NULL;	}}/*---------------------------------------------------------------------+\ *  NAME:	makeGWorld - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Nov-1995\+---------------------------------------------------------------------*/Bool	XPSpriteGWorld::makeGWorld		(		short	nWidth,		short	nHeight		){	Bool		result = NO;	GDHandle	hMain;	int			nDepth;	Rect		r;		hMain = GetMainDevice();	nDepth = (**(**hMain).gdPMap).pixelSize;		do // sequence	{		r.left = 0;		r.top = 0;		r.right = nWidth;		r.bottom = nHeight;		vRect = r;		vnWidth = nWidth;		vnHeight = nHeight;		//++vnWidth;		//++vnHeight;				vpPixWorld = new LGWorld( r, nDepth, 0, 0, hMain );		if ( NULL == vpPixWorld )			break;				if ( vpPixWorld->BeginDrawing() )		{			::ForeColor( blackColor );			::BackColor( whiteColor );			vpPixWorld->EndDrawing();		}				result = YES;	} while ( 0 ); // end sequence		return result;}/*---------------------------------------------------------------------+\ *  NAME:	beginDrawing - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Nov-1995\+---------------------------------------------------------------------*/Bool	XPSpriteGWorld::beginDrawing		(		){	if ( vpPixWorld )		return vpPixWorld->BeginDrawing();	else		return NO;}/*---------------------------------------------------------------------+\ *  NAME:	endDrawing - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Nov-1995\+---------------------------------------------------------------------*/Bool	XPSpriteGWorld::endDrawing		(		){	if ( vpPixWorld )		vpPixWorld->EndDrawing();	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	getFrameRect - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Nov-1995\+---------------------------------------------------------------------*/void	XPSpriteGWorld::getFrameRect		(		Rect*	pSpriteRect,		Rect*	pViewRect,		Long	nFrame		){	UNREFERENCED_PARAMETER( pViewRect );	UNREFERENCED_PARAMETER( nFrame );		*pSpriteRect = vRect;}#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	XPSpritePix - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/XPSpritePix::XPSpritePix		(		void		){}/*---------------------------------------------------------------------+\ *  NAME:	~XPSpritePix - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/XPSpritePix::~XPSpritePix		(		void		){}/*---------------------------------------------------------------------+\ *  NAME:	specifyPicture - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPSpritePix::specifyPicture		(		short	nPictID		){	Bool		result = NO;	GDHandle	hMain;	int			nDepth;	PicHandle	hPicture;	Rect		rTemp;	short		nWidth;	short		nHeight;		hMain = GetMainDevice();	nDepth = (**(**hMain).gdPMap).pixelSize;		do // sequence	{		hPicture = ::GetPicture( nPictID );		if ( nil == hPicture )			break;		rTemp = (*hPicture)->picFrame;		nWidth = rTemp.right - rTemp.left;		nHeight = rTemp.bottom - rTemp.top;				if ( ! makeGWorld( nWidth, nHeight ) )			break;				if ( beginDrawing() )		{			::DrawPicture( hPicture, &vRect );			endDrawing();		}		::ReleaseResource( (Handle)hPicture );		hPicture = NULL;				result = YES;	} while ( 0 ); // end sequence		return result;}#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	XPAnimation - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/XPAnimation::XPAnimation		(		void		){	vRect.top = 0;	vRect.left = 0;	vRect.right = 0;	vRect.bottom = 0;}/*---------------------------------------------------------------------+\ *  NAME:	~XPAnimation - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/XPAnimation::~XPAnimation		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	initialize - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPAnimation::initialize		(		void		){	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	setSize - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/void	XPAnimation::setSize		(		Rect*	pRect		){	vRect = *pRect;}/*---------------------------------------------------------------------+\ *  NAME:	moreFrames - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPAnimation::moreFrames		(		){	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	frameStart - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPAnimation::frameStart		(		){	::EraseRect( &vRect );	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	frameDrawSome - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPAnimation::frameDrawSome		(		){	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	frameComplete - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	20-Nov-1995\+---------------------------------------------------------------------*/Bool	XPAnimation::frameComplete		(		){	return YES;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/