/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remmain.cpp  --  main entry-point for remind application||	Purpose:|	Author and Date:	J.Griswold			10-Feb-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	10-Feb-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "machine.h"#if ! defined( OS_MACINTOSH )#	error "This file is only available for the Macintosh"#endif#include <LGrowZone.h>#include <UMemoryMgr.h>#include <UDrawingState.h>#include <UPowerTools.h>//#include <Profiler.h>//#include "NewWithFree.h"#include "MWDebugUtil.h"#include "mem.h"#include "xpassert.h"#include "xprefcnt.h"#include "xpproj.h"#include PEGASUS_IncludeApplication/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*---------------------------------------------------------------------+\ *  NAME:	main - main entry point *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	10-Feb-1995\+---------------------------------------------------------------------*/void main( void ){	InitializeHeap(4);	UQDGlobals::InitializeToolbox(&qd);#if defined( Debug_Throw )  ||  defined( Debug_Signal )	Boolean		bDebugging;	OSErr		error;		error = ::AmIBeingMWDebugged( &bDebugging );	if ( noErr != error )		bDebugging = false;									// Set Debugging options#ifdef Debug_Throw	//	debugAction_LowLevelDebugger is used because	//	debugAction_SourceDebugger seems to not work.	//	This option does cause the source-debugger to break.	gDebugThrow			= (bDebugging)			? debugAction_LowLevelDebugger			: debugAction_Alert;#endif#ifdef Debug_Signal	gDebugSignal			= (bDebugging)			? debugAction_LowLevelDebugger			: debugAction_Alert;#endif#ifdef Debug_Signal					// Check for missing MBAR, which	CheckForInitialMBAR();			// probably means that there is no#endif								// project resource file#endif // Debug	new LGrowZone(20000);	//PEGASUS_Application	theApp;	// replace this with your App type#if defined( DEBUG_NEW )  &&  DEBUG_NEW >= DEBUG_NEW_LEAKS	//DebugNewForgetLeaks();	DebugNewValidateAllBlocks();	//DebugNewReportLeaks();#endif		PEGASUS_Application*	theApp = new PEGASUS_Application;	// replace this with your App type	theApp->Run();	Long	nObjects = XPRefCount::getObjCount();	//nObjects = 1;	XP_AssertMsg( 0 == nObjects, "XPRefCount objects still exist" );			//FreeAllCplusMemory();	mem_releasePool();	delete theApp;	//delete pZone;#if defined( DEBUG_NEW )  &&  DEBUG_NEW >= DEBUG_NEW_LEAKS	//XP_AssertMsg( 0 == gDebugNewAllocCurr,	//				"DEBUGNEW -- blocks still allocated through operator new" );	DebugNewValidateAllBlocks();	DebugNewReportLeaks();#endif}/*---------------------------------------------------------------------+\ *  NAME:	somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1994\+---------------------------------------------------------------------*/