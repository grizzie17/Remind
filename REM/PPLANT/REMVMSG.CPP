/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1995 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remvmsg.cpp  --  brief description of what remvmsg.cpp is for||	Purpose:|	Author and Date:	J.Griswold			14-Nov-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|	$Header:	$|	--=>keyflag<=-- "Version %v %f, Locked by %l"|	""\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	14-Nov-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include <LControl.h>#include <LStdControl.h>#include <LEditField.h>#include <PP_Messages.h>#include "beartype.h"#include "datevalu.h"#include "remvmsg.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	LDialogBox/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/IMPL_StreamCreate( RemindDialogMessage, INHERITED )#if 0{}#endif#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	RemindDialogMessage - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Nov-1995\+---------------------------------------------------------------------*/RemindDialogMessage::RemindDialogMessage		(		void		)		: INHERITED(){	initRemindDialogMessage();}/*---------------------------------------------------------------------+\ *  NAME:	~RemindDialogMessage - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Nov-1995\+---------------------------------------------------------------------*/RemindDialogMessage::~RemindDialogMessage		(		void		){}/*---------------------------------------------------------------------+\ *  NAME:	initRemindDialogMessage - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::initRemindDialogMessage		(		void		){	vIdent = 1;}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	selectDateType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::selectDateType		(		int		ident		){	switch ( ident )	{	case 1:		if ( ident != vIdent )		{			controlsHideAll();			controlsShowDate();			vIdent = ident;		}		break;	case 2:		if ( ident != vIdent )		{			controlsHideAll();			controlsShowWeekday();			vIdent = ident;		}		break;	case 3:		if ( ident != vIdent )		{			controlsHideAll();			controlsShowLunar();			vIdent = ident;		}		break;	default:		break;	}}/*---------------------------------------------------------------------+\ *  NAME:	controlsHideAll - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::controlsHideAll		(		){	LControl*	pControl;	pControl = (LControl*)FindPaneByID( 'mDAY' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mWKN' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mWKD' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mMON' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mSEQ' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mYRT' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mYRN' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mANV' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'tANV' );	if ( pControl )		pControl->Hide();	pControl = (LControl*)FindPaneByID( 'mLUN' );	if ( pControl )		pControl->Hide();	}/*---------------------------------------------------------------------+\ *  NAME:	controlsShowDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::controlsShowDate		(		){	LControl*	pControl;	pControl = (LControl*)FindPaneByID( 'mDAY' );	if ( pControl )		pControl->Show();	pControl = (LControl*)FindPaneByID( 'mMON' );	if ( pControl )	{		Long	nValue;		pControl->Show();		nValue = pControl->GetValue();		if ( 3 <= nValue  &&  nValue <= 5 )		{			pControl = (LControl*)FindPaneByID( 'mSEQ' );			if ( pControl )				pControl->Show();		}	}	pControl = (LControl*)FindPaneByID( 'mYRT' );	if ( pControl )	{		pControl->Show();		Long	nValue = pControl->GetValue();		if ( 1 == nValue )		{			pControl = (LControl*)FindPaneByID( 'mYRN' );			if ( pControl )				pControl->Show();			pControl = (LControl*)FindPaneByID( 'mANV' );			if ( pControl )				pControl->Show();			pControl = (LControl*)FindPaneByID( 'tANV' );			if ( pControl )				pControl->Show();		}	}}/*---------------------------------------------------------------------+\ *  NAME:	controlsShowWeekday - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::controlsShowWeekday		(		){	LControl*	pControl;	pControl = (LControl*)FindPaneByID( 'mWKN' );	if ( pControl )		pControl->Show();	pControl = (LControl*)FindPaneByID( 'mWKD' );	if ( pControl )		pControl->Show();	pControl = (LControl*)FindPaneByID( 'mMON' );	if ( pControl )		pControl->Show();	pControl = (LControl*)FindPaneByID( 'mMON' );	if ( pControl )	{		Long	nValue;		pControl->Show();		nValue = pControl->GetValue();		if ( 3 <= nValue  &&  nValue <= 5 )		{			pControl = (LControl*)FindPaneByID( 'mSEQ' );			if ( pControl )				pControl->Show();		}	}	pControl = (LControl*)FindPaneByID( 'mYRT' );	if ( pControl )	{		pControl->Show();		Long	nValue = pControl->GetValue();		if ( 1 == nValue )		{			pControl = (LControl*)FindPaneByID( 'mYRN' );			if ( pControl )				pControl->Show();			pControl = (LControl*)FindPaneByID( 'mANV' );			if ( pControl )				pControl->Show();			pControl = (LControl*)FindPaneByID( 'tANV' );			if ( pControl )				pControl->Show();		}	}}/*---------------------------------------------------------------------+\ *  NAME:	controlsShowLunar - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::controlsShowLunar		(		){	LControl*	pControl;	pControl = (LControl*)FindPaneByID( 'mLUN' );	if ( pControl )		pControl->Show();}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif#if 0____LPane____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	FinishCreateSelf - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::FinishCreateSelf		(		void		){	LControl*	pControl;	Julian		nToday;	int			dd, mm, yy;		nToday = dateValue_today();	::julianDate_gregorianFromNumber( &dd, &mm, &yy, nToday );	INHERITED::FinishCreateSelf();	pControl = (LControl*)FindPaneByID( 'mADD' );	if ( pControl )		pControl->AddListener( this );	pControl = (LControl*)FindPaneByID( 'mCAN' );	if ( pControl )		pControl->AddListener( this );	pControl = (LControl*)FindPaneByID( 'mTYP' );	if ( pControl )	{		pControl->AddListener( this );		pControl->SetValue( 1 );	}	pControl = (LControl*)FindPaneByID( 'mDAY' );	if ( pControl )	{		pControl->AddListener( this );		pControl->SetValue( (long)dd );	}	pControl = (LControl*)FindPaneByID( 'mWKN' );	if ( pControl )		pControl->AddListener( this );	pControl = (LControl*)FindPaneByID( 'mWKD' );	if ( pControl )		pControl->AddListener( this );	pControl = (LControl*)FindPaneByID( 'mMON' );	if ( pControl )	{		pControl->AddListener( this );		pControl->SetValue( 6L + mm );	}	pControl = (LControl*)FindPaneByID( 'mSEQ' );	if ( pControl )		pControl->AddListener( this );	pControl = (LControl*)FindPaneByID( 'mYRT' );	if ( pControl )		pControl->AddListener( this );	pControl = (LControl*)FindPaneByID( 'mLUN' );	if ( pControl )		pControl->AddListener( this );		LEditField*	pField;	pField = (LEditField*)FindPaneByID( 'mYRN' );	if ( pField )	{		pField->SetValue( (long)yy );	}		vIdent = 0;	selectDateType( 1 );}#if 0____LListener____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	ListenToMessage - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Nov-1995\+---------------------------------------------------------------------*/void	RemindDialogMessage::ListenToMessage		(		MessageT	inMessage,		void*		ioParam		){	Long		nValue;	LControl*	pControl;		switch ( inMessage )	{	case 'can ':		ObeyCommand( cmd_Close, nil );		break;	case 'add ':		break;	case 'type':		nValue = *(LongPtr)ioParam;		selectDateType( (int)nValue );		break;	case 'dayn':	case 'week':	case 'wday':		break;	case 'mon ':		nValue = *(LongPtr)ioParam;		pControl = (LControl*)FindPaneByID( 'mSEQ' );		if ( pControl )		{			if ( 3 <= nValue  &&  nValue <= 5 )			{				Long	nMaxValue;								if ( ! pControl->IsVisible() )				{					pControl->Show();					pControl->SetValue( 1 );				}				nMaxValue = pControl->GetMaxValue();				switch ( nValue )				{				case 3:					nMaxValue = 2;					break;				case 4:					nMaxValue = 3;					break;				case 5:					nMaxValue = 6;					break;				default:					break;				}				pControl->SetMaxValue( nMaxValue );				MenuHandle	hMenu;								hMenu = ((LStdPopupMenu*)pControl)->GetMacMenuH();				if ( hMenu )				{					for ( short i = 1; i <= nMaxValue; ++i )						::EnableItem( hMenu, i );					for ( short i = nMaxValue+1; i <= 6; ++i )						::DisableItem( hMenu, i );				}			}			else			{				if ( pControl->IsVisible() )					pControl->Hide();			}		}		break;	case 'seqn':		break;	case 'year':		nValue = *(LongPtr)ioParam;		pControl = (LControl*)FindPaneByID( 'mYRN' );		if ( pControl )		{			if ( 1 == nValue )			{				if ( ! pControl->IsVisible() )				{					pControl = (LControl*)FindPaneByID( 'mYRN' );					if ( pControl )						pControl->Show();					pControl = (LControl*)FindPaneByID( 'mANV' );					if ( pControl )						pControl->Show();					pControl = (LControl*)FindPaneByID( 'tANV' );					if ( pControl )						pControl->Show();				}			}			else			{				if ( pControl->IsVisible() )				{					pControl = (LControl*)FindPaneByID( 'mYRN' );					if ( pControl )						pControl->Hide();					pControl = (LControl*)FindPaneByID( 'mANV' );					if ( pControl )						pControl->Hide();					pControl = (LControl*)FindPaneByID( 'tANV' );					if ( pControl )						pControl->Hide();				}			}		}		break;	case 'lunr':		break;	default:		INHERITED::ListenToMessage( inMessage, ioParam );		break;	}}/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/