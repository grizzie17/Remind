/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1995 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remvwnp.cpp  --  brief description of what remvwnp.cpp is for||	Purpose:|	Author and Date:	J.Griswold			dd-mmm-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|	$Header:	$|	--=>keyflag<=-- "Version %v %f, Locked by %l"|	""\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	dd-mmm-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include "remvw.h"#include "remcmds.h"#if defined( FRAMEWORK_MFC )#	include <afxwin.h>#	include "resource.h"#elif defined( FRAMEWORK_PowerPlant )#	include <LControl.h>#	include <LCaption.h>#	include <PP_KeyCodes.h>#	include <UAttachments.h>#	include "bearstr.h"#endif/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	XPView#if defined( FRAMEWORK_MFC )#elif defined( FRAMEWORK_PowerPlant )	const PaneIDT	PANE_CtlView	= 'vCTL';	const PaneIDT	PANE_Title		= 'titl';	const PaneIDT	PANE_Next		= 'next';	const PaneIDT	PANE_Previous	= 'prev';#endif // FRAMEWORK/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*---------------------------------------------------------------------+\ *  NAME:	 setCaption - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-May-1995\+---------------------------------------------------------------------*/void	RemindViewBase::setCaption		(		CharPtr	sCaption		){#if defined( FRAMEWORK_MFC )	vpWindowBar->SetDlgItemText( IDC_EDIT1, sCaption );#elif defined( FRAMEWORK_PowerPlant )	LWindow*	pWindow;	LCaption*	pCaption;		pWindow = getLWindow();	pCaption = (LCaption*)pWindow->FindPaneByID( PANE_Title );	if ( pCaption )	{		Str255	scTitle;				string_convPasFromC( scTitle, sCaption );		pCaption->SetDescriptor( scTitle );		pCaption->Refresh();	}#endif}#if 0____FRAMEWORK_MFC____(){}#endif#if defined( FRAMEWORK_MFC )/*---------------------------------------------------------------------+\ *  NAME:	mfcRemindViewBaseDestructor - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	25-Jan-1996\+---------------------------------------------------------------------*/void	RemindViewBase::mfcRemindViewBaseDestructor		(		void		){	if ( vpWindowBar )	{		delete vpWindowBar;		vpWindowBar = NULL;	}}/*---------------------------------------------------------------------+\ *  NAME:	 OnInitialUpdate - brief statement *  DESCRIPTION: *  AUTHOR: H.Rody			DATE:	17-May-1995\+---------------------------------------------------------------------*/void	RemindViewBase::OnInitialUpdate		(		void		){	// Setup CDialog Bar	vpWindowBar = new CDialogBar;	if (!vpWindowBar->Create(getCView()->GetParentFrame(), IDD_WINDOWBAR, CBRS_TOP, 0xE800 ))	{		TRACE0("Failed to create WindowBar");	}	// Force display of CDialogBar	getCView()->GetParentFrame()->RecalcLayout(TRUE);	INHERITED::OnInitialUpdate();}/*---------------------------------------------------------------------+\ *  NAME:	 OnWndButtonLeft - brief statement *  DESCRIPTION: *  AUTHOR: H.Rody			DATE:	31-May-1995\+---------------------------------------------------------------------*/void	RemindViewBase::OnWndButtonLeft		(		void		){	cmdPrevious();}/*---------------------------------------------------------------------+\ *  NAME:	 OnWndButtonRight - brief statement *  DESCRIPTION: *  AUTHOR: H.Rody			DATE:	31-May-1995\+---------------------------------------------------------------------*/void	RemindViewBase::OnWndButtonRight		(		void		){	cmdNext();}/*---------------------------------------------------------------------+\ *  NAME:	 OnWndButtonUp - brief statement *  DESCRIPTION: *  AUTHOR: H.Rody			DATE:	26-Jan-1996\+---------------------------------------------------------------------*/void	RemindViewBase::OnWndButtonUp		(		void		){	cmdBlockPrevious();}/*---------------------------------------------------------------------+\ *  NAME:	 OnWndButtonDown - brief statement *  DESCRIPTION: *  AUTHOR: H.Rody			DATE:	26-Jan-1996\+---------------------------------------------------------------------*/void	RemindViewBase::OnWndButtonDown		(		void		){	cmdBlockNext();}#if 0____FRAMEWORK_PowerPlant____(){}#endif#elif defined( FRAMEWORK_PowerPlant )/*---------------------------------------------------------------------+\ *  NAME:	 FinishCreateSelf - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-May-1995\+---------------------------------------------------------------------*/void	RemindViewBase::FinishCreateSelf		(		void		){	LWindow*	pWindow;	LView*		pCtlView;	LControl*	pControl;	LEraseAttachment*	pEraseAttach;		INHERITED::FinishCreateSelf();	pWindow = getLWindow();	pCtlView = (LView*)pWindow->FindPaneByID( PANE_CtlView );	if ( pCtlView )	{		pEraseAttach = new LEraseAttachment;		if ( pEraseAttach )			pCtlView->AddAttachment( pEraseAttach );	}	pControl = (LControl*)pWindow->FindPaneByID( PANE_Next );	if ( pControl )		pControl->AddListener( this );		pControl = (LControl*)pWindow->FindPaneByID( PANE_Previous );	if ( pControl )		pControl->AddListener( this );}/*---------------------------------------------------------------------+\ *  NAME:	 ListenToMessage - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-May-1995\+---------------------------------------------------------------------*/void	RemindViewBase::ListenToMessage		(		MessageT	inMessage,		void		*ioParam		){	switch ( inMessage )	{	case 500:			cmdPrevious();		break;		case 501:			cmdNext();		break;		default:			INHERITED::ListenToMessage( inMessage, ioParam );		break;	}}/*---------------------------------------------------------------------+\ *  NAME:	 ObeyCommand - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-May-1995\+---------------------------------------------------------------------*/Boolean	RemindViewBase::ObeyCommand		(		CommandT	inCommand,		void		*ioParam		){	Boolean		cmdHandled = true;	switch ( inCommand )	{	case CMD_Next:		cmdNext();		break;					case CMD_Previous:		cmdPrevious();		break;		case CMD_BlockNext:		cmdBlockNext();		break;					case CMD_BlockPrevious:		cmdBlockPrevious();		break;		case CMD_SetDate:		long	nValue;		nValue = *(LongPtr)ioParam;		cmdSetDate( nValue );		break;		case CMD_CalcHilite:		calcCalendarHilite();		break;		default:		cmdHandled = INHERITED::ObeyCommand( inCommand, ioParam );		break;	}		return cmdHandled;}/*---------------------------------------------------------------------+\ *  NAME:	 FindCommandStatus - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-May-1995\+---------------------------------------------------------------------*/void	RemindViewBase::FindCommandStatus		(		CommandT	inCommand,		Boolean		&outEnabled,		Boolean		&outUsesMark,		Char16		&outMark,		Str255		outName		){	outUsesMark = false;	switch ( inCommand )	{	case CMD_Next:		outEnabled = true;		break;			case CMD_Previous:		outEnabled = true;		break;		case CMD_BlockNext:		outEnabled = true;		break;			case CMD_BlockPrevious:		outEnabled = true;		break;		default:		INHERITED::FindCommandStatus( inCommand, outEnabled,										outUsesMark, outMark, outName );		break;	}}/*---------------------------------------------------------------------+\ *  NAME:	 HandleKeyPress - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Jun-1995\+---------------------------------------------------------------------*/Boolean	RemindViewBase::HandleKeyPress		(		const EventRecord	&inKeyEvent		){	Boolean	result = true;	char	cKey = inKeyEvent.message & charCodeMask;		switch ( cKey )	{	case char_RightArrow:		cmdNext();		break;	case char_LeftArrow:		cmdPrevious();		break;	case char_DownArrow:		cmdBlockNext();		break;	case char_UpArrow:		cmdBlockPrevious();		break;	default:		result = INHERITED::HandleKeyPress( inKeyEvent );		break;	}		return result;}#endif // FRAMEWORK/*---------------------------------------------------------------------+\ *  NAME:	 someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/