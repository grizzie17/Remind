// rmndview.cpp : implementation of the CRmndView class//#include "stdafx.h"#include "rmnd.h"#include "cviewg.h"#include "rmnddoc.h"#include "rmndview.h"#include "remvw.h"#ifdef _DEBUG#undef THIS_FILEstatic char BASED_CODE THIS_FILE[] = __FILE__;#endif/////////////////////////////////////////////////////////////////////////////// CRmndViewIMPLEMENT_DYNCREATE(CRmndView, CScrollView)#if 0_(){}#endifBEGIN_MESSAGE_MAP(CRmndView, CScrollView)	//{{AFX_MSG_MAP(CRmndView)	ON_WM_DESTROY()	ON_WM_LBUTTONDOWN()	ON_WM_LBUTTONUP()	ON_WM_MOUSEMOVE()	ON_WM_RBUTTONDOWN()	ON_WM_RBUTTONUP()	//}}AFX_MSG_MAP	// Standard printing commands	ON_COMMAND(ID_FILE_PRINT, CScrollView::OnFilePrint)	ON_COMMAND(ID_FILE_PRINT_PREVIEW, CScrollView::OnFilePrintPreview)END_MESSAGE_MAP()#if 0_(){}#endif/////////////////////////////////////////////////////////////////////////////// CRmndView construction/destructionCRmndView::CRmndView(){	// TODO: add construction code here	XPVIEW_CViewConstructor();}CRmndView::~CRmndView(){	XPVIEW_Destroy();}/////////////////////////////////////////////////////////////////////////////// CRmndView drawingvoid CRmndView::OnDraw(CDC* pDC){	CRmndDoc* pDoc = GetDocument();	ASSERT_VALID(pDoc);	// TODO: add draw code for native data here	glueOnDraw( pDC );}void CRmndView::OnInitialUpdate(){	CScrollView::OnInitialUpdate();	CSize sizeTotal;	// TODO: calculate the total size of this view	sizeTotal.cx = sizeTotal.cy = 100;	SetScrollSizes(MM_TEXT, sizeTotal);		//XPVIEW_Make( RemindViewPending );		glueOnInitialUpdate();}/////////////////////////////////////////////////////////////////////////////// CRmndView printingBOOL CRmndView::OnPreparePrinting(CPrintInfo* pInfo){	// default preparation	return DoPreparePrinting(pInfo);}void CRmndView::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/){	// TODO: add extra initialization before printing}void CRmndView::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/){	// TODO: add cleanup after printing}/////////////////////////////////////////////////////////////////////////////// CRmndView diagnostics#ifdef _DEBUGvoid CRmndView::AssertValid() const{	CScrollView::AssertValid();}void CRmndView::Dump(CDumpContext& dc) const{	CScrollView::Dump(dc);}CRmndDoc* CRmndView::GetDocument() // non-debug version is inline{	ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CRmndDoc)));	return (CRmndDoc*)m_pDocument;}#endif //_DEBUG/////////////////////////////////////////////////////////////////////////////// CRmndView message handlersvoid CRmndView::OnActivateView(BOOL bActivate, CView* pActivateView, CView* pDeactiveView) {	// TODO: Add your specialized code here and/or call the base class	glueOnActivateView( bActivate, pActivateView, pDeactiveView );		CScrollView::OnActivateView(bActivate, pActivateView, pDeactiveView);}void CRmndView::OnDestroy() {	CScrollView::OnDestroy();		// TODO: Add your message handler code here	glueOnDestroy();	}void CRmndView::OnLButtonDown(UINT nFlags, CPoint point) {	// TODO: Add your message handler code here and/or call default	glueOnLButtonDown( nFlags, point );		CScrollView::OnLButtonDown(nFlags, point);}void CRmndView::OnLButtonUp(UINT nFlags, CPoint point) {	// TODO: Add your message handler code here and/or call default	glueOnLButtonUp( nFlags, point );		CScrollView::OnLButtonUp(nFlags, point);}void CRmndView::OnMouseMove(UINT nFlags, CPoint point) {	// TODO: Add your message handler code here and/or call default	glueOnMouseMove( nFlags, point );		CScrollView::OnMouseMove(nFlags, point);}void CRmndView::OnRButtonDown(UINT nFlags, CPoint point) {	// TODO: Add your message handler code here and/or call default	glueOnRButtonDown( nFlags, point );		CScrollView::OnRButtonDown(nFlags, point);}void CRmndView::OnRButtonUp(UINT nFlags, CPoint point) {	// TODO: Add your message handler code here and/or call default	glueOnRButtonUp( nFlags, point );		CScrollView::OnRButtonUp(nFlags, point);}