/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remdoc.cpp  --  brief description of what xprototyp.c is for||	Purpose:|	Author and Date:	J.Griswold			13-Feb-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	13-Jul-1996			J.Griswold		Add "getMask" function that sets bits in an array of long-words		corresponding to the dates where messages occur.	13-Feb-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "beartype.h"#include "bits.h"#include "file.h"#include "filetext.h"#include "token.h"#include "tokencnv.h"#include "xpassert.h"#include "zstylmgr.h"#include "remcmds.h"#include "remappl.h"#include "remdoc.h"#include "remdefs.h"#include "remparse.h"#include "rstring.h"#include "datepars.h"#include "dkeyword.h"#include "datedmy.h"#include "datewmy.h"#include "datejul.h"#include "datemoon.h"#include "datepas.h"#include "datewday.h"#include "dateinc.h"#include "julian.h"#include "holiday.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	XPDocument#define POINTSIZE	SIZE_Message#define LINESPACING	(POINTSIZE + 4)/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/IMPL_DynamicCreate( RemindDocument, INHERITED )#if 0{}#endif#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	RemindDocument - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Feb-1995\+---------------------------------------------------------------------*/RemindDocument::RemindDocument		(		void		)		: INHERITED(){	vhFile = NULL;	vnNumLines = 0;	vpHead = NULL;	vpMessages = NULL;	vpDeadlines = NULL;	vpTasks = NULL;	vpErrors = NULL;}/*---------------------------------------------------------------------+\ *  NAME:	~RemindDocument - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Feb-1995\+---------------------------------------------------------------------*/RemindDocument::~RemindDocument		(		void		){	if ( vhFile )		fileClose();	textDestroyLines();	NONPORT_RemindDocumentDestructor}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	getPending - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/NodeJDayPtr		RemindDocument::getPending		(		Long	nDate		){	RMessagePtr	pMsg;	NodeJDay	nodeHead;	NodeJDayPtr	pNode;	Long		list[DATELIST_MAX];	int			nCount;	int			i;		pMsg = (RMessagePtr)vpMessages;		while ( pMsg )	{		nCount = pMsg->calcPendingList( list, nDate );		if ( 0 < nCount )		{			for ( i = 0; i < nCount; ++i )			{				pNode = nodeHead.getJDayNode( &nodeHead, list[i] );				if ( pNode )				{					pNode->addRItem( pMsg );				}			}		}		pMsg = (RMessagePtr)pMsg->getNext();	}	return (NodeJDayPtr)nodeHead.getNext();}/*---------------------------------------------------------------------+\ *  NAME:	getRange - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/NodeJDayPtr		RemindDocument::getRange		(		Long	nEarly,		Long	nLate		){	RMessagePtr	pMsg;	NodeJDay	nodeHead;	NodeJDayPtr	pNode;	Long		list[DATELIST_MAX];	int			nCount;	int			i;		pMsg = (RMessagePtr)vpMessages;		while ( pMsg )	{		nCount = pMsg->calcRangeList( list, nEarly, nLate );		if ( 0 < nCount )		{			for ( i = 0; i < nCount; ++i )			{				pNode = nodeHead.getJDayNode( &nodeHead, list[i] );				if ( pNode )				{					pNode->addRItem( pMsg );				}			}		}		pMsg = (RMessagePtr)pMsg->getNext();	}	return (NodeJDayPtr)nodeHead.getNext();}/*---------------------------------------------------------------------+\ *  NAME:	getMask - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Jul-1996\+---------------------------------------------------------------------*/void	RemindDocument::getMask		(		LongPtr	pMask,		Long	nEarly,		Long	nLate		){	RMessagePtr	pMsg;	NodeJDay	nodeHead;	Long		list[DATELIST_MAX];	int			nCount;	int			i;		pMsg = (RMessagePtr)vpMessages;		while ( pMsg )	{		nCount = pMsg->calcRangeList( list, nEarly, nLate );		if ( 0 < nCount )		{			for ( i = 0; i < nCount; ++i )			{				bit_set( pMask, list[i] - nEarly );			}		}		pMsg = (RMessagePtr)pMsg->getNext();	}}/*---------------------------------------------------------------------+\ *  NAME:	documentGetExtents - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	17-Apr-1995\+---------------------------------------------------------------------*/void	RemindDocument::documentErrorGetExtents		(		URectPtr	pExtents		){	UPoint	pt;		pt.x = 0;	pt.y = 0;	pExtents->top = 0;	pExtents->left = 0;	pExtents->bottom = 0;	pExtents->right = 0;	if ( vpErrors )	{		TextRangeInfo	tRange;		RItemPtr		pText;				pText = vpErrors;		while ( pText )		{			pText->getExtents( &tRange );			if ( pExtents->right < tRange.rect.right )				pExtents->right = tRange.rect.right;			pExtents->bottom += tRange.rect.bottom - tRange.rect.top;			pText = (RItemPtr)pText->getNext();		}	}	pExtents->right += 10 + 5;}/*---------------------------------------------------------------------+\ *  NAME:	fileDrawErrors - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	12-Mar-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::fileDrawErrors		(		XPDraw*	pDraw		){	URect			rectUpdate;	RItemPtr		pText;	Pixel			y;	Pixel			nHeight;		pDraw->getUpdateRect( &rectUpdate );		y = 0;	nHeight = 0;		if ( vpErrors )	{		pText = vpErrors;		while ( pText )		{			nHeight = pText->getHeight();			if ( y+nHeight > rectUpdate.top )				break;			y += nHeight;			pText = (RItemPtr)pText->getNext();		}				while ( pText )		{			if ( y > rectUpdate.bottom )				break;			pText->drawAt( pDraw, 10, y+pText->getAscent() );			y += pText->getHeight();			pText = (RItemPtr)pText->getNext();		}	}#if 0	pDraw->drawText( 10, 100, "This is a test" );	pDraw->drawMoveTo( rectUpdate.left, rectUpdate.top );		// top,left move	pDraw->drawLineTo( rectUpdate.left, rectUpdate.bottom );	// left side	pDraw->drawLineTo( rectUpdate.right, rectUpdate.bottom );	// bottom	pDraw->drawLineTo( rectUpdate.left, rectUpdate.top );		// bottom,right to top,left diag	pDraw->drawLineTo( rectUpdate.right, rectUpdate.top );		// top	pDraw->drawLineTo( rectUpdate.left, rectUpdate.bottom );	// other diag	pDraw->drawMoveTo( rectUpdate.right, rectUpdate.top );	pDraw->drawLineTo( rectUpdate.right, rectUpdate.bottom );#endif		return YES;}/*---------------------------------------------------------------------+\ *  NAME:	cmdViewSaveSettings - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	12-Nov-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::cmdViewSaveSettings		(		void		){	return YES;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	textOpen - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Apr-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::textOpen		(		FileSpecPtr	pSpec		){	Bool	result = NO;	FileErr	eStatus;		do // sequence	{		if ( ! pSpec )			break;				vhFile = ::fileText_construct();		if ( ! vhFile )			break;				eStatus = ::file_specifyFileSpec( vhFile, pSpec );		if ( ISFAIL( eStatus ) )			break;				::file_specifyReadOnly( vhFile, YES );				eStatus = ::file_open( vhFile );		if ( ISFAIL( eStatus ) )			break;				result = YES;			} while ( 0 ); // end sequence	if ( ! result )	{		if ( vhFile )		{			::file_dispose( vhFile );			vhFile = NULL;		}	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	textRead - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Apr-1995\+---------------------------------------------------------------------*/int		RemindDocument::textRead		(		CharPtr	pString,		int		nMaxString		){	int		nTotalRead;	FileErr	eStatus;	Long	nSize;	CharPtr	s;		do	{		s = pString;		nSize = nMaxString;		eStatus = ::file_readString( vhFile, pString, &nSize );		if ( ISSUCCESS( eStatus ) )		{			if ( 0 == nSize )		// empty string?				continue;			s += ::tok_blank( s );			if ( ::tok_eos( s ) )				continue;						if ( '!' == *s			// comment line?					||	';' == *s )				continue;						nTotalRead = nSize;			break;		}		else		{			nTotalRead = 0;		}	} while ( ISSUCCESS( eStatus ) );		return nTotalRead;}/*---------------------------------------------------------------------+\ *  NAME:	textDestroyLines - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Apr-1995\+---------------------------------------------------------------------*/void	RemindDocument::textDestroyLines		(		void		){	if ( vpHead )		vpHead->destroyAllLinks();	if ( vpMessages )		vpMessages->destroyAllLinks();	if ( vpDeadlines )		vpDeadlines->destroyAllLinks();	if ( vpTasks )		vpTasks->destroyAllLinks();	if ( vpErrors )		vpErrors->destroyAllLinks();		vpHead = NULL;	vpMessages = NULL;	vpDeadlines = NULL;	vpTasks = NULL;	vpErrors = NULL;}/*---------------------------------------------------------------------+\ *  NAME:	remindLoad - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Apr-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::remindLoad		(		void		){	Bool			result = NO;	Long			nSize;	char			sLine[256];	RemindParse		parse( this );	//pParse = NEW RemindParse( this );	//XP_Assert( pParse );	parse.initialize();	do	{		nSize = textRead( sLine, sizeof( sLine ) );		if ( nSize > 0 )		{			parse.parseString( sLine );		}	} while ( nSize > 0 );	vpMessages = parse.getMessages();	vpErrors = parse.getErrors();	//delete pParse;		if ( vpErrors )		XPApplication::postCommand( CMD_ViewErrors );			if ( vpHead  ||  vpMessages  ||  vpDeadlines  ||  vpTasks  ||  vpErrors )		result = YES;			return result;}/*---------------------------------------------------------------------+\ *  NAME:	saveCategoryMgr - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	10-Apr-1996\+---------------------------------------------------------------------*/static Bool		saveCategoryMgr		(		FileHdl				hFile,		ZCategoryManagerPtr	pCategoryMgr		){	ZCategoryID		nMaxCategory;	ZCategoryID		index;	ZCategoryID		nParent;	RCategoryPtr	pCategory;	RCategoryPtr	pParentCategory;	RCategoryPtr	pDefaultCategory;	Byte			mOverride;	RCategoryInfo	info;	int				n;	Long			numChars;	CharPtr			start;	CharPtr			string;	XPStringPtr		pName;	char			line[128];		pDefaultCategory			= ((RemindApplication*)XPApplication::getApplicationPtr())->getCategoryDefault();		nMaxCategory = pCategoryMgr->getNamedCategoryCount();	if ( nMaxCategory )	{		start = string = line;				::strcpy( line, "#categories\n" );		numChars = ::strlen( line );		::fileText_writeString( hFile, line, &numChars );				for ( index = 1; index <= nMaxCategory; ++index )		{			pCategory = (RCategoryPtr)pCategoryMgr->getCategoryFromID( index );			if ( pCategory  &&  pCategory != pDefaultCategory )			{				pName = pCategory->getNamePtr();				XP_Assert( pName );				if ( pName )				{					string = line;					::strcpy( string, "\t" );					string += ::strlen( string );										if ( pName->getLength() == ::tok_symbol( *pName ) )					{						::strcpy( string, *pName );						string += pName->getLength();					}					else					{						::strcpy( string++, "\"" );						::strcpy( string, *pName );						string += pName->getLength();						::strcpy( string++, "\"" );					}										::strcpy( string, "\t" );					string += ::strlen( string );										pCategory->getData( &info );					mOverride = pCategory->getOverrideMask();										nParent = pCategory->getParentIdent();					pParentCategory = (RCategoryPtr)pCategoryMgr->getCategoryFromID( nParent );					if ( pParentCategory )					{						pName = pParentCategory->getNamePtr();						::strcpy( string, "%category=" );						string += ::strlen( string );												if ( pName->getLength() == ::tok_symbol( *pName ) )						{							::strcpy( string, *pName );							string += pName->getLength();						}						else						{							::strcpy( string++, "\"" );							::strcpy( string, *pName );							string += pName->getLength();							::strcpy( string++, "\"" );						}					}					if ( mOverride )					{						::strcpy( string, "\t" );						string += ::strlen( string );						n = category_getSaveOverrides( string, &info, mOverride );						string += n;					}					::strcpy( string++, "\n" );					numChars = string - start;					::fileText_writeString( hFile, line, &numChars );				}			}		}			::strcpy( line, "#end categories\n" );		numChars = ::strlen( line );		::fileText_writeString( hFile, line, &numChars );	}	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	saveStyleMgr - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Sep-1995\+---------------------------------------------------------------------*/static Bool		saveStyleMgr		(		FileHdl				hFile,		ZStyleManagerPtr	pStyleMgr		){	ZStyleID		nMaxStyle;	ZStyleID		index;	ZStyleID		nParent;	RStylePtr		pStyle;	RStylePtr		pParentStyle;	RStylePtr		pDefaultStyle;	Byte			mOverride;	RStyleInfo		styleInfo;	int				n;	Long			numChars;	CharPtr			start;	CharPtr			string;	XPStringPtr		pNameStr;	char			line[128];		pDefaultStyle			= ((RemindApplication*)XPApplication::getApplicationPtr())->getStyleDefaultMessage();		nMaxStyle = pStyleMgr->getNamedStyleCount();	if ( nMaxStyle )	{		start = string = line;				::strcpy( line, "#style\n" );		numChars = ::strlen( line );		::fileText_writeString( hFile, line, &numChars );				for ( index = 1; index <= nMaxStyle; ++index )		{			pStyle = (RStylePtr)pStyleMgr->getStyleFromID( index );			if ( pStyle  &&  pStyle != pDefaultStyle )			{				pNameStr = pStyle->getNamePtr();				XP_Assert( pNameStr );				if ( pNameStr )				{					string = line;					::strcpy( string, "\t" );					string += ::strlen( string );										if ( pNameStr->getLength() == ::tok_symbol( *pNameStr ) )					{						::strcpy( string, *pNameStr );						string += pNameStr->getLength();					}					else					{						::strcpy( string++, "\"" );						::strcpy( string, *pNameStr );						string += pNameStr->getLength();						::strcpy( string++, "\"" );					}										::strcpy( string, "\t" );					string += ::strlen( string );										pStyle->getData( &styleInfo );					mOverride = pStyle->getOverrideMask();										nParent = pStyle->getParentIdent();					pParentStyle = (RStylePtr)pStyleMgr->getStyleFromID( nParent );					if ( pParentStyle )					{						pNameStr = pParentStyle->getNamePtr();						::strcpy( string, "%style=" );						string += ::strlen( string );												if ( pNameStr->getLength() == ::tok_symbol( *pNameStr ) )						{							::strcpy( string, *pNameStr );							string += pNameStr->getLength();						}						else						{							::strcpy( string++, "\"" );							::strcpy( string, *pNameStr );							string += pNameStr->getLength();							::strcpy( string++, "\"" );						}					}					if ( mOverride )					{						::strcpy( string, "\t" );						string += ::strlen( string );						n = style_getSaveOverrides( string, &styleInfo, mOverride );						string += n;					}					::strcpy( string++, "\n" );					numChars = string - start;					::fileText_writeString( hFile, line, &numChars );				}			}		}			::strcpy( line, "#end style\n" );		numChars = ::strlen( line );		::fileText_writeString( hFile, line, &numChars );	}	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	remindSave - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Aug-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::remindSave		(		FileHdl	hFile		){	RItemPtr			pText;	ZStyleManagerPtr	pStyleMgr;	ZCategoryManagerPtr	pCategoryMgr;		pStyleMgr = ZStyleManager::getStyleManager();	XP_Assert( pStyleMgr );	saveStyleMgr( hFile, pStyleMgr );		pCategoryMgr = ZCategoryManager::getCategoryManager();	XP_Assert( pCategoryMgr );	saveCategoryMgr( hFile, pCategoryMgr );			if ( vpMessages )	{		pText = vpMessages;		while ( pText )		{			pText->save( hFile );			pText = (RItemPtr)pText->getNext();		}	}	return YES;}/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	fileNew - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	07-Mar-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::fileNew		(		FileSpecPtr		pStationary		){	UNREFERENCED_PARAMETER( pStationary );	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	fileOpen - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-Mar-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::fileOpen		(		FileSpecPtr		pFile		){	Bool	result = NO;		do // sequence	{		result = textOpen( pFile );		if ( ! result )			break;				result = remindLoad();			} while ( 0 ); // end sequence	if ( ! result )	{		if ( vhFile )		{			file_dispose( vhFile );			vhFile = NULL;		}	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	fileSave - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Aug-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::fileSave		(		void		){	Bool		result = YES;	FileHdl		hFile;	FileSpec	name;	FileErr		fsError;		fileSpec_specifyName( &name, "test reminders" );		hFile = fileText_construct();	if ( hFile )	{		file_specifyFileSpec( hFile, &name );#if defined( OS_MACINTOSH )		file_specifyCreatorAndType( hFile, 'gREM', 'TEXT' );#endif		fsError = file_create( hFile );		if ( ISSUCCESS( fsError ) )		{			remindSave( hFile );			file_close( hFile );		}		file_dispose( hFile );	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	fileSaveWithNewName - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Jun-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::fileSaveWithNewName		(		FileSpecPtr	pFile		){	Bool		result = YES;	FileHdl		hFile;	FileSpec	name;	FileErr		fsError;		fileSpec_specifyName( &name, "test reminders" );		hFile = fileText_construct();	if ( hFile )	{		file_specifyFileSpec( hFile, pFile );#if defined( OS_MACINTOSH )		file_specifyCreatorAndType( hFile, '????', 'TEXT' );#endif		fsError = file_create( hFile );		if ( ISSUCCESS( fsError ) )		{			remindSave( hFile );			file_close( hFile );		}		file_dispose( hFile );	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	fileClose - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	14-Feb-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::fileClose		(		void		){	if ( vhFile )	{		file_close( vhFile );		file_dispose( vhFile );		vhFile = NULL;	}	return YES;}/*---------------------------------------------------------------------+\ *  NAME:	fileDraw - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	12-Mar-1995\+---------------------------------------------------------------------*/Bool	RemindDocument::fileDraw		(		XPDraw	*pDraw		){	URect			rectUpdate;	RItemPtr		pText;	Pixel			y;	Pixel			nHeight;		pDraw->getUpdateRect( &rectUpdate );		y = 0;	nHeight = 0;		if ( vpMessages )	{		pText = vpMessages;		while ( pText )		{			//nHeight = pText->getHeight();			nHeight = pText->getDisplayHeight();			if ( rectUpdate.top < y+nHeight )				break;			y += nHeight;			pText = (RItemPtr)pText->getNext();		}				while ( pText )		{			if ( rectUpdate.bottom < y )				break;			pText->display( pDraw, 10, y, 0 );			//pText->drawAt( pDraw, 10, y+pText->getAscent() );			//y += pText->getHeight();			y += pText->getDisplayHeight();			pText = (RItemPtr)pText->getNext();		}	}#if 0	pDraw->drawText( 10, 100, "This is a test" );	pDraw->drawMoveTo( rectUpdate.left, rectUpdate.top );		// top,left move	pDraw->drawLineTo( rectUpdate.left, rectUpdate.bottom );	// left side	pDraw->drawLineTo( rectUpdate.right, rectUpdate.bottom );	// bottom	pDraw->drawLineTo( rectUpdate.left, rectUpdate.top );		// bottom,right to top,left diag	pDraw->drawLineTo( rectUpdate.right, rectUpdate.top );		// top	pDraw->drawLineTo( rectUpdate.left, rectUpdate.bottom );	// other diag	pDraw->drawMoveTo( rectUpdate.right, rectUpdate.top );	pDraw->drawLineTo( rectUpdate.right, rectUpdate.bottom );#endif		return YES;}/*---------------------------------------------------------------------+\ *  NAME:	documentGetExtents - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	17-Apr-1995\+---------------------------------------------------------------------*/void	RemindDocument::documentGetExtents		(		URectPtr	pExtents		){	UPoint	pt;		pt.x = 0;	pt.y = 0;	pExtents->top = 0;	pExtents->left = 0;	pExtents->bottom = 0;	pExtents->right = 0;	if ( vpMessages )	{		TextRangeInfo	tRange;		RItemPtr		pText;				pText = vpMessages;		while ( pText )		{			pText->getExtents( &tRange );			if ( pExtents->right < tRange.rect.right )				pExtents->right = tRange.rect.right;			pExtents->bottom += tRange.rect.bottom - tRange.rect.top;			pText = (RItemPtr)pText->getNext();		}	}	pExtents->right += 10 + 5;}/*---------------------------------------------------------------------+\ *  NAME:	somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/