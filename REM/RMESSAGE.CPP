/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	rmessage.cpp  --  brief description of what rmessage.cpp is for||	Purpose:|	Author and Date:	J.Griswold			28-Apr-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	28-Apr-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "bcrtti.h"#include "filetext.h"#include "strform.h"#include "token.h"#include "xpassert.h"#include "zstylmgr.h"#include "zcatgmgr.h"#include "rmessage.h"#include "rstring.h"#include "dateownr.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	RItem/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*---------------------------------------------------------------------+\ *  NAME:	category_getSaveOverrides - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	10-Apr-1996\+---------------------------------------------------------------------*/int		category_getSaveOverrides		(		CharPtr				string,		RCategoryInfoPtr	pCategory,		Byte				mOverride		){	CharPtr	start = string;	int		n;		if ( mOverride & CATEGORY_OverridePending )	{		::strcpy( string++, "," );		n = ::strFormat_decimal( string, pCategory->range.nBefore );		string += n;		if ( mOverride & CATEGORY_OverrideRangeAfter )		{			::strcpy( string++, ":" );			n = ::strFormat_decimal( string, pCategory->range.nAfter );			string += n;		}	}		if ( mOverride & CATEGORY_OverridePriority )	{		::strcpy( string++, "," );		::strcpy( string, "priority=" );		string += ::strlen( string );		n = ::strFormat_decimal( string, pCategory->nPriority );		string += n;	}		if ( mOverride & CATEGORY_OverrideStyle )	{		ZStyleManagerPtr	pMgr;		RStylePtr			pStyle;				pMgr = ZStyleManager::getStyleManager();		XP_Assert( pMgr );				pStyle = (RStylePtr)pMgr->getStyleFromID( pCategory->nStyleID );		if ( pStyle )			string += style_getSaveString( string, pStyle );	}		if ( start < string )		*start = '%';		return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	category_getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	10-Apr-1996\+---------------------------------------------------------------------*/int		category_getSaveString		(		CharPtr			string,		RCategoryPtr	pCategory,		ZStyleID		nRefStyleID		){	CharPtr		start = string;	int			nLength = 0;		UNREFERENCED_PARAMETER( nRefStyleID );		if ( pCategory )	{		ZCategoryManagerPtr	pMgr;		XPStringPtr		psName;		RCategoryInfo	info;		Byte			mOverride;				pMgr = DYNAMIC_CAST( ZCategoryManagerPtr, pCategory->getCatalog() );		XP_Assert( pMgr );				pCategory->getData( &info );		mOverride = pCategory->getOverrideMask();		psName = pCategory->getNamePtr();		if ( NULL == psName )		{			ZCategoryID		nParent;			RCategoryPtr	pParent;						nParent = pCategory->getParentIdent();			pParent = DYNAMIC_CAST( RCategoryPtr, pMgr->getCategoryFromID( nParent ) );			if ( pParent )				psName = pParent->getNamePtr();			else				mOverride = 0xFF;	// force all parameters		}		if ( psName  &&  0 < psName->getLength() )		{			::strcpy( string, "%category=" );			string += ::strlen( string );						if ( psName->getLength() == ::tok_symbol( *psName ) )			{				::strcpy( string, *psName );				string += psName->getLength();			}			else			{				::strcpy( string++, "\"" );				::strcpy( string, *psName );				string += psName->getLength();				::strcpy( string++, "\"" );			}		}		if ( NULL == pCategory->getNamePtr() )		{			if ( start < string )			{				::strcpy( string, "   " );				string += 3;			}			nLength = category_getSaveOverrides( string, &info, mOverride );			string += nLength;		}	}			return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	style_getSaveOverrides - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	17-Sep-1995\+---------------------------------------------------------------------*/int		style_getSaveOverrides		(		CharPtr			string,		RStyleInfoPtr	pStyle,		Byte			mOverride		){	CharPtr	start = string;	CharPtr	p;	int		n;		//::strcpy( string++, "%" );		if ( mOverride & STYLE_OverrideFont )	{		XPFontPtr	pFontServer;		char		sName[FONTNAME_MAX];				pFontServer = getFontServer();		XP_Assert( pFontServer );		if ( pFontServer )		{			if ( pFontServer->getNameFromFontID( sName, pStyle->font.ident ) )			{				n = ::strlen( sName );				::strcpy( string++, "," );				::strcpy( string, "font=" );				string += ::strlen( string );				if ( n == ::tok_symbol( sName ) )				{					::strcpy( string, sName );					string += n;				}				else				{					*string++ = '\"';					::strcpy( string, sName );					string += n;					*string++ = '\"';				}			}		}			}		if ( mOverride & STYLE_OverrideColor )	{		p = gListColor[ pStyle->nColor ];		::strcpy( string++, "," );		::strcpy( string, p );		string += ::strlen( p );	}		if ( mOverride & STYLE_OverrideFace )	{		if ( pStyle->font.face )		{			FontFaceMask	face = pStyle->font.face;			FontFaceMask	seed;			int				idx;						idx = 0;			seed = 1;			while ( seed <= FONTFACE_Extend )			{				if ( seed & face )				{					::strcpy( string++, "," );					p = gListStyle[ idx ];					::strcpy( string, p );					string += ::strlen( p );				}				++idx;				seed = 0x01 << idx;			}					}		else		{			::strcpy( string++, "," );			::strcpy( string, "plain" );			string += ::strlen( string );		}	}		if ( mOverride & STYLE_OverrideSize )	{		::strcpy( string++, "," );		::strcpy( string, "size=" );		string += 5;		n = ::strFormat_decimal( string, pStyle->font.size );		string += n;	}	if ( start < string )		*start = '%';		return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	style_getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Sep-1995\+---------------------------------------------------------------------*/int		style_getSaveString		(		CharPtr		string,		RStylePtr	pStyle,		ZStyleID	nRefStyleID		){	int					nLength = 0;	CharPtr				start;		start = string;			if ( pStyle )	{		ZStyleManagerPtr	pMgr;		XPStringPtr			pStyleName;		RStyleInfo			tStyleInfo;		Byte				mOverride;				pMgr = DYNAMIC_CAST( ZStyleManagerPtr, pStyle->getCatalog() );		XP_Assert( pMgr );		pStyle->getData( &tStyleInfo );		mOverride = pStyle->getOverrideMask();		pStyleName = pStyle->getNamePtr();		if ( NULL == pStyleName )		{			ZStyleID	nParent;			RStylePtr	pParent;						nParent = pStyle->getParentIdent();			pParent = (RStylePtr)pMgr->getStyleFromID( nParent );			if ( pParent )				pStyleName = pParent->getNamePtr();			else				mOverride = 0xFF;	// force all parameters		}		if ( 0 != nRefStyleID  &&  pStyle->getParentIdent() == nRefStyleID )			pStyleName = NULL;		if ( pStyleName  &&  0 < pStyleName->getLength() )		{			::strcpy( string, "%style=" );			string += ::strlen( string );						if ( pStyleName->getLength() == ::tok_symbol( *pStyleName ) )			{				::strcpy( string, *pStyleName );				string += pStyleName->getLength();			}			else			{				::strcpy( string++, "\"" );				::strcpy( string, *pStyleName );				string += pStyleName->getLength();				::strcpy( string++, "\"" );			}		}		if ( NULL == pStyle->getNamePtr() )		{			if ( start < string )			{				::strcpy( string, "   " );				string += 3;			}			nLength = style_getSaveOverrides( string, &tStyleInfo, mOverride );			string += nLength;		}	}			return string - start;}#if 0#pragma mark ____class____#endif/*---------------------------------------------------------------------+\ *  NAME:	 RMessage - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Apr-1995\+---------------------------------------------------------------------*/RMessage::RMessage		(		void		)		: INHERITED(){	initRMessage();}/*---------------------------------------------------------------------+\ *  NAME:	 RMessage - copy constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	04-May-1995\+---------------------------------------------------------------------*/RMessage::RMessage		(		RMessage&	m		)		: INHERITED( m ){	initRMessage();}/*---------------------------------------------------------------------+\ *  NAME:	 RMessage - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	04-May-1995\+---------------------------------------------------------------------*/RMessage::RMessage		(		CharPtr	s,		int		numChars		)		: INHERITED( s, numChars ){	initRMessage();}/*---------------------------------------------------------------------+\ *  NAME:	 ~RMessage - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Apr-1995\+---------------------------------------------------------------------*/RMessage::~RMessage		(		void		){	if ( vpDate )	{		vpDate->release();		vpDate = NULL;	}}/*---------------------------------------------------------------------+\ *  NAME:	 initRMessage - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	04-May-1995\+---------------------------------------------------------------------*/void	RMessage::initRMessage		(		void		){	vpDate = NULL;	vbHoliday = 0;}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0#pragma mark ____public____#endif/*---------------------------------------------------------------------+\ *  NAME:	 setDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/void	RMessage::setDate		(		DateRootPtr	pDate		){	if ( vpDate )	{		if ( pDate  &&  DATEKIND_Owner == pDate->getDateKind() )			((DateOwnerPtr)pDate)->setDate( vpDate );		vpDate->release();	}	vpDate = pDate;	vpDate->addRef();}/*---------------------------------------------------------------------+\ *  NAME:	 calcRangeList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/int		RMessage::calcRangeList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		nCount = 0;		// return		if ( vpDate )		nCount = vpDate->calcDateList( list, nEarly, nLate );		return nCount;}/*---------------------------------------------------------------------+\ *  NAME:	 calcPendingList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-May-1995\+---------------------------------------------------------------------*/int		RMessage::calcPendingList		(		Long	list[],		Long	nDate		){	Long	nEarly;	Long	nLate;	Short	nBefore;	Short	nAfter;	RCategoryPtr	pCategory;		pCategory = getCategoryPtr();	if ( pCategory )	{		pCategory->getPendingRange( &nBefore, &nAfter );	}	else	{		nBefore = 6;		nAfter = 0;	}	nLate = nDate + nBefore;	nEarly = nDate - nAfter;		return calcRangeList( list, nEarly, nLate );}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0#pragma mark ____protected____#endif/*---------------------------------------------------------------------+\ *  NAME:	getStyledSaveString - get formatted save string *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	21-Oct-1996\+---------------------------------------------------------------------*/int		RMessage::getStyledSaveString		(		CharPtr	string,		int		nMaxString		){	int		nLength;		nLength = getLength();	if ( nLength < nMaxString )	{		if ( NULL == vpMultiStyle )		{			::strcpy( string, pointString() );		}		else		{			getMultiStyledSaveString( string, nMaxString );		}	}	else	{		nLength = 0;	}	return nLength;}/*---------------------------------------------------------------------+\ *  NAME:	getMultiStyledSaveString - get formatted save string *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Feb-1997\+---------------------------------------------------------------------*/int		RMessage::getMultiStyledSaveString		(		CharPtr	string,		int		nMaxString		){	int					nLength = 0;	//RCharStyleRunPtr	pRuns;	//RCharStyleRunPtr	pEndRuns;	//RCharStyleDescriptorPtr	pDescBase;	//RCharStyleDescriptorPtr	pDesc;	//TStyleRunMetricsPtr	pRunMetrics;	//TStyleRunMetricsPtr	pRunMetricsHead;		UNREFERENCED_PARAMETER( nMaxString );		::strcpy( string, pointString() );	return nLength;}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0#pragma mark ____private____#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0#pragma mark ________Overrides________#endif#if 0#pragma mark ____RPersist____#endif/*---------------------------------------------------------------------+\ *  NAME:	save - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Aug-1995\+---------------------------------------------------------------------*/int		RMessage::save		(		FileHdl		hFile		){	int					nLength = 0;	RStylePtr			pStyle;	ZStyleManagerPtr	pStyleMgr;	RCategoryPtr		pCategory;	ZCategoryManagerPtr	pCatMgr;	CharPtr				start;	CharPtr				string;	char				data[256];		start = string = data;		pStyleMgr = ZStyleManager::getStyleManager();	XP_Assert( pStyleMgr );		pCatMgr = ZCategoryManager::getCategoryManager();	XP_Assert( pCatMgr );		if ( vpDate )	{		pCategory = (RCategoryPtr)pCatMgr->getCategoryFromID( vCategory );		if ( pCategory )		{			nLength = category_getSaveString( string, pCategory );			string += nLength;		}				if ( vnStyleID )		{			pStyle = (RStylePtr)pStyleMgr->getStyleFromID( vnStyleID );			if ( pStyle )			{				ZStyleID	nCatStyle = 0;								if ( pCategory )					nCatStyle = pCategory->getStyleID();				::strcpy( string, "   " );				string += 3;				nLength = style_getSaveString( string, pStyle, nCatStyle );				string += nLength;				//if ( pCategory				//		&&	pStyle->getParentIdent() == pCategory->getStyleID() )				//{				//	RStyleInfo	styleInfo;				//	Byte		mOverride;				//					//	mOverride = pStyle->getOverrideMask();				//	pStyle->getData( &styleInfo );				//	nLength = style_getSaveOverrides( string, &styleInfo, mOverride );				//	string += nLength;				//}				//else				//{				//	nLength = style_getSaveString( string, pStyle );				//	string += nLength;				//}			}		}				::strcpy( string, "     " );		string += 5;		nLength = vpDate->getSaveString( string, sizeof( data ) - (string - start) );		if ( nLength )		{			long	numChars;						string += nLength;			::strcpy( string, "     " );			string += 5;			nLength = getStyledSaveString( string, sizeof( data ) - (string - start) );			if ( nLength )			{				string += nLength;			}			::strcpy( string, "\n" );			++string;						numChars = string - start;			::fileText_writeString( hFile, data, &numChars );		}	}	return string - start;}#if 0#pragma mark ____RItem____#endif/*---------------------------------------------------------------------+\ *  NAME:	getItemType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Apr-1995\+---------------------------------------------------------------------*/RItemType		RMessage::getItemType		(		void		){	return RITEM_Message;}#if 0#pragma mark ____NodeLink____#endif/*---------------------------------------------------------------------+\ *  NAME:	calcDisplaySize - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	10-Jan-1997\+---------------------------------------------------------------------*/void	RMessage::calcDisplaySize		(		Pixel	nMaxWidth,		VoidPtr	pVoid		){	INHERITED::calcDisplaySize( nMaxWidth, pVoid );	getExtents( &vTextRange );}/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/