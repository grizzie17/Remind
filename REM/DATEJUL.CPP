/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	datejul.cpp  --  brief description of what datejul.c is for||	Purpose:|	Author and Date:	J.Griswold			04-Apr-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	04-Apr-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "strform.h"#include "julian.h"#include "datejul.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	DateRoot/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DateJulian - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	04-Apr-1995\+---------------------------------------------------------------------*/DateJulian::DateJulian		(		void		)		: INHERITED(){	vnJulian = 0;	vnRepeat = 0;	vnMaxRepeat = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateJulian - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	04-Apr-1995\+---------------------------------------------------------------------*/DateJulian::DateJulian		(		Long	nJulian		)		: INHERITED(){	vnJulian = nJulian;	vnRepeat = 0;	vnMaxRepeat = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateJulian - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	31-May-1995\+---------------------------------------------------------------------*/DateJulian::DateJulian		(		Long	nJulian,		Long	nRepeat		)		: INHERITED(){	vnJulian = nJulian;	vnRepeat = (UShort)nRepeat;}/*---------------------------------------------------------------------+\ *  NAME:	 DateJulian - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Jun-1995\+---------------------------------------------------------------------*/DateJulian::DateJulian		(		Long	nJulian,		Long	nRepeat,		Long	nMaxRepeat		)		: INHERITED(){	vnJulian = nJulian;	vnRepeat = (Word)nRepeat;	vnMaxRepeat = (Word)nMaxRepeat;}/*---------------------------------------------------------------------+\ *  NAME:	 ~DateJulian - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	04-Apr-1995\+---------------------------------------------------------------------*/DateJulian::~DateJulian		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getDateType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	06-May-1995\+---------------------------------------------------------------------*/DateEnum		DateJulian::getDateType		(		void		){	return DATE_Julian;}/*---------------------------------------------------------------------+\ *  NAME:	 caldDateList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	06-May-1995\+---------------------------------------------------------------------*/int		DateJulian::calcDateList		(		Long	list[],		Long	nEarly,		Long	nLate		){	if ( 0 == vnRepeat )	{		if ( nEarly <= vnJulian  &&  vnJulian <= nLate )		{			list[0] = vnJulian;			return 1;		}		else		{			return 0;		}	}	else	{		int		numDates = 0;	//	number of julian dates generated		int		numRepeat = 0;		Long	jdate = 0;		Long	nDelta;				if ( vnJulian < nEarly )		{			nDelta = nEarly - vnJulian;			jdate = vnJulian + nDelta - (nDelta % vnRepeat);			if ( vnMaxRepeat )				numRepeat = nDelta / vnRepeat;		}		else		{			jdate = vnJulian;		}				while ( jdate <= nLate )		{			if ( vnMaxRepeat > 0 )			{				++numRepeat;				if ( numRepeat > vnMaxRepeat )					break;			}			if ( nEarly <= jdate )				list[numDates++] = jdate;			jdate += vnRepeat;		}				return numDates;	}}/*---------------------------------------------------------------------+\ *  NAME:	 getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Aug-1995\+---------------------------------------------------------------------*/int		DateJulian::getSaveString		(		CharPtr	string,		int		nMaxString		){	int		nLength = 0;	CharPtr	start = string;		UNREFERENCED_PARAMETER( nMaxString );		nLength = strDate_ddmmmyyyyFromJulian( string, vnJulian );	string += nLength;	if ( vnRepeat > 0 )	{		::strcpy( string, " &" );		string += 2;		nLength = ::strFormat_decimal( string, (Long)vnRepeat );		string += nLength;		if ( vnMaxRepeat > 0 )		{			::strcpy( string, ":" );			++string;			nLength = ::strFormat_decimal( string, (Long)vnMaxRepeat );			string += nLength;		}	}	return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	 somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/