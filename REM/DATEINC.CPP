/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	dateinc.cpp  --  brief description of what dateinc.c is for||	Purpose:|	Author and Date:	J.Griswold			11-May-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	11-May-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "strform.h"#include "julian.h"#include "holiday.h"#include "dkeyword.h"#include "dateinc.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	DateOwner/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DateIncrement - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateIncrement::DateIncrement		(		void		)		: INHERITED(){	vnCondition = 0;	vnFormat = 0;	vnIncrement = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateIncrement - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateIncrement::DateIncrement		(		int		nCondition,		int		nFormat,		int		nIncrement		)		: INHERITED(){	vnCondition = nCondition;	vnFormat = nFormat;	vnIncrement = nIncrement;}/*---------------------------------------------------------------------+\ *  NAME:	 ~DateIncrement - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateIncrement::~DateIncrement		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 calcIncEarly - brief statement *  DESCRIPTION:		This function was basically ported directly from the old		"remind" program. *  AUTHOR: J.Griswold			DATE:	dd-May-1995\+---------------------------------------------------------------------*/Long	DateIncrement::calcIncEarly		(		Long	nEarly		){	Long	jd;		if ( INC_VALUE == vnFormat )	{		jd = nEarly - vnIncrement;	}	else	{		jd = nEarly - 7;	}	return jd;}/*---------------------------------------------------------------------+\ *  NAME:	 calcIncLate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	30-May-1995\+---------------------------------------------------------------------*/Long	DateIncrement::calcIncLate		(		Long	nLate		){	Long	jd;		if ( INC_VALUE == vnFormat )	{		jd = nLate - vnIncrement;	}	else	{		jd = nLate + 7;	}	return jd;}/*---------------------------------------------------------------------+\ *  NAME:	 isHoliday - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/Bool	DateIncrement::isHoliday		(		Long	nJulian		){	return Holiday::isHoliday( nJulian );}/*---------------------------------------------------------------------+\ *  NAME:	 doIncrement - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-May-1995\+---------------------------------------------------------------------*/Long	DateIncrement::doIncrement		(		Long	nJulian		){	long	jd;	long	wd;		if ( vnCondition )	{		wd = julianDate_weekdayFromNumber( nJulian );		if ( vnCondition > 0 )		{			if ( vnCondition != wd )				return nJulian;		}		else		{			//			//	These conditions do a reverse test.  That is they test that			//	the day is not the value that we want.			//			switch ( vnCondition )			{			case CMP_WEEKDAY:							if ( wd < 2 || 6 < wd )					return nJulian;				break;							case CMP_WEEKEND:							if ( 1 < wd && wd < 7 )					return nJulian;				break;							case CMP_HOLIDAY:							if ( ! isHoliday( nJulian ) )					return nJulian;				break;							case CMP_WORKDAY:							if ( ( wd < 2 || 6 < wd )  ||  isHoliday( nJulian ) )					return nJulian;				break;							case CMP_OFFDAY:							if ( ( 1 < wd && wd < 7 )  &&  ! isHoliday( nJulian ) )					return nJulian;				break;						default:							return nJulian;			}		}	}		//	if we got to here then we either didn't have a condition 	//	or the condition succeceeded.	switch ( vnFormat )	{	case INC_VALUE:			jd = nJulian + vnIncrement;		break;			default:		if ( vnIncrement > 0 )		{			wd = vnIncrement - julianDate_weekdayFromNumber( nJulian );			switch ( vnFormat )			{			case INC_WKD_ON_A:			/* on or after */				if ( wd < 0 )					wd += 7;				break;			case INC_WKD_AFTER:			/* after only */				if ( wd <= 0 )					wd += 7;				break;			case INC_WKD_ON_B:			/* on or before */				if ( wd > 0 )					wd -= 7;				break;			case INC_WKD_BEFORE:		/* before only */				if ( wd >= 0 )					wd -= 7;				break;			case INC_WKD_NEAREST:		/* nearest day */				if ( wd <= -3 )					wd += 7;				else if ( wd > 3 )					wd -= 7;				break;			default:				wd = 0;				break;			}			jd = nJulian + wd;		}		else	/* keyword */		{			wd = julianDate_weekdayFromNumber( nJulian );			switch ( vnIncrement )			{			case CMP_WEEKDAY:			case CMP_WORKDAY:				if ( wd < 2 || 6 < wd )				{					switch ( vnFormat )					{					case INC_WKD_ON_A:			/* on or after */					case INC_WKD_AFTER:			/* after only */						if ( wd < 2 )		/* sunday */							wd = 1;						else if ( wd > 6 )	/* saturday */							wd = 2;						else							wd = 0;						break;					case INC_WKD_ON_B:			/* on or before */					case INC_WKD_BEFORE:		/* before only */						if ( wd < 2 )		/* sunday */							wd = (-2);						else if ( wd > 6 )	/* saturday */							wd = (-1);						else							wd = 0;						break;					case INC_WKD_NEAREST:		/* nearest day */						if ( wd < 2 )		/* sunday */							wd = 1;						else if ( wd > 6 )	/* saturday */							wd = (-1);						else							wd = 0;						break;					default:						wd = 0;						break;					}				}				else				{					wd = 0;				}				break;			case CMP_WEEKEND:			case CMP_OFFDAY:				if ( 1 < wd && wd < 7 )				{					switch ( vnFormat )					{					case INC_WKD_ON_A:			/* on or after */					case INC_WKD_AFTER:			/* after only */						wd = 7 - wd;						break;					case INC_WKD_ON_B:			/* on or before */					case INC_WKD_BEFORE:		/* before only */						wd = 1 - wd;						break;					case INC_WKD_NEAREST:		/* nearest day */						if ( wd > 3 )							wd = 7 - wd;						else							wd = 1 - wd;						break;					default:						wd = 0;						break;					}				}				else				{					wd = 0;				}				break;			case CMP_HOLIDAY:				wd = 0;				break;			case CMP_CANCEL:				wd = (-32000);				break;			default:				wd = 0;				break;			}			jd = nJulian + wd;		}		break;	}	return jd;}/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getDateType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateEnum		DateIncrement::getDateType		(		void		){	return DATE_Increment;}/*---------------------------------------------------------------------+\ *  NAME:	 getDateKind - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateKind		DateIncrement::getDateKind		(		void		){	return DATEKIND_Owner;}/*---------------------------------------------------------------------+\ *  NAME:	 caldDateList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/int		DateIncrement::calcDateList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	int		i;	Long	nIncEarly;	Long	nIncLate;	Long	nJulian;	Long	incList[DATELIST_MAX];		nIncEarly = calcIncEarly( nEarly );	nIncLate = calcIncLate( nLate );	i = INHERITED::calcDateList( incList, nIncEarly, nIncLate );	if ( i > 0 )	{		for ( int j = 0; j < i; ++j )		{			nJulian = doIncrement( incList[j] );			if ( nEarly <= nJulian  &&  nJulian <= nLate )				list[numDates++] = nJulian;		}	}	return numDates;}/*---------------------------------------------------------------------+\ *  NAME:	 getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Aug-1995\+---------------------------------------------------------------------*/int		DateIncrement::getSaveString		(		CharPtr	string,		int		nMaxString		){	int		nLength = 0;	CharPtr	start = string;	CharPtr	p;	int		i;		nLength = INHERITED::getSaveString( string, nMaxString );	string += nLength;		if ( vnCondition )	{		::strcpy( string, "?" );		++string;		if ( vnCondition > 0 )		{			p = dkeyword_strWeekday( vnCondition );		}		else		{			i = vnCondition * (-1);			p = gSpecialDayKwds[ i-1 ];		}		::strcpy( string, p );		string += ::strlen( p );		::strcpy( string, " " );		++string;	}		if ( INC_VALUE == vnFormat )	{		if ( vnIncrement > 0 )		{			::strcpy( string, "+" );			++string;		}				i = ::strFormat_decimal( string, (long)vnIncrement );		string += i;	}	else	{		static char *incwkd[]		= {			"+",			"++",			"-",			"--",			"~",			0		};				p = incwkd[ vnFormat-1 ];		::strcpy( string, p );		string += ::strlen( p );				// weekday		if ( vnIncrement > 0 )		{			p = dkeyword_strWeekday( vnIncrement );		}		else		{			i = vnIncrement * (-1);			p = gSpecialDayKwds[ i-1 ];		}		::strcpy( string, p );		string += ::strlen( p );	}		return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	 somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/