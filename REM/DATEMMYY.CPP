/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	datemmyy.cpp  --  brief description of what datemmyy.c is for||	Purpose:|	Author and Date:	J.Griswold			05-Apr-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	05-Apr-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "strform.h"#include "dkeyword.h"#include "datemmyy.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	DateRoot/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DateMmmYyyy - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	05-Apr-1995\+---------------------------------------------------------------------*/DateMmmYyyy::DateMmmYyyy		(		void		)		: INHERITED(){	vnYear = 0;	vnAnniv = 0;	vnMonth = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateMmmYyyy - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-May-1995\+---------------------------------------------------------------------*/DateMmmYyyy::DateMmmYyyy		(		int		nMonth,		int		nYear		)		: INHERITED(){	vnMonth	= nMonth;	vnYear	= nYear;	vnAnniv	= 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateMmmYyyy - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-May-1995\+---------------------------------------------------------------------*/DateMmmYyyy::DateMmmYyyy		(		int		nMonth,		int		nCycle,		int		nYear,		int		nAnniv		)		: INHERITED(){	vnMonth	= nMonth | (nCycle << 4);	vnYear	= nYear;	vnAnniv	= nAnniv;}/*---------------------------------------------------------------------+\ *  NAME:	 ~DateMmmYyyy - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	05-Apr-1995\+---------------------------------------------------------------------*/DateMmmYyyy::~DateMmmYyyy		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 calcYear - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	06-May-1995\+---------------------------------------------------------------------*/Bool	DateMmmYyyy::calcYear		(		int		*pYear,		int		nStartYear		){	Bool	result = NO;		if ( 0 < vnYear )	{		if ( 0 == vnAnniv )		{			if ( 0 == *pYear )			{				*pYear = vnYear;				result = YES;			}			else			{				result = NO;			}		}		else		{			if ( 0 == *pYear )			{				int		nDelta;								nDelta = nStartYear - vnYear;				if ( nDelta <= 0 )					*pYear = vnYear;				else					*pYear = vnYear + nDelta - (nDelta % vnAnniv);			}			else			{				*pYear += vnAnniv;			}			result = YES;		}	}	else	{		if ( 0 == *pYear )			*pYear = nStartYear;		else			++(*pYear);		result = YES;	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	 calcMonth - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	06-May-1995\+---------------------------------------------------------------------*/Bool	DateMmmYyyy::calcMonth		(		int		*pMonth,		int		nStartMonth		){	Bool	result = NO;	int		nMonth;	int		nCycle;		nMonth = vnMonth & 0x0F;	nCycle = vnMonth >> 4;		if ( 0 == nCycle )	{		if ( 0 == nMonth )		{			if ( 0 == *pMonth )			{				*pMonth = nStartMonth;				result = YES;			}			else if ( 12 > *pMonth )			{				++(*pMonth);				result = YES;			}			else			{				result = NO;			}		}		else		{			if ( 0 == *pMonth )			{				*pMonth = nMonth;				result = YES;			}			else			{				result = NO;			}		}	}	else	{		if ( 0 == *pMonth )		{			int		mm;						mm = nStartMonth % nCycle;			mm = nStartMonth - mm + nMonth;			*pMonth = mm;			result = YES;		}		else		{			*pMonth += nCycle;			if ( *pMonth > 12 )				result = NO;		}	}	return result;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Aug-1995\+---------------------------------------------------------------------*/int		DateMmmYyyy::getSaveString		(		CharPtr	string,		int		nMaxString		){	CharPtr	start = string;	int		nMonth;	int		nCycle;	CharPtr	p;	int		i;		UNREFERENCED_PARAMETER( nMaxString );		nMonth = vnMonth & 0x0F;	nCycle = vnMonth >> 4;		::strcpy( string, "-" );	++string;	if ( 0 == vnMonth )	{		::strcpy( string, "*" );		++string;	}	else	{		if ( 0 == nCycle )		{			p = dkeyword_strMonth( nMonth );			::strcpy( string, p );			string += 3;			*string = '\0';		}		else		{			switch ( nCycle )			{			case 2:				p = gCycleKwds[ 0 ];				break;			case 3:				p = gCycleKwds[ 1 ];				break;			case 6:				p = gCycleKwds[ 2 ];				break;			default:				p = gCycleKwds[ 3];				break;			}			::strcpy( string, p );			string += ::strlen( p );			::strcpy( string, "(" );			++string;			i = ::strFormat_decimal( string, nMonth );			string += i;			::strcpy( string, ")" );			++string;		}	}		::strcpy( string, "-" );	++string; 	if ( 0 == vnYear )	{		::strcpy( string, "*" );		++string;	}	else	{		i = ::strFormat_decimal( string, (long)vnYear );		string += i;	}		if ( vnAnniv > 0 )	{		::strcpy( string, "@" );		++string;		i = ::strFormat_decimal( string, (long)vnAnniv );		string += i;			}		return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	 somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/