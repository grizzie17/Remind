/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	nodejown.cpp  --  class that owns JDay nodes||	Purpose:|	Author and Date:	J.Griswold			19-Mar-1997|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	16-May-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include "beardefs.h"#include "xpdraw.h"#include "julian.h"#include "nodejown.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	NodeLink/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0#pragma mark ____class____#endif/*---------------------------------------------------------------------+\ *  NAME:	 NodeJDayOwner - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/NodeJDayOwner::NodeJDayOwner		(		void		)		: INHERITED(){	initNodeJDayOwner();}/*---------------------------------------------------------------------+\ *  NAME:	 NodeJDayOwner - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/NodeJDayOwner::NodeJDayOwner		(		Long	nDate		)		: INHERITED(){	initNodeJDayOwner();	vnStart = nDate;}/*---------------------------------------------------------------------+\ *  NAME:	 initNodeJDayOwner - initialization *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/void	NodeJDayOwner::initNodeJDayOwner		(		void		){	vnStart = 0;	vpJDayList = NULL;	vSize.width = 0;	vSize.height = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 ~NodeJDayOwner - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/NodeJDayOwner::~NodeJDayOwner		(		void		){	if ( vpJDayList )	{		vpJDayList->destroyAllLinks();		vpJDayList = NULL;	}}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0#pragma mark ____public____#endif/*---------------------------------------------------------------------+\ *  NAME:	 getJulianDay - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/Long	NodeJDayOwner::getJulianDay		(		void		) const{	return vnStart;}/*---------------------------------------------------------------------+\ *  NAME:	 addJDayList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/void	NodeJDayOwner::addJDayList		(		NodeJDayPtr	pList		){	if ( vpJDayList )		vpJDayList->appendLink( pList );	else		vpJDayList = pList;}/*---------------------------------------------------------------------+\ *  NAME:	getJDayList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/NodeJDayPtr		NodeJDayOwner::getJDayList		(		void		){	return vpJDayList;}/*---------------------------------------------------------------------+\ *  NAME:	getJDayCount - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/int		NodeJDayOwner::getJDayCount		(		void		) const{	int			nCount = 0;	NodeJDayPtr	pItem = vpJDayList;		while ( pItem )	{		++nCount;		pItem = (NodeJDayPtr)pItem->getNext();	}		return nCount;}/*---------------------------------------------------------------------+\ *  NAME:	 buildWeekList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*//*NodeJDayOwnerPtr		NodeJDayOwner::buildWeekList		(		NodeJDayPtr	pList		){	NodeJDayOwnerPtr	pHead = NULL;	NodeJDayOwnerPtr	pWeek;	NodeJDayPtr	pNext;	Long		nWeekStart;	Long		nJulian;	int			nWeekDay;		//	calculate date of sunday	nJulian = pList->getJulianDay();	nWeekDay = julianDate_weekdayFromNumber( nJulian );	nWeekStart = nJulian - nWeekDay + 1;		pHead = pWeek = new NodeJDayOwner( nWeekStart );	if ( pHead )	{		pHead->addJDayList( pList );		nWeekStart += 7;		while ( pList )		{			pNext = (NodeJDayPtr)pList->getNext();			if ( pNext )			{				nJulian = pNext->getJulianDay();				if ( nWeekStart <= nJulian )				{					nWeekDay = julianDate_weekdayFromNumber( nJulian );					nWeekStart = nJulian - nWeekDay + 1;					pWeek = new NodeJDayOwner( nWeekStart );					if ( pWeek )					{						pWeek->addJDayList( pNext );						pHead->appendLink( pWeek );						pList->setNext( NULL );					}					nWeekStart += 7;				}			}			pList = pNext;		}	}		return pHead;}*//*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0#pragma mark ____protected____#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0#pragma mark ____private____#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0#pragma mark ________Overrides________#endif#if 0#pragma mark ____NodeLink____#endif/*---------------------------------------------------------------------+\ *  NAME:	calcDisplaySize - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/void	NodeJDayOwner::calcDisplaySize		(		Pixel	nMaxWidth,		VoidPtr	pVoid		){	NodeJDayPtr		pNode;	TextRangeInfo	tRange;		INHERITED::calcDisplaySize( nMaxWidth, pVoid );		pNode = vpJDayList;	while ( pNode )	{		pNode->calcDisplaySize( nMaxWidth, pVoid );		pNode->getDisplaySize( &tRange );		if ( 0 == vTextRange.nAscender )		{			vTextRange = tRange;		}		else		{			vTextRange.rect.bottom += tRange.rect.bottom - tRange.rect.top;			vTextRange.nDescender = tRange.nDescender;			if ( vTextRange.rect.right < tRange.rect.right )				vTextRange.rect.right = tRange.rect.right;		}		pNode = (NodeJDayPtr)pNode->getNext();	}}/*---------------------------------------------------------------------+\ *  NAME:	getDisplayHeight - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/int		NodeJDayOwner::getDisplayHeight		(		void		){	if ( 0 == vTextRange.nAscender )		calcDisplaySize();	return INHERITED::getDisplayHeight() + (vpNext ? 3 : 0);}/*---------------------------------------------------------------------+\ *  NAME:	 getDisplayHeight - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/void	NodeJDayOwner::getDisplayExtents		(		UPointPtr	pExtents		){	if ( 0 == vTextRange.nAscender )		calcDisplaySize();	INHERITED::getDisplayExtents( pExtents );}#if 0#pragma mark ____BCDisplay____#endif/*---------------------------------------------------------------------+\ *  NAME:	draw - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/void	NodeJDayOwner::draw		(		XPDrawPtr	pDraw		){	drawAt( pDraw, 0, 0 );}/*---------------------------------------------------------------------+\ *  NAME:	drawAt - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Mar-1997\+---------------------------------------------------------------------*/void	NodeJDayOwner::drawAt		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y		){	NodeJDayPtr	pItem;	XPFontPtr	pFontServer;	char		sDate[16];		pFontServer = XPFont::getFontServer();	pItem = vpJDayList;	while ( pItem )	{    	strDate_ddmmmyyyyFromJulian( sDate, pItem->getJulianDay() );    	pFontServer->selectName( "monaco" );    	pFontServer->pointSize( 12.0 );    	pFontServer->drawString( pDraw, 4, y+12, sDate );		pItem->drawAt( pDraw, x, y );		y += pItem->getDisplayHeight();		pItem = (NodeJDayPtr)pItem->getNext();	}	if ( vpNext )	{		XPColor	black( 0, 0, 0 );		pDraw->setWidth( 1 );		pDraw->setForeColor( black );		pDraw->drawMoveTo( 0, y+1 );		pDraw->drawLineTo( 500, y+1 );	}}/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/