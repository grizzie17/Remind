/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	julian.cpp  --  ||	Purpose:|	Author and Date:	J.Griswold			09-Aug-1983|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	02-Nov-1993			J.Griswold		Separate the Gregorian <=> Julian routines into a separate		file as well as rework for better standards and portability.	09-Jun-1988			J.Griswold		Port to Macintosh.			09-Aug-1983			J.Griswold		Initial revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <ctype.h>#include <string.h>#include "strform.h"#include "dkeyword.h"#include "julian.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*---------------------------------------------------------------------+\ *  NAME:	 julianDate_numberFromGregorian -  *  DESCRIPTION:		This function returns the calculated julian date number based		on the input Gregorian style date.				If the day within the month is specified as a negative value		then it is considered as counting from the end of the month.		(-1) is the last day of the month.				Later we will make it so that a negative year indicates BC,		however for now we do not properly handle BC. *  AUTHOR: J.Griswold		DATE:	09-Aug-1983\+---------------------------------------------------------------------*/Julian	julianDate_numberFromGregorian		(				/* RTN:	Julian day number */		int		day,	/* IN:	day within month (negative indicates from end) */		int		mon,	/* IN:	month within year */		int		year	/* IN:	year (including century) */		){	Julian		jdate;	long int	jmon;		if ( day < 0 )	{		++day;		/* adjust so that zero is last day of month */		++mon;		if ( mon > 12 )		{			mon -= 12;			++year;		}	}	jmon = (mon - 14) / 12;	jdate = (Julian)day - 32075L			+ ( 1461L * ( (Julian)year + 4800L + jmon )) / 4			+ (367L * ( (Julian)mon - 2 - jmon * 12 )) / 12			- (3 * (( (Julian)year + 4900L + jmon ) / 100 )) / 4;	return jdate;}/*---------------------------------------------------------------------+\ *  NAME:	 julianDate_weekdayFromNumber *  DESCRIPTION:		This function returns the day of the week from a julian day number.		(1=sun, 2=mon, ..., 7=sat)		 *  AUTHOR: J.Griswold		DATE:	09-Aug-1983\+---------------------------------------------------------------------*/int 	julianDate_weekdayFromNumber		(				/* RTN:	day of the week (1=sunday) */		Julian	jdate	/* IN:	julian day number */		){	int	dow;	jdate -= 6;	dow = jdate % 7 + 1;	/*dow = jdate - ((jdate / 7) * 7) + 1;*/	return dow ;}/*---------------------------------------------------------------------+\ *  NAME:	 julianDate_weeknumFromNumber *  DESCRIPTION:		This function returns the week-number (1..52) within the year		 *  AUTHOR: J.Griswold		DATE:	24-Jun-1995\+---------------------------------------------------------------------*/int		julianDate_weeknumFromNumber		(				/* RTN:	week number within the year */		Julian	jdate	/* IN:	julian day number */		){	int		nWeekNumber = 0;	int		dd, mm, yy;	int		wd;	Julian	nFirst;	Julian	nSunday;		julianDate_gregorianFromNumber( &dd, &mm, &yy, jdate );	nFirst = julianDate_numberFromGregorian( 1, 1, yy );	wd = julianDate_weekdayFromNumber( nFirst );	nFirst -= wd - 1;	//	find sunday on or before		wd = julianDate_weekdayFromNumber( jdate );	nSunday = jdate - (wd - 1);		nWeekNumber = (int)((nSunday - nFirst) / 7 + 1);	if ( nWeekNumber > 52 )	{		if ( (nSunday + 6)				>= julianDate_numberFromGregorian( 1, 1, yy+1 ) )			nWeekNumber = 1;	}		return nWeekNumber;}/*---------------------------------------------------------------------+\ *  NAME:	 julianDate_numberFromWeeklyGregorian -  *  DESCRIPTION:		This function returns the calculated julian date number based		on the input of a date specified by week-number within a month		(negative value counting from the last of the month), week-day		(1=sun .. 7=sat), month and year.  This allows specification		for such things as the first monday in the month or the fourth		thursday, etc..		 *  AUTHOR: J.Griswold		DATE:	09-Aug-1983\+---------------------------------------------------------------------*/Julian	julianDate_numberFromWeeklyGregorian		(					/* RTN:	Julian day number */		int		weeknum,	/* IN:	week within month (negative from last) */		int		weekday,	/* IN:	day within week */		int		mon,		/* IN:	month of the year */		int		year		/* IN:	year */		){	Julian	jdate;	int		n;		if ( weeknum < 0 )	{		++mon;		if ( mon > 12 )		{			mon = 1;			++year;		}		++weeknum;	}	/*	//	first let's come up with the julian date of the first of the	//	month for the indicated month.	*/	jdate = julianDate_numberFromGregorian( 1, mon, year );	n = julianDate_weekdayFromNumber( jdate );	n = weekday - n;	if ( n < 0 )		n += 7;	jdate += n + (( weeknum - 1 ) * 7);		/*	//	now that we have a julian date let's make sure that it really	//	falls in the indicated month.	*/		if ( weeknum > 0 )	{		++mon;		if ( mon > 12 )		{			mon = 1;			++year;		}		if ( jdate >= julianDate_numberFromGregorian( 1, mon, year ) )			jdate = 0;	}	else	{		--mon;		if ( mon < 1 )		{			mon = 12;			--year;		}		if ( jdate < julianDate_numberFromGregorian( 1, mon, year ) )			jdate = 0;	}	return jdate;}/*---------------------------------------------------------------------+\ *  NAME:	 julianDate_gregorianFromNumber *  DESCRIPTION:		This function calculates the Gregorian calendar date from a		given julian day number.		 *  AUTHOR: J.Griswold		DATE:	09-Aug-1983\+---------------------------------------------------------------------*/void julianDate_gregorianFromNumber		(		int		*day,	/* OUT:	day within month */		int		*month,	/* OUT:	month with year */		int		*year,	/* OUT:	year (including century) */		Julian	jdate	/* IN:	julian day number */		){	long	l,n;	long	m,y;	l = jdate + 68569L;	n = ( 4 * l ) / 146097L;	l -= (146097L * n + 3) / 4;	y = (4000 * (l+1)) / 1461001L;	l -= (1461 * y) / 4 - 31;	m = (80 * l) / 2447;	*day = l - ( 2447 * m ) / 80;	l = m/11;	*month = m + ( 2 - 12 * l );	*year = y + ( 100 * ( n - 49 ) + l );}/*---------------------------------------------------------------------+\ *  NAME:	 strDate_ddmmmyyyyFromJulian *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-Nov-1993\+---------------------------------------------------------------------*/int		strDate_ddmmmyyyyFromJulian		(		char	*string,		Julian	jdate		){	char	*start;	int		dd,mm,yy;	start = string;	julianDate_gregorianFromNumber( &dd, &mm, &yy, jdate );	*string = '\0';	if ( dd < 10 )	{		*string++ = ' ';	}	string += strFormat_decimal( string, (long)dd );	*string++ = '-';	strncpy( string, dkeyword_strMonth( mm ), 3 );	*string = toupper( *string );	string += 3;	*string++ ='-';	string += strFormat_decimal( string, (long)yy );	return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	 strDate_weekdayFromJulian *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-Nov-1993\+---------------------------------------------------------------------*/void	strDate_weekdayFromJulian		(		char	line[],		Julian	jdate		){	int		dow;	dow = julianDate_weekdayFromNumber(jdate);	strcpy( line, dkeyword_strWeekday( dow ) );	line[0] = toupper(line[0]);	return;}