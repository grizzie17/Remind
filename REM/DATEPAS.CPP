/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	datepas.cpp  --  brief description of what datepas.c is for||	Purpose:|	Author and Date:	J.Griswold			19-May-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	02-Dec-1996			J.Griswold		Add "calcPassoverList" and "calcRoshHashanahList" functions	19-May-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "julian.h"#include "dkeyword.h"#include "datepas.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	DateRoot/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DatePaschal - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/DatePaschal::DatePaschal		(		void		)		: INHERITED(){	vnIdent = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DatePaschal - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/DatePaschal::DatePaschal		(		int		nIdent		)		: INHERITED(){	vnIdent = nIdent;}/*---------------------------------------------------------------------+\ *  NAME:	 ~DatePaschal - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/DatePaschal::~DatePaschal		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	golden_number - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold		DATE:	01-Dec-1996\+---------------------------------------------------------------------*/static Long		golden_number		(		int		year		){	return year % 19 + 1;}/*---------------------------------------------------------------------+\ *  NAME:	paschal_moon - brief statement *  DESCRIPTION:		This routine calculates the Paschal full moon for the given year *  AUTHOR: J.Griswold		DATE:	dd-mmm-1993\+---------------------------------------------------------------------*/static Long		paschal_moon		(		int		year		){	static struct	{		char	month;		char	date;	} paschalTable[] =	{		4, 14,		4,  3,		3, 23,		4, 11,	/**/		3, 31,		4, 16,		4,  8,		3, 28,	/**/		4, 16,		4,  5,		3, 25,		4, 13,	/**/		4,  2,		3, 22,		4, 10,		3, 30,	/**/		4, 17,		4,  7,		3, 27	};	int		gn;		/* golden number */	Julian	jdate;		gn = golden_number( year ) - 1;	// (-1) to make golden-number an index	jdate = julianDate_numberFromGregorian( (int)paschalTable[gn].date,						(int)paschalTable[gn].month,						year );		return jdate;}/*---------------------------------------------------------------------+\ *  NAME:	julian_easter - brief statement *  DESCRIPTION:		This routine calculates the date for Easter within the year. *  AUTHOR: J.Griswold		DATE:	dd-mmm-1993\+---------------------------------------------------------------------*/static Long		julian_easter		(		int		year		){	int		wd;	Long	jdate;		jdate = paschal_moon( year );	wd = julianDate_weekdayFromNumber( jdate );	wd = 1 - wd;	if ( wd <= 0 )		wd += 7;	jdate += wd;		return jdate;}/*---------------------------------------------------------------------+\ *  NAME:	dooms_day - brief statement *  DESCRIPTION:		This routine calculates the weekday to skip for the given year. *  AUTHOR: J.Griswold		DATE:	02-Dec-1996\+---------------------------------------------------------------------*/static int		dooms_day		(		int		year		){	int		nDoomsDay;	int		nCentury;	int		nXX;	int		q,r,s;	int		nDaysOffset;		static char	nCenturyDayTable[]	= {		3,	//  0xx, 4xx		1,	//  1xx, 5xx		6,	//  2xx, 6xx		4	//  3xx, 7xx	};		nCentury = year / 100;	nXX = year - nCentury * 100;		q = nXX / 12;	r = nXX % 12;	s = r / 4;		nDaysOffset = q + r + s;	nDoomsDay = nCenturyDayTable[nCentury % 4] + nDaysOffset;	if ( 7 < nDoomsDay )	{		nDoomsDay -= 7;	}		return nDoomsDay;}/*---------------------------------------------------------------------+\ *  NAME:	julian_roshHashanah - brief statement *  DESCRIPTION:		This routine calculates the date for Rosh Hashanah within the year. *  AUTHOR: J.Griswold		DATE:	01-Dec-1996\+---------------------------------------------------------------------*/static Long		julian_roshHashanah		(		int		year		){	Long	jdate;	int		n;	int		g;		// golden number	int		wd;	int		nCycle;	double	d;	double	dFract;		g = golden_number( year );	nCycle = 12*g % 19;	d = double(int(year/100) - int(year/400) - 2)			+ 765433.0/492480.0 + double(nCycle)			+ double(year % 4) / 4.0 - (313.0 * double(year) + 89081.0)/98496.0;	n = d;	dFract = d - double(n);	jdate = julianDate_numberFromGregorian( n, 9, year );		// postponement	wd = julianDate_weekdayFromNumber( jdate );	if ( wd == dooms_day( year ) )	{		++jdate;		wd = julianDate_weekdayFromNumber( jdate );	}		// if sunday, wednesday, or friday	if ( 1 == wd  ||  4 == wd  ||  6 == wd )	{		++jdate;		wd = julianDate_weekdayFromNumber( jdate );	}		if ( (2 == wd)  &&  (23269.0/25920.0 < dFract)  &&  (11 < nCycle) )	{		++jdate;		wd = julianDate_weekdayFromNumber( jdate );	}	if ( (3 == wd)  &&  (1367.0/2160.0 < dFract)  &&  (6 < nCycle) )	{		jdate += 2;	}	return jdate;}/*---------------------------------------------------------------------+\ *  NAME:	julian_passover - calculate passover for the specified year *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	02-Dec-1996\+---------------------------------------------------------------------*/static Long		julian_passover		(		int		year		){	Long	jdate;	Long	jdRosh;	Long	jdSep6;		jdRosh = julian_roshHashanah( year );	jdSep6 = julianDate_numberFromGregorian( 6, 9, year );		jdate = julianDate_numberFromGregorian( 27, 3, year ) + (jdRosh - jdSep6);		return jdate;}/*---------------------------------------------------------------------+\ *  NAME:	calcEasterList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/int		DatePaschal::calcEasterList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	//	number of julian dates generated	long	jdate;	int		dd, mm, yy;		julianDate_gregorianFromNumber( &dd, &mm, &yy, nEarly );	jdate = julian_easter( yy );		while ( jdate <= nLate )	{		if ( nEarly <= jdate )			list[numDates++] = jdate;		++yy;		jdate = julian_easter( yy );	}	return numDates;}/*---------------------------------------------------------------------+\ *  NAME:	 calcPaschalList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/int		DatePaschal::calcPaschalList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	//	number of julian dates generated	long	jdate;	int		dd, mm, yy;		julianDate_gregorianFromNumber( &dd, &mm, &yy, nEarly );	jdate = paschal_moon( yy );		while ( jdate <= nLate )	{		if ( nEarly <= jdate )			list[numDates++] = jdate;		++yy;		jdate = paschal_moon( yy );	}	return numDates;}/*---------------------------------------------------------------------+\ *  NAME:	calcRoshHashanahList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Dec-1996\+---------------------------------------------------------------------*/int		DatePaschal::calcRoshHashanahList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	//	number of julian dates generated	long	jdate;	int		dd, mm, yy;		julianDate_gregorianFromNumber( &dd, &mm, &yy, nEarly );	jdate = julian_roshHashanah( yy );		while ( jdate <= nLate )	{		if ( nEarly <= jdate )			list[numDates++] = jdate;		++yy;		jdate = julian_roshHashanah( yy );	}	return numDates;}/*---------------------------------------------------------------------+\ *  NAME:	calcPassoverList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Dec-1996\+---------------------------------------------------------------------*/int		DatePaschal::calcPassoverList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	//	number of julian dates generated	long	jdate;	int		dd, mm, yy;		julianDate_gregorianFromNumber( &dd, &mm, &yy, nEarly );	jdate = julian_passover( yy );		while ( jdate <= nLate )	{		if ( nEarly <= jdate )			list[numDates++] = jdate;		++yy;		jdate = julian_passover( yy );	}	return numDates;}/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getDateType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/DateEnum		DatePaschal::getDateType		(		void		){	return DATE_Paschal;}/*---------------------------------------------------------------------+\ *  NAME:	caldDateList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-May-1995\+---------------------------------------------------------------------*/int		DatePaschal::calcDateList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		nCount = 0;	switch ( vnIdent )	{	case 1:		nCount = calcEasterList( list, nEarly, nLate );		break;	case 2:		nCount = calcPaschalList( list, nEarly, nLate );		break;	case 3:		//	passover		nCount = calcPassoverList( list, nEarly, nLate );		break;	case 4:		//	rosh_hashanah		nCount = calcRoshHashanahList( list, nEarly, nLate );		break;	default:		break;	}	return nCount;}/*---------------------------------------------------------------------+\ *  NAME:	 getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Aug-1995\+---------------------------------------------------------------------*/int		DatePaschal::getSaveString		(		CharPtr	string,		int		nMaxString		){	UNREFERENCED_PARAMETER( nMaxString );		::strcpy( string, gPaschalKwds[ vnIdent-1 ] );	return ::strlen( string );}/*---------------------------------------------------------------------+\ *  NAME:	somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/