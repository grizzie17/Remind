/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1996 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remvclnp.cpp  --  brief description of what remvclnp.cpp is for||	Purpose:|	Author and Date:	J.Griswold			26-Jun-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	20-Oct-1996			J.Griswold		Support a resizable calendar view	26-Jun-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include "bearstr.h"#include "strform.h"#include "tokencnv.h"#include "remvcal.h"#include "remvw.h"#if defined( FRAMEWORK_MFC )#	include <afxwin.h>#	include "resource.h"#elif defined( FRAMEWORK_PowerPlant )#	include <LControl.h>#	include <LCommander.h>#	include <LEventDispatcher.h>#	include "bearstr.h"#endif/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	XPView#if defined( FRAMEWORK_MFC )#elif defined( FRAMEWORK_PowerPlant )	const PaneIDT	PANE_CalControl	= 'vCTL';	const PaneIDT	PANE_CalBottom	= 'vBOT';	const PaneIDT	PANE_Previous	= 'cal<';	const PaneIDT	PANE_Next		= 'cal>';	const PaneIDT	PANE_Month		= 'calM';	const PaneIDT	PANE_Year		= 'calY';	const MessageT	MSG_Previous	= 1000;	const MessageT	MSG_Next		= 1001;	const MessageT	MSG_Month		= 1002;	const MessageT	MSG_Year		= 1003;#endif // FRAMEWORK/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*---------------------------------------------------------------------+\ *  NAME:	 setPopups - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::setPopups		(		int		nMonth,		int		nYear		){#if defined( FRAMEWORK_MFC )	vpWindowBar->SendDlgItemMessage( IDC_CAL_MONTH, CB_SETCURSEL, nMonth-1, 0 );	vpWindowBar->SendDlgItemMessage( IDC_CAL_YEAR, CB_SETCURSEL, nYear-1990, 0 );#elif defined( FRAMEWORK_PowerPlant )	LWindow*	pWindow;	LControl*	pControl;		pWindow = getLWindow();	pControl = (LControl*)pWindow->FindPaneByID( PANE_Month );	if ( pControl )		pControl->SetValue( nMonth );	pControl = (LControl*)pWindow->FindPaneByID( PANE_Year );	if ( pControl )		pplantSetPopupYear( (LStdPopupMenu*)pControl, nYear );#endif}/*---------------------------------------------------------------------+\ *  NAME:	 postDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::postDate		(		long	nJulian		){#if defined( FRAMEWORK_MFC )	RemindViewBase*	pView;		pView = (RemindViewBase*)mfcGetTargetView();	if ( pView )		pView->cmdSetDate( nJulian );	else		hiliteDates( nJulian, nJulian );#elif defined( FRAMEWORK_PowerPlant )	LCommander	*pCommander;	long		nTemp;		nTemp = nJulian;	pCommander = LCommander::GetTarget();	if ( pCommander != this )		pCommander->ObeyCommand( CMD_SetDate, &nTemp );	else		hiliteDates( nJulian, nJulian );#endif}/*---------------------------------------------------------------------+\ *  NAME:	 windowSetClientRect - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	05-Jul-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::windowSetClientRect		(		URectPtr	pRect		){	Pixel		nWindWidth = pRect->right - pRect->left;	Pixel		nLeft = 32000;	Pixel		nRight = 0;#if defined( FRAMEWORK_MFC )	CWnd*		pControlNext;	CWnd*		pControlPrevious;	CWnd*		pControlMonth;	CWnd*		pControlYear;	CWnd*		pControl;	RECT		r;		CWnd*		pFrame = getCView()->GetParentFrame();	pControl = vpWindowBar->GetDlgItem( IDC_BUTTON_LEFT );	if ( pControl )	{		pControl->GetClientRect( &r );		pControl->MapWindowPoints( pFrame, &r );		if ( nLeft > r.left )			nLeft = r.left;		if ( nRight < r.right )			nRight = r.right;	}	pControlPrevious = pControl;	pControl = vpWindowBar->GetDlgItem( IDC_CAL_YEAR );	if ( pControl )	{		pControl->GetClientRect( &r );		pControl->MapWindowPoints( pFrame, &r );		if ( nLeft > r.left )			nLeft = r.left;		if ( nRight < r.right )			nRight = r.right;	}	pControlMonth = pControl;	pControl = vpWindowBar->GetDlgItem( IDC_CAL_YEAR );	if ( pControl )	{		pControl->GetClientRect( &r );		pControl->MapWindowPoints( pFrame, &r );		if ( nLeft > r.left )			nLeft = r.left;		if ( nRight < r.right )			nRight = r.right;	}	pControlYear = pControl;	pControl = vpWindowBar->GetDlgItem( IDC_BUTTON_RIGHT );	if ( pControl )	{		pControl->GetClientRect( &r );		pControl->MapWindowPoints( pFrame, &r );		if ( nLeft > r.left )			nLeft = r.left;		if ( nRight < r.right )			nRight = r.right;	}	pControlNext = pControl;	//	if requested window size is too small then adjust it in size	if ( nWindWidth < (nRight + nLeft) )	{		nWindWidth = (nRight + nLeft);		pRect->right = pRect->left + nWindWidth;	}	#elif 0  &&  defined( FRAMEWORK_PowerPlant )	LWindow*		pWindow;	LControl*		pControlNext;	LControl*		pControlPrevious;	LControl*		pControlMonth;	LControl*		pControlYear;	Pixel			nOffset;	SPoint32		ctlOrigin;		pWindow = getLWindow();	pControlPrevious = (LControl*)pWindow->FindPaneByID( PANE_Previous );	if ( pControlPrevious )	{		pControlPrevious->GetFrameLocation( ctlOrigin );		nLeft = ctlOrigin.h;	}	pControlMonth = (LControl*)pWindow->FindPaneByID( PANE_Month );	pControlYear = (LControl*)pWindow->FindPaneByID( PANE_Year );	pControlNext = (LControl*)pWindow->FindPaneByID( PANE_Next );		//	if requested window size is too small then adjust it in size	if ( nWindWidth < (vnControlsWidth + 4) )	{		nWindWidth = vnControlsWidth + 4;		pRect->right = pRect->left + nWindWidth;	}		//	calculate the amount to shift the controls	nOffset = (nWindWidth - vnControlsWidth) / 2 - nLeft;		//	shift the controls	if ( pControlNext )	{		pControlNext->GetFrameLocation( ctlOrigin );		ctlOrigin.h += nOffset;		pControlNext->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}	if ( pControlPrevious )	{		pControlPrevious->GetFrameLocation( ctlOrigin );		ctlOrigin.h += nOffset;		pControlPrevious->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}	if ( pControlMonth )	{		pControlMonth->GetFrameLocation( ctlOrigin );		ctlOrigin.h += nOffset;		pControlMonth->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}	if ( pControlYear )	{		pControlYear->GetFrameLocation( ctlOrigin );		ctlOrigin.h += nOffset;		pControlYear->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}#endif		INHERITED::windowSetClientRect( pRect );}/*=====================================================================+\||	 MFC Frame-Work														|\+=====================================================================*/#if 0#pragma mark ____FRAMEWORK_MFC____#endif#if defined( FRAMEWORK_MFC )/*---------------------------------------------------------------------+\ *  NAME:	 OnInitialUpdate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::OnInitialUpdate		(		void		){	RemindViewBase*	pView;		vpWindowBar = new CDialogBar;	if (!vpWindowBar->Create(getCView()->GetParentFrame(), IDD_CALENDAR, CBRS_TOP, 0xE800 ))	{		TRACE0("Failed to create WindowBar");	}	getCView()->GetParentFrame()->RecalcLayout(TRUE);	//INHERITED::OnInitialUpdate();	getCView()->SetTimer( 1, 200, NULL );	pView = (RemindViewBase*)mfcGetTargetView();	if ( pView )		pView->calcCalendarHilite();}/*---------------------------------------------------------------------+\ *  NAME:	 WindowProc - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/LRESULT	RemindViewCalendar::WindowProc		(		UINT	message,		WPARAM	wParam,		LPARAM	lParam		){	switch( message )	{	case WM_TIMER:		getCView()->GetParentFrame()->SetWindowPos( &CWnd::wndTop, 0,0,0,0, 												(SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOSIZE) );		break;	case WM_CLOSE:		getCView()->KillTimer( 1 );		//return INHERITED::WindowProc( message, wParam, lParam );		break;#if 0		case WM_WINDOWPOSCHANGED:		{			WINDOWPOS FAR*	pWP = (WINDOWPOS FAR*)lParam;			HWND			hWind = GetSafeHwnd();			if ( pWP->hwnd != hWind )			{				SetWindowPos( &wndTop, 0,0,0,0, (SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOSIZE) );			}		}		break;#endif	default:		//return INHERITED::WindowProc( message, wParam, lParam );		break;	}	return 0L;}/*---------------------------------------------------------------------+\ *  NAME:	 OnActivateView - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::OnActivateView		(		BOOL	bActivate,		CView*	pActivateView,		CView*	pDeactivateView		){	if ( ! bActivate )		INHERITED::OnActivateView( bActivate, pActivateView, pDeactivateView );	else		pDeactivateView->SetFocus();	getCView()->GetParentFrame()->SetWindowPos( &CWnd::wndTop, 0,0,0,0, 									(SWP_NOACTIVATE | SWP_NOMOVE | SWP_NOSIZE) );}/*---------------------------------------------------------------------+\ *  NAME:	 mfcGetTargetView - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE: 10-Jul-1995\+---------------------------------------------------------------------*/CView*	RemindViewCalendar::mfcGetTargetView		(		void		){	CView*		pView = NULL;	CFrameWnd*	pMainWnd;	CFrameWnd*	pFrame;		pMainWnd = (CFrameWnd*)AfxGetMainWnd();	pFrame = (CFrameWnd*)pMainWnd->GetActiveFrame();	pView = pFrame->GetActiveView();	if ( getCView() == pView )	{		pFrame = (CFrameWnd*)pFrame->GetWindow( GW_HWNDNEXT );		pView = pFrame->GetActiveView();	}	return pView;}/*---------------------------------------------------------------------+\ *  NAME:	 OnWndButtonLeft - brief statement *  DESCRIPTION: *  AUTHOR: H.Rody			DATE:	31-May-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::OnWndButtonLeft		(		void		){	cmdPrevious();}/*---------------------------------------------------------------------+\ *  NAME:	 OnWndButtonRight - brief statement *  DESCRIPTION: *  AUTHOR: H.Rody			DATE:	31-May-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::OnWndButtonRight		(		void		){	cmdNext();}/*---------------------------------------------------------------------+\ *  NAME:	 MFCOnSelchangeCalMonth - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Jul-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::MFCOnSelchangeCalMonth		(		void		){	CComboBox*	pBox;		pBox = (CComboBox*)vpWindowBar->GetDlgItem( IDC_CAL_MONTH );	if ( pBox )	{		int		nSel;				nSel = pBox->GetCurSel();		cmdMonth( nSel+1 );	}}/*---------------------------------------------------------------------+\ *  NAME:	 MFCOnSelchangeCalYear - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Jul-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::MFCOnSelchangeCalYear		(		void		){	CComboBox*	pBox;		pBox = (CComboBox*)vpWindowBar->GetDlgItem( IDC_CAL_YEAR );	if ( pBox )	{		int		nSel;				nSel = pBox->GetCurSel();		cmdYear( nSel+1990 );	}}/*=====================================================================+\||	 Power Plant Frame-Work												|\+=====================================================================*/#if 0____FRAMEWORK_PowerPlant____(){}#endif#elif defined( FRAMEWORK_PowerPlant )/*---------------------------------------------------------------------+\ *  NAME:	 FinishCreateSelf - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::FinishCreateSelf		(		void		){	LWindow*		pWindow;	LControl*		pControl;	LView*			pView;	SDimension16	ctlSize;	SPoint32		ctlOrigin;	Pixel			nLeft = 32000;	Pixel			nRight = 0;		pWindow = getLWindow();	pView = (LView*)pWindow->FindPaneByID( PANE_CalBottom );	if ( pView )	{		LEraseAttachment*	pAttach;				pAttach = new LEraseAttachment;		if ( pAttach )			pView->AddAttachment( pAttach );	}		pView = (LView*)pWindow->FindPaneByID( PANE_CalControl );	if ( pView )	{		vpEraseAttach = new LEraseAttachment;		if ( vpEraseAttach )			pView->AddAttachment( vpEraseAttach );	}	else	{		vpEraseAttach = NULL;	}	pControl = (LControl*)pWindow->FindPaneByID( PANE_Next );	if ( pControl )	{		pControl->AddListener( this );		pControl->GetFrameLocation( ctlOrigin );		if ( ctlOrigin.h < nLeft )			nLeft = ctlOrigin.h;		pControl->GetFrameSize( ctlSize );		if ( nRight < ctlOrigin.h + ctlSize.width )			nRight = ctlOrigin.h + ctlSize.width;	}	pControl = (LControl*)pWindow->FindPaneByID( PANE_Previous );	if ( pControl )	{		pControl->AddListener( this );		pControl->GetFrameLocation( ctlOrigin );		if ( ctlOrigin.h < nLeft )			nLeft = ctlOrigin.h;		pControl->GetFrameSize( ctlSize );		if ( nRight < ctlOrigin.h + ctlSize.width )			nRight = ctlOrigin.h + ctlSize.width;	}	pControl = (LControl*)pWindow->FindPaneByID( PANE_Month );	if ( pControl )	{		pControl->AddListener( this );		pControl->GetFrameLocation( ctlOrigin );		if ( ctlOrigin.h < nLeft )			nLeft = ctlOrigin.h;		pControl->GetFrameSize( ctlSize );		if ( nRight < ctlOrigin.h + ctlSize.width )			nRight = ctlOrigin.h + ctlSize.width;	}	pControl = (LControl*)pWindow->FindPaneByID( PANE_Year );	if ( pControl )	{		pControl->AddListener( this );		pControl->GetFrameLocation( ctlOrigin );		if ( ctlOrigin.h < nLeft )			nLeft = ctlOrigin.h;		pControl->GetFrameSize( ctlSize );		if ( nRight < ctlOrigin.h + ctlSize.width )			nRight = ctlOrigin.h + ctlSize.width;	}		vnControlsWidth = nRight - nLeft;		INHERITED::FinishCreateSelf();	LCommander	*pCommander;	pCommander = LCommander::GetTarget();	if ( pCommander )		pCommander->ObeyCommand( 5011, NULL );}/*---------------------------------------------------------------------+\ *  NAME:	 ListenToMessage - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-May-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::ListenToMessage		(		MessageT	inMessage,		void		*ioParam		){	Long	nValue;		switch ( inMessage )	{	case MSG_Previous:		cmdPrevious();		break;	case MSG_Next:		cmdNext();		break;	case MSG_Month:		nValue = *(LongPtr)ioParam;		cmdMonth( (int)nValue );		break;	case MSG_Year:		LWindow*		pWindow;		LStdPopupMenu*	pControl;				pWindow = getLWindow();		pControl = (LStdPopupMenu*)pWindow->FindPaneByID( PANE_Year );		if ( pControl )		{			MenuHandle	hMenu;			Str255		scText;			char		sText[40];			hMenu = pControl->GetMacMenuH();			nValue = *(LongPtr)ioParam;			::GetMenuItemText( hMenu, (short)nValue, scText );			::string_convCFromPas( sText, scText );			::tokenCnv_decimal( &nValue, sText );			cmdYear( (int)nValue );		}		break;		default:			INHERITED::ListenToMessage( inMessage, ioParam );		break;	}}/*---------------------------------------------------------------------+\ *  NAME:	ResizeFrameBy - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	19-Oct-1996\+---------------------------------------------------------------------*/void	RemindViewCalendar::ResizeFrameBy		(		Int16	inWidthDelta,		Int16	inHeightDelta,		Boolean	inRefresh		){	SDimension16	outSize;		INHERITED::ResizeFrameBy( inWidthDelta, inHeightDelta, inRefresh );	GetFrameSize( outSize );		LWindow*		pWindow;	LControl*		pControlNext;	LControl*		pControlPrevious;	LControl*		pControlMonth;	LControl*		pControlYear;	Pixel			nOffset;	SPoint32		ctlOrigin;	Pixel			nLeft;		pWindow = getLWindow();	pControlPrevious = (LControl*)pWindow->FindPaneByID( PANE_Previous );	if ( pControlPrevious )	{		pControlPrevious->GetFrameLocation( ctlOrigin );		nLeft = ctlOrigin.h;	}	pControlMonth = (LControl*)pWindow->FindPaneByID( PANE_Month );	pControlYear = (LControl*)pWindow->FindPaneByID( PANE_Year );	pControlNext = (LControl*)pWindow->FindPaneByID( PANE_Next );		//	calculate the amount to shift the controls	nOffset = (outSize.width - vnControlsWidth) / 2 - nLeft;		//	shift the controls	if ( pControlNext )	{		pControlNext->GetFrameLocation( ctlOrigin );		pControlNext->Refresh();		ctlOrigin.h += nOffset;		pControlNext->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}	if ( pControlPrevious )	{		pControlPrevious->GetFrameLocation( ctlOrigin );		pControlPrevious->Refresh();		ctlOrigin.h += nOffset;		pControlPrevious->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}	if ( pControlMonth )	{		pControlMonth->GetFrameLocation( ctlOrigin );		pControlMonth->Refresh();		ctlOrigin.h += nOffset;		pControlMonth->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}	if ( pControlYear )	{		pControlYear->GetFrameLocation( ctlOrigin );		pControlYear->Refresh();		ctlOrigin.h += nOffset;		pControlYear->PlaceInSuperFrameAt( ctlOrigin.h, ctlOrigin.v, true );	}}/*---------------------------------------------------------------------+\ *  NAME:	 pplantViewDestructor - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	25-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::pplantViewDestructor		(		void		){#if 1	LCommander::SetUpdateCommandStatus( true );#else	LEventDispatcher*	pDispatch;		//	This is done because floater windows going-away don't seem to update the menus	pDispatch = LEventDispatcher::GetCurrentEventDispatcher();	if ( pDispatch )		pDispatch->UpdateMenus();#endif}void	RemindViewCalendar::pplantSetPopupYear		(		LStdPopupMenu	*pControl,		int				nYear		){	MenuHandle	hMenu;	short		nItems;	short		nStart;	Str255		scText;	char		sText[8];		hMenu = pControl->GetMacMenuH();	nItems = ::CountMItems( hMenu );	nStart = nYear - nItems / 2 + 1;	for ( int i = 1; i <= nItems; ++i )	{		::strFormat_decimal( sText, (long)nStart );		::string_convPasFromC( scText, sText );		::SetMenuItemText( hMenu, i, scText );		++nStart;	}	pControl->SetValue( nItems / 2 );	pControl->Refresh();}#endif // FRAMEWORK/*---------------------------------------------------------------------+\ *  NAME:	 someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/