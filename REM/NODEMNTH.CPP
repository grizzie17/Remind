/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	nodemnth.cpp  --  cluster all messages for a single month||	Purpose:|	Author and Date:	J.Griswold			18-Mar-1997|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	18-Mar-1997			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include "beardefs.h"#include "xpdraw.h"#include "julian.h"#include "nodemnth.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	NodeJDayOwner/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0#pragma mark ____class____#endif/*---------------------------------------------------------------------+\ *  NAME:	 NodeMonth - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/NodeMonth::NodeMonth		(		void		)		: INHERITED(){	initNodeMonth();}/*---------------------------------------------------------------------+\ *  NAME:	 NodeMonth - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/NodeMonth::NodeMonth		(		Long	nDate		)		: INHERITED( nDate ){	initNodeMonth();}/*---------------------------------------------------------------------+\ *  NAME:	 initNodeMonth - initialization *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	NodeMonth::initNodeMonth		(		void		){}/*---------------------------------------------------------------------+\ *  NAME:	 ~NodeMonth - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/NodeMonth::~NodeMonth		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0#pragma mark ____public____#endif/*---------------------------------------------------------------------+\ *  NAME:	 buildMonthList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/NodeMonthPtr		NodeMonth::buildMonthList		(		NodeJDayPtr	pList		){	NodeMonthPtr	pHead = NULL;	NodeMonthPtr	pMonth;	NodeJDayPtr	pNext;	Long		nMonthStart;	Long		nJulian;		int			dd;	int			mm;	int			yy;		//	calculate date of sunday	nJulian = pList->getJulianDay();	julianDate_gregorianFromNumber( &dd, &mm, &yy, nJulian );	nMonthStart = julianDate_numberFromGregorian( 1, mm, yy );		pHead = pMonth = new NodeMonth( nMonthStart );	if ( pHead )	{		pHead->addJDayList( pList );		nMonthStart = julianDate_numberFromGregorian( 1, ++mm, yy );		while ( pList )		{			pNext = (NodeJDayPtr)pList->getNext();			if ( pNext )			{				nJulian = pNext->getJulianDay();				if ( nMonthStart <= nJulian )				{					julianDate_gregorianFromNumber( &dd, &mm, &yy, nJulian );					nMonthStart = julianDate_numberFromGregorian( 1, mm, yy );					pMonth = new NodeMonth( nMonthStart );					if ( pMonth )					{						pMonth->addJDayList( pNext );						pHead->appendLink( pMonth );						pList->setNext( NULL );					}					nMonthStart = julianDate_numberFromGregorian( 1, ++mm, yy );				}			}			pList = pNext;		}	}		return pHead;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0#pragma mark ____protected____#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0#pragma mark ____private____#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0#pragma mark ________Overrides________#endif/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1997\+---------------------------------------------------------------------*/