/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	datemoon.cpp  --  brief description of what datemoon.c is for||	Purpose:|	Author and Date:	J.Griswold			11-May-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	11-May-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <math.h>#include <string.h>#include "lunar.h"#include "datevalu.h"#include "dkeyword.h"#include "datemoon.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	DateRoot/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DateMoon - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateMoon::DateMoon		(		void		)		: INHERITED(){	vnPhase = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateMoon - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateMoon::DateMoon		(		int		nPhase		)		: INHERITED(){	vnPhase = nPhase;}/*---------------------------------------------------------------------+\ *  NAME:	 ~DateMoon - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateMoon::~DateMoon		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getDateType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/DateEnum		DateMoon::getDateType		(		void		){	return DATE_Moon;}/*---------------------------------------------------------------------+\ *  NAME:	 caldDateList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-May-1995\+---------------------------------------------------------------------*/int		DateMoon::calcDateList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	//	number of julian dates generated	int		nph;	int		n;	long	jd;	long	jdate;	double	frac;		nph = vnPhase;	if ( 0 <= nph  &&  nph <= 3 )	{		n = (int)(((double)(nEarly - 2415020L) + 1.265465278 					+ MOON_CYCLE * (nph/4)) / MOON_CYCLE);		jdate = flmoon( n, nph, &jd, &frac );		while( jdate <= nLate )		{			if ( jdate >= nEarly )			{				list[numDates++] = jdate;			}			++n;			jdate = flmoon( n, nph, &jd, &frac );		}	}		return numDates;}/*---------------------------------------------------------------------+\ *  NAME:	 getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	28-Aug-1995\+---------------------------------------------------------------------*/int		DateMoon::getSaveString		(		CharPtr	string,		int		nMaxString		){	CharPtr		start = string;	static char	sQuarter[] = "quarter ";	static char	sMoon[] = "moon";		UNREFERENCED_PARAMETER( nMaxString );		::strcpy( string, gMoonKwds[vnPhase] );	string += ::strlen( gMoonKwds[vnPhase] );	::strcpy( string, " " );	++string;	if ( 1 == vnPhase  ||  3 == vnPhase )	{		::strcpy( string, sQuarter );		string += ::strlen( sQuarter );	}	::strcpy( string, sMoon );	string += ::strlen( sMoon );	return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	 somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/