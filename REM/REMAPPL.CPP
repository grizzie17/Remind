/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remappl.cpp  --  brief description of what xprototyp.c is for||	Purpose:|	Author and Date:	J.Griswold			08-Feb-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	08-Feb-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "beardefs.h"#include "filesys.h"#include "token.h"#include "tokencnv.h"#include "xpassert.h"#include "xpfont.h"#include "ztextsrv.h"#include "zcatgmgr.h"#include "zstylmgr.h"#include "remappl.h"#include "remdefs.h"#include "remparse.h"#include "holiday.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	XPApplication/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 RemindApplication - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-Feb-1995\+---------------------------------------------------------------------*/RemindApplication::RemindApplication		(		void		)		: INHERITED(){	vpStyleDefaultLabel = NULL;	vpStyleDefaultMessage = NULL;	vpStyleMonthLabel = NULL;	vpCategoryDefault = NULL;	vpCalendar = NULL;}/*---------------------------------------------------------------------+\ *  NAME:	 ~RemindApplication - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-Feb-1995\+---------------------------------------------------------------------*/RemindApplication::~RemindApplication		(		void		){	if ( vpCalendar )	{		delete vpCalendar;		vpCalendar = NULL;	}	if ( vpStyleDefaultLabel )	{		vpStyleDefaultLabel->release();		vpStyleDefaultLabel = NULL;	}	if ( vpStyleDefaultMessage )	{		vpStyleDefaultMessage->release();		vpStyleDefaultMessage = NULL;	}	if ( vpStyleMonthLabel )	{		vpStyleMonthLabel->release();		vpStyleMonthLabel = NULL;	}	if ( vpCategoryDefault )	{		vpCategoryDefault->release();		vpCategoryDefault = NULL;	}}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getStyleDefaultLabel - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jun-1995\+---------------------------------------------------------------------*/RStylePtr		RemindApplication::getStyleDefaultLabel		(		void		){	return vpStyleDefaultLabel;}/*---------------------------------------------------------------------+\ *  NAME:	 getStyleDefaultMessage - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jun-1995\+---------------------------------------------------------------------*/RStylePtr		RemindApplication::getStyleDefaultMessage		(		void		){	return vpStyleDefaultMessage;}/*---------------------------------------------------------------------+\ *  NAME:	 getStyleMonthLabel - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/RStylePtr		RemindApplication::getStyleMonthLabel		(		void		){	return vpStyleMonthLabel;}/*---------------------------------------------------------------------+\ *  NAME:	 getCategoryDefault - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-Apr-1996\+---------------------------------------------------------------------*/RCategoryPtr		RemindApplication::getCategoryDefault		(		void		){	return vpCategoryDefault;}/*---------------------------------------------------------------------+\ *  NAME:	 setCalendarView - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jun-1995\+---------------------------------------------------------------------*/void	RemindApplication::setCalendarView		(		RemindViewCalendarPtr	pCalendar		){	vpCalendar = pCalendar;}/*---------------------------------------------------------------------+\ *  NAME:	 hiliteCalendarRange - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jun-1995\+---------------------------------------------------------------------*/void	RemindApplication::hiliteCalendarRange		(		Long	nEarly,		Long	nLate		){#ifndef OS_MSWIN	if ( vpCalendar )		vpCalendar->hiliteDates( nEarly, nLate );#endif}/*---------------------------------------------------------------------+\ *  NAME:	 cmdSetDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-Sep-1995\+---------------------------------------------------------------------*/void	RemindApplication::cmdSetDate		(		Long	nJulian		){	hiliteCalendarRange( nJulian, nJulian );}/*---------------------------------------------------------------------+\ *  NAME:	cmdViewSaveSettings - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	12-Nov-1995\+---------------------------------------------------------------------*/Bool	RemindApplication::cmdViewSaveSettings		(		void		){	return YES;}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 parseStylePref -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jul-1995\+---------------------------------------------------------------------*/static Bool		parseStylePref		(		int		*size,		char	*sFont,		char	*string		){	Bool	result = NO;	int		n;	long	value;		*size = 0;	*sFont = '\0';		string += ::tok_blank( string );	n = ::tokenCnv_decimal( &value, string );	if ( n )	{		string += n;		string += ::tok_blank( string );		if ( ',' == *string )		{			++string;			string += ::tok_blank( string );			n = ::tokenCnv_symbol( sFont, string, 32 );			if ( n )			{				string += n;			}			else			{				n = ::tokenCnv_quoteString( sFont, string, 32 );				if ( n )					string += n;			}			if ( ::tok_eos( string ) )			{				result = YES;				*size = (int)value;			}		}	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	 makeDefaultStyle -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jul-1995\+---------------------------------------------------------------------*/RStylePtr		RemindApplication::makeDefaultStyle		(		CharPtr	sPrefName,		int		nResID,		CharPtr	sDefaultName,		int		nDefaultSize		){	RStylePtr		pStyle = NULL;	Bool			result;	Bool			bNeedFont = NO;	RStyleInfo		info;	XPFontPtr		pFontServer;	XPString		sPref;	//char			sFont[40];	//int				nSize;		do	{		pFontServer = XPFont::getFontServer();		if ( ! pFontServer )			break;				info.font.ident = 0;		info.font.size = (FontSize)nDefaultSize;		info.font.face = FONTFACE_Normal;		info.nColor = 0;				result = getPreferenceString( sPref, "style", sPrefName );		if ( result )		{			result = RemindParse::parsePrefStyle( &info, sPref );			//result = parseStylePref( &nSize, sFont, sPref );			//if ( result )			//	result = pFontServer->selectName( sFont );			if ( ! result  ||  info.font.ident < 0 )				bNeedFont = YES;		}		else		{			bNeedFont = YES;		}		if ( bNeedFont )		{			int		nLen;						nLen = getResourceString( sPref, nResID );			if ( nLen > 0 )			{				int		nPos;				CharPtr	s;				CharPtr	p;				char	sTemp[256];				::strncpy( sTemp, sPref, sizeof( sTemp ) );				sTemp[255] = '\0';				s = p = sTemp;				while ( *s )				{					s = p;					s += ::strspn( s, ":\r\n" );					nPos = ::strcspn( s, ":\r\n" );					p = s + nPos;					*p = '\0';					++p;					result = pFontServer->selectName( s );					if ( result )						break;				}							}			if ( ! result )				result = pFontServer->selectName( sDefaultName );			if ( result )				info.font.ident = pFontServer->getFontID();		}		if ( ! result )			break;				pStyle = new RStyle( &info );			} while ( 0 );		return pStyle;}/*---------------------------------------------------------------------+\ *  NAME:	 privateTryFind - find a file *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-Apr-1995\+---------------------------------------------------------------------*/static Bool		privateTryFind		(		FileSpecPtr	pSpec,		CharPtr		sName		){	FileErr	eStatus;		::fileSpec_specifyName( pSpec, sName );	eStatus = ::fileSys_fileExists( pSpec );	return ISSUCCESS( eStatus );}/*---------------------------------------------------------------------+\ *  NAME:	 privateAttemptFindNames - find a file *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	09-Jun-1995\+---------------------------------------------------------------------*/static Bool		privateAttemptFindNames		(		FileSpecPtr	pSpec		){	Bool		result = YES;	FileSpec	tSpec;		::fileSpec_specifyViaFileSpec( &tSpec, pSpec );		do // sequence	{		if ( privateTryFind( &tSpec, "reminder.txt" ) )			break;			if ( privateTryFind( &tSpec, "reminder.dat" ) )			break;			if ( privateTryFind( &tSpec, "remind.txt" ) )			break;			if ( privateTryFind( &tSpec, "remind.dat" ) )			break;			if ( privateTryFind( &tSpec, "reminders" ) )			break;		#if defined( OS_UNIX )		if ( privateTryFind( &tSpec, ".reminders" ) )			break;#endif		// if we got to here then we didn't find the file.		result = NO;		} while ( 0 ); // end sequence	if ( result )	{		::fileSpec_specifyViaFileSpec( pSpec, &tSpec );	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	 findRemindFile - get file spec of the reminder data file *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	11-Apr-1995\+---------------------------------------------------------------------*/Bool	RemindApplication::findRemindFile		(		FileSpecPtr	pSpec		){	Bool		result = YES;		do // sequence	{#if defined( OS_UNIX )		{			char	*pev;					    pev = getenv("REMINDER");			if ( pev )			{				FileErr	eStatus;								::fileSpec_initialize( pSpec );				::fileSpec_specifyFile( pSpec, pev );				eStatus = ::fileSys_fileExists( pSpec );				if ( ISSUCCESS( eStatus ) )					break;			}		}#endif		::fileSpec_initialize( pSpec );		if ( privateAttemptFindNames( pSpec ) )			break;			getApplicationFileSpec( pSpec );		if ( privateAttemptFindNames( pSpec ) )			break;				getConfigDirFileSpec( pSpec );		if ( privateAttemptFindNames( pSpec ) )			break;			// if we got to here then we didn't find the file.		result = NO;		} while ( 0 ); // end sequence		return result;}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif#if 0____XPApplicationGlue____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 appInitialize -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	22-Jun-1995\+---------------------------------------------------------------------*/Bool	RemindApplication::appInitialize		(		void		){	Bool				result = NO;	ZStyleManagerPtr	pStyleMgr;	ZCategoryManagerPtr	pCategoryMgr;		do	{		result = INHERITED::appInitialize();		if ( ! result )			break;				ZTextServer::getTextServer();		pStyleMgr = ZStyleManager::getStyleManager();		pCategoryMgr = ZCategoryManager::getCategoryManager();				vpStyleDefaultMessage				= makeDefaultStyle( "message", STRID_FontsMessage, FONT_Message, SIZE_Message );		XP_Assert( vpStyleDefaultMessage );		if ( vpStyleDefaultMessage )		{			vpStyleDefaultMessage->setName( "Default" );			pStyleMgr->addDefaultStyle( vpStyleDefaultMessage );			vpStyleDefaultMessage->addRef();		}		else		{			break;		}				vpStyleDefaultLabel				= makeDefaultStyle( "label", STRID_FontsLabel, FONT_Label, SIZE_Label );		XP_Assert( vpStyleDefaultLabel );		if ( vpStyleDefaultLabel )		{			pStyleMgr->addStyle( vpStyleDefaultLabel );			vpStyleDefaultLabel->addRef();		}		else		{			break;		}				vpStyleMonthLabel				= makeDefaultStyle( "month", STRID_FontsLabel, FONT_Label, SIZE_Label );		XP_Assert( vpStyleMonthLabel );		if ( vpStyleMonthLabel )		{			pStyleMgr->addStyle( vpStyleMonthLabel );			vpStyleMonthLabel->addRef();		}		else		{			break;		}				vpCategoryDefault = new RCategory;		XP_Assert( vpCategoryDefault );		if ( vpCategoryDefault )		{			vpCategoryDefault->setPendingRange( 6, 0 );			vpCategoryDefault->setPriority( 0 );			vpCategoryDefault->setStyleID( vpStyleDefaultMessage->getIdent() );			vpCategoryDefault->setName( "Default" );			pCategoryMgr->addDefaultCategory( vpCategoryDefault );			vpCategoryDefault->addRef();		}		else		{			break;		}				result = YES;			} while ( 0 );		return result;}/*---------------------------------------------------------------------+\ *  NAME:	 appDestroy -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-Aug-1995\+---------------------------------------------------------------------*/void	RemindApplication::appDestroy		(		void		){	if ( vpCalendar )	{		delete vpCalendar;		vpCalendar = NULL;	}	Holiday::destroyList();	ZTextServer::destroyTextServer();	if ( vpStyleDefaultLabel )	{		vpStyleDefaultLabel->release();		vpStyleDefaultLabel = NULL;	}	if ( vpStyleDefaultMessage )	{		vpStyleDefaultMessage->release();		vpStyleDefaultMessage = NULL;	}	if ( vpStyleMonthLabel )	{		vpStyleMonthLabel->release();		vpStyleMonthLabel = NULL;	}	if ( vpCategoryDefault )	{		vpCategoryDefault->release();		vpCategoryDefault = NULL;	}	ZCategoryManager::destroyCategoryManager();	ZStyleManager::destroyStyleManager();	INHERITED::appDestroy();}/*---------------------------------------------------------------------+\ *  NAME:	 appStartNone -  *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Mar-1995\+---------------------------------------------------------------------*/Bool	RemindApplication::appStartNone		(		Long	modifiers		){	Bool	result;		result = INHERITED::appStartNone( modifiers );	if ( result )	{		FileSpec	fSpec;				result = findRemindFile( &fSpec );		if ( result )		{			result = requestOpenDocument( &fSpec );		}	}		return result;}/*---------------------------------------------------------------------+\ *  NAME:	 appStartOpenDoc - brief statement *  DESCRIPTION: *  SEE ALSO: *  AUTHOR: J.Griswold			DATE:	09-Jun-1995\+---------------------------------------------------------------------*/Bool	RemindApplication::appStartOpenDoc		(		FileSpecHdl	hFileList,		Long		nModifiers		){	Bool		result = NO;	FileSpecPtr	pSpec;	FileErr		eStatus;		UNREFERENCED_PARAMETER( nModifiers );		pSpec = *hFileList;	eStatus = ::fileSys_fileExists( pSpec );	if ( ISSUCCESS( eStatus ) )	{		result = requestOpenDocument( pSpec );	}	else	{		result = appStartNone( nModifiers );	}	return result;}/*---------------------------------------------------------------------+\ *  NAME:	 somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/