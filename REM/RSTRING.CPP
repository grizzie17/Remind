/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	rstring.cpp  --  brief description of what rstring.cpp is for||	Purpose:|	Author and Date:	J.Griswold			dd-mmm-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	dd-mmm-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <ctype.h>#include "rstring.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define	EOS			('\0')#define INHERITED	BaseClass/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*/char *gListDirective[]={	"category",	"style",	0};char *gListItemType[]={	"appointment",	"event",	"task",	"todo",	"deadline",	0};char *gListSpecial[]={	"weekday",	"weekend",	"holiday",	"workday",	"offday",	"cancel",	0};char *gListFunc[]={	"f$years",	"f$julian",	"f$days",	"f$moon_time",	"f$hilite",	"f$picture",	0};char *gListFont[]={	"font",	"size",	"face",	"style",	0};char *gListStyle[]={	"bold",	"italic",	"underline",	"outline",	"shadow",	"condense",	"extend",	"~~~~",	"plain",	"hilite",	0};#define MODE_BOLD		0x0001#define MODE_ITALIC		0x0002#define MODE_UNDERLINE	0x0004#define MODE_OUTLINE	0x0008#define MODE_SHADOW		0x0010#define MODE_CONDENSE	0x0020#define MODE_EXTEND		0x0040#define MODE_PLAIN		0x0100#define MODE_HILITE		0x0200#define MODE_TEXT		0x007f#define MODE_TODAY		0x8000#define STYLE_PLAIN		9char *gListColor[]={	"black",	"white",	"gray_85",	"gray_65",	"gray_45",	"gray_25",	"gray_15",	"gray_5",		"chocolate",	"copper",	"chili_pepper",	"red",	"pure_red",	"persimmon",	"strawberry",	"floyd",	"pink",		"brown",	"burnt_ochre",	"terra_cotta",	"orange",	"clockwork",	"vermilion",	"peach",	"salmon_pink",		"bronze",	"ochre",	"harvest_gold",	"yellow",	"pure_yellow",	"lemon_yellow",	"custard",	"sorbet_lemon",	"vanilla",		"moss_green",	"british_racing",	"leaf_green",	"green",	"pure_green",	"lime_green",	"chartreuse",	"sea_foam_green",	"mint",		"spruce",	"hunter_mist",	"mallard",	"teal",	"turquoise",	"aquoise",	"aqua",	"wintergreen",		"royal_blue",	"wedgewood_blue",	"tropic_blue",	"cyan",	"pure_cyan",	"neon_blue",	"aruba",	"motel_pool",	"ice_blue",		"prussian_blue",	"ultramarine",	"windsor_blue",	"blue",	"pure_blue",	"cobalt_blue",	"manganese_blue",	"sky_blue",	"azure",		"deep_purple",	"cow_purple",	"violet",	"purple",	"grape",	"purple_haze",	"periwinkle",	"lavender",		"merlot",	"mauve",	"plum",	"magenta",	"pure_magenta"	"neon_pink",	"hot_pink",	"pale_rose",	"flamingo_pink",		"burnt_sienna",	"red_oxide",	"dusty_rose",	"olive_drab",	"raw_sienna",	"sand",	"marigold",	"camel",		0};/*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*---------------------------------------------------------------------+\ *  NAME:	 kwdlist_match -  *  DESCRIPTION:		This routine locates a matching string in an array of character		pointers.  The list must be null terminated.				It returns the index plus one if the string matches otherwise it		return zero if no match is found. *  AUTHOR: J.Griswold		DATE:	27-Oct-1993\+---------------------------------------------------------------------*/int		kwdlist_match		(		char	**list,		char	*string		){	char	**head;	char	*l, *s;	int		idx;		idx = 0;	head = list;	for ( ; *list; ++list )	{		for ( l = *list, s = string; *s && tolower(*s) == *l; ++l, ++s )			; /* empty */		if ( *s == EOS )		{			if ( *l == EOS )	/* exact match */			{				idx = (list - head) + 1;				break;			}			else if ( idx == 0 )	/* first match? */			{				idx = (list - head) + 1;			}			else				/* ambiguous */			{				idx = 0;				break;			}		}	}	return idx;}/*---------------------------------------------------------------------+\ *  NAME:	 get_textStyle - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/int		get_textStyle		(		char	*line		){	return kwdlist_match( gListStyle, line );}/*---------------------------------------------------------------------+\ *  NAME:	 get_color - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/int		get_color		(		char	*line		){	return kwdlist_match( gListColor, line );}/*---------------------------------------------------------------------+\ *  NAME:	 get_fontKwd - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-May-1995\+---------------------------------------------------------------------*/int		get_fontKwd		(		char	*line		){	return kwdlist_match( gListFont, line );}/*---------------------------------------------------------------------+\ *  NAME:	 get_function - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/int		get_function		(		char	*line		){	return kwdlist_match( gListFunc, line );}/*---------------------------------------------------------------------+\ *  NAME:	 get_directive - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	15-Sep-1995\+---------------------------------------------------------------------*/int		get_directive		(		char	*line		){	return kwdlist_match( gListDirective, line );}#if 0#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DerivedClass - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/DerivedClass::DerivedClass		(		void		)		: INHERITED(){}/*---------------------------------------------------------------------+\ *  NAME:	 ~DerivedClass - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/DerivedClass::~DerivedClass		(		void		){}#endif // 0/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/