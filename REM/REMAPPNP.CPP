/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1996 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remappnp.cpp  --  brief description of what remappnp.cpp is for||	Purpose:|	Author and Date:	J.Griswold			30-Jun-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	20-Oct-1996			J.Griswold		Now that the calendar view can be resized, support saving		and restoring that position/size information.	01-Jan-1996			J.Griswold		Add support for remembering application windows	30-Jun-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include "strform.h"#include "tparse.h"#include "remappl.h"#include "remappnp.h"#include "remcmds.h"#if defined( FRAMEWORK_PowerPlant )#	include <LWindow.h>#	include <UDesktop.h>#	include "remsplash.h"#	include "remabout.h"#endif/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	XPApplication#define	PBcmd				PB_Offset( nCmd )#define	PBleft				PB_Offset( nLeft )#define PBtop				PB_Offset( nTop )#define PBright				PB_Offset( nRight )#define PBbottom			PB_Offset( nBottom )#define	PB_Offset( x )		TPA_Offset( WindowParseData, x )/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*/typedef struct WindowParseData{	long	nCmd;	long	nLeft;	long	nTop;	long	nRight;	long	nBottom;} WindowParseData;/*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Parse Data															|||																		|\+=====================================================================*/STATE_	stateWindowSet	TRANS1_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBcmd )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBleft )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBtop )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBright )NEXT_STATE_	TRANS_	TPA_C( ',' )NEXT_STATE_	TRANS_	TPA_NUMBER,	TPA_NEXT,	TPA_Assign( PBbottom )NEXT_STATE_	TRANS_	TPA_C( ';' )END_STATE_#if 0_(){}#endif/*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*//*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif#if 0____FRAMEWORK_MFC____(){}#endif#if defined( FRAMEWORK_MFC )#if 0____FRAMEWORK_PowerPlant____(){}#endif#elif defined( FRAMEWORK_PowerPlant )/*---------------------------------------------------------------------+\ *  NAME:	saveAppViewSettings - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Jan-1996\+---------------------------------------------------------------------*/void	RemindApplication::saveAppViewSettings		(		void		){	WindowPeek		pWindow = (WindowPeek) LMGetWindowList();	LWindow*		pLWind;	Rect			r;	PaneIDT			nResID;	XPApplicationPtr	pAppl;	Char			sData[256];	Char			sTemp[256];	Char			string[256];		sData[0] = 0;	while ( nil != pWindow )	{		pLWind = LWindow::FetchWindowObject( (WindowPtr)pWindow );		pWindow = pWindow->nextWindow;		if ( pLWind				&&  pLWind->GetSuperCommander() == this )		{			nResID = pLWind->GetPaneID();			r = UWindows::GetWindowContentRect( (WindowPtr)pLWind->GetMacPort() );			strFormat_scontrol( string, "%ld,%d,%d,%d,%d;",								(long)nResID, r.left, r.top, r.right, r.bottom );			if ( ::strlen( string ) + ::strlen( sData ) < 255 )			{				::strcpy( sTemp, sData );				::strcpy( sData, string );				::strcat( sData, sTemp );			}		}	}	pAppl = XPApplication::getApplicationPtr();	if ( sData[0] )		pAppl->putPreferenceString( "window", "application", sData );	else		pAppl->deletePreference( "window", "application" );}/*---------------------------------------------------------------------+\ *  NAME:	createSavedViews - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	01-Jan-1996\+---------------------------------------------------------------------*/void	RemindApplication::createSavedViews		(		void		){	Bool		result = NO;	XPString	xsData;	XPApplicationPtr	pAppl = XPApplication::getApplicationPtr();		if ( pAppl->getPreferenceString( xsData, "window", "application" ) )	{		Severity		sts;		LWindow*		pWind;		WindowParseData	windowData;		TParseManager	tpaMgr;		CharPtr			pString;				pString = xsData.pointString();		while ( *pString )		{			tparse_initialize( &tpaMgr );			sts = tparse_parseLine( &tpaMgr, stateWindowSet, &windowData, pString );			if ( ISSUCCESS( sts ) )			{				if ( windowData.nCmd )				{					Rect	r;										r.top = windowData.nTop;					r.left = windowData.nLeft;					r.bottom = windowData.nBottom;					r.right = windowData.nRight;										pWind = LWindow::CreateWindow( CMD_ViewCalendar, this );					if ( pWind )					{						pWind->DoSetBounds( r );						pWind->Show();					}				}								pString += tpaMgr.numCharsParsed;				result = YES;			}		}	}	}Bool	RemindApplication::startupProcessing		(		void		){	Bool	result;	RemindSplash::createRemindSplash();	result = INHERITED::startupProcessing();	if ( result )		XPApplication::postCommand( CMD_OpenSavedViews );	return result;}/*---------------------------------------------------------------------+\ *  NAME:	 ObeyCommand - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Mar-1995\+---------------------------------------------------------------------*/Boolean	RemindApplication::ObeyCommand		(		CommandT	inCommand,		void		*ioParam		){	Boolean		cmdHandled = true;#if defined( DEBUG_NEW )  &&  DEBUG_NEW_LEAKS == DEBUG_NEW	DebugNewValidateAllBlocks();#endif	switch ( inCommand )	{	case CMD_ViewCalendar:		if ( NULL == vpCalendar )		{			LWindow*	pWind;			pWind = LWindow::CreateWindow( CMD_ViewCalendar, this );			if ( pWind )				pWind->Show();			LCommander::SetUpdateCommandStatus( true );		}		break;		case CMD_SetDate:		long	nValue;		nValue = *(LongPtr)ioParam;		cmdSetDate( nValue );		break;		case CMD_SaveViews:		saveAppViewSettings();		break;		case CMD_OpenSavedViews:		createSavedViews();		break;		default:		cmdHandled = INHERITED::ObeyCommand( inCommand, ioParam );		break;	}		return cmdHandled;}/*---------------------------------------------------------------------+\ *  NAME:	 FindCommandStatus - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Mar-1995\+---------------------------------------------------------------------*/void	RemindApplication::FindCommandStatus		(		CommandT	inCommand,		Boolean		&outEnabled,		Boolean		&outUsesMark,		Char16		&outMark,		Str255		outName		){	outUsesMark = false;	switch ( inCommand )	{	case CMD_ViewCalendar:		if ( NULL == vpCalendar )			outEnabled = true;		break;		default:		INHERITED::FindCommandStatus( inCommand, outEnabled,									outUsesMark, outMark, outName );		break;	}}/*---------------------------------------------------------------------+\ *  NAME:	 ShowAboutBox - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	21-Nov-1995\+---------------------------------------------------------------------*/void	RemindApplication::ShowAboutBox		(		void		){	//UDesktop::Deactivate();		// Alert will swallow Deactivate event	RemindAbout::createRemindAbout();	//UDesktop::Activate();}#endif // FRAMEWORK/*---------------------------------------------------------------------+\ *  NAME:	someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1996\+---------------------------------------------------------------------*/