/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1995 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remvcal.cpp  --  brief description of what remvcal.cpp is for||	Purpose:|	Author and Date:	J.Griswold			25-Jun-1995|| optional topics (delete if not used)|	Usage:|	Restrictions/Warnings:|	Algorithms/Formats:|	References:|	Notes:|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	20-Oct-1996			J.Griswold		Support a resizable calendar view.	02-Apr-1996			J.Griswold		Allow today's date to display in "red" even in the gray text		date display.	25-Jun-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include <ctype.h>#include "bcrtti.h"#include "strform.h"#include "xpassert.h"#include "ztextsrv.h"#include "xpsystem.h"#include "rstyle.h"#include "remvcal.h"#include "remappl.h"#include "remdoc.h"#include "datevalu.h"#include "dkeyword.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	XPView#define	BOX_MARGIN		5#define VIEW_TOPMARGIN	4#define VIEW_SIDEMARGIN	8/*---------------------------------------------------------------------+\|																		||	Local Type Definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global Variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global Variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External Variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/IMPL_StreamCreate( RemindViewCalendar, INHERITED )#if 0(){}#endif#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 RemindViewCalendar - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	25-Jun-1995\+---------------------------------------------------------------------*/RemindViewCalendar::RemindViewCalendar		(		void		)		: INHERITED(){	initRemindViewCalendar();}/*---------------------------------------------------------------------+\ *  NAME:	 ~RemindViewCalendar - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	25-Jun-1995\+---------------------------------------------------------------------*/RemindViewCalendar::~RemindViewCalendar		(		void		){	RemindApplicationPtr	pApp;		pApp = (RemindApplicationPtr) XPApplication::getApplicationPtr();	if ( pApp )		pApp->setCalendarView( NULL );	if ( vpLabelStyle )	{		vpLabelStyle->release();		vpLabelStyle = NULL;	}	if ( vpMonthStyle )	{		vpMonthStyle->release();		vpMonthStyle = NULL;	}	if ( vpGrayStyle )	{		vpGrayStyle->release();		vpGrayStyle = NULL;	}	if ( vpRedStyle )	{		vpRedStyle->release();		vpRedStyle = NULL;	}		NONPORT_RemindViewCalendarDestructor}/*---------------------------------------------------------------------+\ *  NAME:	 initRemindViewCalendar - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::initRemindViewCalendar		(		void		){	vnStart = 0;	vnMonthFirst = 0;	vnDaysDisplayed = 0;	vnDaysMonth = 0;		vnMinWindowWidth = 0;	vnMinWindowHeight = 0;	vnColWidth = 0;	vnMatrixTop = 0;	vnMatrixLeft = 0;	vpLabelStyle = NULL;	vpMonthStyle = NULL;	vpGrayStyle = NULL;	vpRedStyle = NULL;		vnHiliteFirst = 0;	vnHiliteLast = 0;	vmMessages[0] = vmMessages[1] = 0;	vpDoc = NULL;}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 setDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	26-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::setDate		(		long	nJulian		){	int		dd, mm, yy;	Long	nTemp;		julianDate_gregorianFromNumber( &dd, &mm, &yy, nJulian );	nTemp = julianDate_numberFromGregorian( 1, mm, yy );	if ( nTemp != vnMonthFirst )	{		vnMonthFirst = nTemp;		vnDaysMonth = Char(julianDate_numberFromGregorian( -1, mm, yy ) - vnMonthFirst + 1);		vnStart = vnMonthFirst - julianDate_weekdayFromNumber( vnMonthFirst ) + 1;		setPopups( mm, yy );		vpDoc = NULL;		getDateMask();	}}/*---------------------------------------------------------------------+\ *  NAME:	 hiliteDates - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::hiliteDates		(		long	nFirst,		long	nLast		){	Bool	bRefresh = NO;		if ( nFirst < vnMonthFirst			||	(vnMonthFirst+vnDaysMonth-1) < nFirst )		setDate( nFirst );	else		getDateMask();	if ( vnHiliteFirst <= (vnStart + 7*6-1)			&&	vnStart <= vnHiliteLast )		bRefresh = YES;		vnHiliteFirst = nFirst;	vnHiliteLast = nLast;	if ( bRefresh			||	(nFirst <= (vnStart + 7*6-1)				&&	vnStart <= nLast) )	{		viewRefresh();	}}/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 cmdNext - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	26-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::cmdNext		(		void		){	int		dd, mm, yy;	Long	nTemp;		julianDate_gregorianFromNumber( &dd, &mm, &yy, vnMonthFirst );	++mm;	if ( mm > 12 )	{		mm = 1;		++yy;	}	nTemp =  julianDate_numberFromGregorian( 1, mm, yy );	setDate( nTemp );	viewRefresh();}/*---------------------------------------------------------------------+\ *  NAME:	 cmdPrevious - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	26-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::cmdPrevious		(		void		){	int		dd, mm, yy;	Long	nTemp;		julianDate_gregorianFromNumber( &dd, &mm, &yy, vnMonthFirst );	--mm;	if ( mm < 1 )	{		mm = 12;		--yy;	}	nTemp =  julianDate_numberFromGregorian( 1, mm, yy );	setDate( nTemp );	viewRefresh();}/*---------------------------------------------------------------------+\ *  NAME:	 cmdMonth - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	26-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::cmdMonth		(		int		nMonth		){	int		dd, mm, yy;	Long	nTemp;		julianDate_gregorianFromNumber( &dd, &mm, &yy, vnMonthFirst );	nTemp = julianDate_numberFromGregorian( 1, nMonth, yy );	setDate( nTemp );	viewRefresh();}/*---------------------------------------------------------------------+\ *  NAME:	cmdYear - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	26-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::cmdYear		(		int		nYear		){	int		dd, mm, yy;	Long	nTemp;		julianDate_gregorianFromNumber( &dd, &mm, &yy, vnMonthFirst );	nTemp = julianDate_numberFromGregorian( 1, mm, nYear );	setDate( nTemp );	viewRefresh();}/*---------------------------------------------------------------------+\ *  NAME:	getDateMask - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Jul-1996\+---------------------------------------------------------------------*/void	RemindViewCalendar::getDateMask		(		void		){	RemindDocumentPtr	pDoc;		pDoc = DYNAMIC_CAST( RemindDocumentPtr, 						XPApplication::getApplicationPtr()->getActiveDocument() );	if ( pDoc != vpDoc )	{		vpDoc = pDoc;		if ( pDoc )		{			vmMessages[0] = vmMessages[1] = 0;			pDoc->getMask( vmMessages, vnStart, vnStart + 7*6 - 1 );		}	}}/*---------------------------------------------------------------------+\ *  NAME:	drawMessageTab - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	13-Jul-1996\+---------------------------------------------------------------------*/void	RemindViewCalendar::drawMessageTab		(		Pixel	x,		Pixel	y		){#if 1	UPoint	poly[4];		poly[0].x = x;	poly[0].y = y;	poly[1].x = x-7;	poly[1].y = y;	poly[2].x = x;	poly[2].y = y-7;	poly[3].x = x;	poly[3].y = y;	vpDraw->drawFillPolygon( poly, 4 );#else		vpDraw->drawMoveTo( x-1, y-1 );	vpDraw->drawLineTo( x-6, y-1 );	vpDraw->drawLineTo( x-1, y-6 );	vpDraw->drawLineTo( x-1, y-1 );#endif}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 drawHilitedDates - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	27-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::drawHilitedDates		(		void		){	URect	r;	XPColor	hilite;	XPColor	black( 0, 0, 0 );	Long	nSunday;	Long	nFirst;	Pixel	y;		//	get out if the current display is out of scope	if ( vnHiliteLast < vnStart )		return;	if ( vnStart+7*6-1 < vnHiliteFirst )		return;		if ( ! vpDraw )		return;		XPSystem::getHiliteColor( hilite );	vpDraw->setForeColor( hilite );		nSunday = vnStart;	nFirst = vnHiliteFirst;	if ( nFirst < nSunday )		nFirst = nSunday;	y = vnMatrixTop;	for ( int i = 0; i < 6; ++i )	{		if ( vnHiliteLast < nSunday )			break;		if ( nSunday <= nFirst  &&  nFirst < nSunday+7 )		{			r.top = y;			r.bottom = y + vnHeight;			r.left = vnMatrixLeft + (nFirst-nSunday) * vnColWidth;			if ( nSunday+6 <= vnHiliteLast )				r.right = vnMatrixLeft + vnColWidth * 7;			else				r.right = vnMatrixLeft + (vnHiliteLast-nSunday+1) * vnColWidth;			vpDraw->drawFillRect( &r );			nFirst = nSunday + 7;		}		y += vnHeight;		nSunday += 7;	}	vpDraw->setForeColor( black );}/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 documentInitialAttachment - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	24-Apr-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::documentInitialAttachment		(		void		){	long					nTemp;	RemindApplicationPtr	pApp;		INHERITED::documentInitialAttachment();	vpLabelStyle			= ((RemindApplication*)XPApplication::getApplicationPtr())			->getStyleDefaultLabel();	XP_Assert( vpLabelStyle );	if ( vpLabelStyle )	{		XPFontPtr	pFontServer;		USize		sz;		UPoint		origin;		URect		r;		Pixel		nWidth;		Pixel		nAscent;		Pixel		nHeight;				vpLabelStyle->addRef();				vpMonthStyle = new RStyle( *vpLabelStyle );		XP_Assert( vpMonthStyle );		vpMonthStyle->addRef();		vpGrayStyle = new RStyle( *vpLabelStyle );		XP_Assert( vpGrayStyle );		vpGrayStyle->addRef();		vpRedStyle = new RStyle( *vpLabelStyle );		XP_Assert( vpRedStyle );		vpRedStyle->addRef();				pFontServer = XPFont::getFontServer();		vpLabelStyle->activateStyle( pFontServer );		nWidth = pFontServer->getStringWidth( "99" );		nAscent = vpLabelStyle->getAscent();		nHeight = vpLabelStyle->getHeight();				vnHeight = nHeight + BOX_MARGIN;		vnColWidth = pFontServer->getStringWidth( "99" ) + BOX_MARGIN * 2;		vnMatrixTop = VIEW_TOPMARGIN + vnHeight + BOX_MARGIN;				vnMinWindowWidth = 6 * 7 + 1;		// assume width is 6 pixels		if ( vnMinWindowWidth < (vnControlsWidth + BOX_MARGIN) )			vnMinWindowWidth = vnControlsWidth + BOX_MARGIN;		vnMinWindowHeight = vnMatrixTop + (7 + BOX_MARGIN) * 6 + 1;				viewGetOrigin( &origin );		windowGetClientRect( &r );		r.right = r.left + vnColWidth * 7 + 1;		r.bottom = r.top + origin.y + vnMatrixTop + vnHeight * 6 + 1;		windowSetClientRect( &r );		viewGetSize( &sz );						vnMatrixLeft = (sz.width - vnColWidth * 7) / 2;			}		nTemp = dateValue_today();	setDate( nTemp );		pApp = (RemindApplicationPtr) XPApplication::getApplicationPtr();	if ( pApp )		pApp->setCalendarView( this );}/*---------------------------------------------------------------------+\ *  NAME:	 drawContents - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	25-Jun-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::drawContents		(		URectPtr	pUpdateRect		){	Pixel		y;	Pixel		x;	Pixel		nAscent;	ZTextServerPtr	pTextServer;	XPColor		liteGray( 200, 200, 200 );	XPColor		darkGray( 150, 150, 150 );	XPColor		black( 0, 0, 0 );	USize		sz;	Long		nToday;	Long		nJulian;	int			i;	ULong		mDateTemp;	ULong		mDateBit;	char		string[16];		UNREFERENCED_PARAMETER( pUpdateRect );		XP_SignalIf( NULL == vpDraw );	if ( ! vpDraw )		return;		nToday = dateValue_today();		drawHilitedDates();		viewGetSize( &sz );		//	draw matrix lines	vpDraw->setWidth( 1 );	vpDraw->setForeColor( liteGray );	x = vnMatrixLeft + vnColWidth * 7;	y = vnMatrixTop;	for ( i = 0; i < 6; ++i )	{		y += vnHeight;		vpDraw->drawMoveTo( vnMatrixLeft, y );		vpDraw->drawLineTo( x, y );	}	x = vnMatrixLeft;	for ( i = 0; i < 8; ++i )	{		vpDraw->drawMoveTo( x, 0 );		vpDraw->drawLineTo( x, y );		x += vnColWidth;	}		vpDraw->setForeColor( black );	vpDraw->drawMoveTo( 0, 0 );	vpDraw->drawLineTo( sz.width, 0 );	vpDraw->drawMoveTo( 0, vnMatrixTop );	vpDraw->drawLineTo( sz.width, vnMatrixTop );		// draw the day-names at the top	XPFontPtr	pFontServer;	int			nLabelCount;	Pixel		nWidth;	pFontServer = XPFont::getFontServer();	vpLabelStyle->activateStyle( pFontServer );	nWidth = pFontServer->getStringWidth( "Wednesday" );	if ( nWidth + BOX_MARGIN*2 < vnColWidth )	{		nLabelCount = 0;	}	else	{		nWidth = pFontServer->getStringWidth( "Wed" );		if ( nWidth + BOX_MARGIN*2 < vnColWidth )			nLabelCount = 3;		else			nLabelCount = 2;	}	//	draw weekday titles	pTextServer = getTextServer();	nAscent = vpLabelStyle->getAscent();	y = nAscent + VIEW_TOPMARGIN + BOX_MARGIN;	x = vnMatrixLeft + vnColWidth / 2;	for ( int i = 0; i < 7; ++i )	{		::strcpy( string, gDayKwds[i] );		string[0] = toupper( string[0] );				pTextServer->displayString( vpDraw, x, y, vpLabelStyle,									string, nLabelCount, TEXTJUST_BaselineCenter );		x += vnColWidth;	}			Pixel	nMaxCol;	Pixel	yBox;	Pixel	xColStart;	Pixel	xBoxOffset;		mDateTemp = vmMessages[0];	mDateBit = 1;		if ( nToday < vnMonthFirst			|| (vnMonthFirst + vnDaysMonth - 1) < nToday )		vpRedStyle->setColorIndex( COLOR_Strawberry );	else		vpRedStyle->setColorIndex( COLOR_Red );		//	display the days before "this" month	nAscent = vpMonthStyle->getAscent();	//nMaxCol = vnMatrixLeft + vnColWidth * 7;	yBox = vnMatrixTop + vnHeight;	y = yBox - (vnHeight - nAscent)/2;	xBoxOffset = (vnColWidth - vnDayWidth) / 2;	xColStart = vnMatrixLeft + vnColWidth - xBoxOffset;	nMaxCol = xColStart + vnColWidth * 7;	x = xColStart;	if ( vnStart < vnMonthFirst )	{		int		dd, mm, yy;		long	nTemp;				julianDate_gregorianFromNumber( &dd, &mm, &yy, vnStart );		nTemp = vnStart;		while ( nTemp < vnMonthFirst )		{			strFormat_decimal( string, dd );			pTextServer->displayString( vpDraw, x, y,										((nTemp == nToday) ? vpRedStyle : vpGrayStyle),										 string, 0,										TEXTJUST_BaselineRight );			if ( mDateTemp & mDateBit )			{				vpDraw->setForeColor( liteGray );				drawMessageTab( x + xBoxOffset, yBox );			}			x += vnColWidth;			mDateBit <<= 1;			++dd;			++nTemp;		}	}		//	display "this" month	nJulian = vnMonthFirst;	for ( i = 1; i <= vnDaysMonth; ++i, ++nJulian )	{		strFormat_decimal( string, i );		pTextServer->displayString( vpDraw, x, y,									((nJulian == nToday) ? vpRedStyle : vpMonthStyle),									string, 0,									TEXTJUST_BaselineRight );		if ( mDateTemp & mDateBit )		{			vpDraw->setForeColor( darkGray );			drawMessageTab( x + xBoxOffset, yBox );		}		if ( 0x80000000UL == mDateBit )		{			mDateBit = 1;			mDateTemp = vmMessages[1];		}		else		{			mDateBit <<= 1;		}		x += vnColWidth;		if ( x >= nMaxCol )		{			x = xColStart;			y += vnHeight;			yBox += vnHeight;		}	}		int		nDays;		nDays = (7 * 6) - (vnMonthFirst - vnStart + vnDaysMonth);	nToday -= vnMonthFirst + vnDaysMonth - 1;	if ( nDays > 0 )	{		for ( i = 1; i <= nDays; ++i )		{			strFormat_decimal( string, i );			pTextServer->displayString( vpDraw, x, y,										((i == nToday) ? vpRedStyle : vpGrayStyle),										string, 0,										TEXTJUST_BaselineRight );			if ( mDateTemp & mDateBit )			{				vpDraw->setForeColor( liteGray );				drawMessageTab( x + xBoxOffset, yBox );			}			if ( 0x80000000UL == mDateBit )			{				mDateBit = 1;				mDateTemp = vmMessages[1];			}			else			{				mDateBit <<= 1;			}			x += vnColWidth;			if ( x >= nMaxCol )			{				x = xColStart;				y += vnHeight;				yBox += vnHeight;			}		}	}}/*---------------------------------------------------------------------+\ *  NAME:	viewOnResize - sense resize operations *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	08-Oct-1996\+---------------------------------------------------------------------*/void	RemindViewCalendar::viewOnResize		(		Pixel	x,		Pixel	y		){	INHERITED::viewOnResize( x, y );		if ( x < vnMinWindowWidth			||	y < vnMinWindowHeight )	{		URect		r;		UPoint		origin;				viewGetOrigin( &origin );		windowGetClientRect( &r );		if ( x < vnMinWindowWidth )			x = vnMinWindowWidth + 6;		// add some fudge so we don't get caught in loop		if ( y < vnMinWindowHeight )			y = vnMinWindowHeight + 9;		viewSetSize( x, y );		return;	}		vnColWidth = x / 7;	vnHeight = (y - vnMatrixTop) / 6;		Pixel	xT;	Pixel	yT;		xT = vnColWidth * 7 + 1;	yT = vnHeight * 6 + vnMatrixTop + 1;	if ( x != xT  ||  y != yT )	{		if ( x != xT )			x = xT;		if ( y != yT )			y = yT;		viewSetSize( x, y );		return;	}	vnMatrixLeft = ( x - vnColWidth * 7) / 2;		RStyleInfo	info;		vpLabelStyle->getData( &info );	info.font.size = vnHeight * 2 / 3;	//info.font.size = vnHeight - BOX_MARGIN * 2 - 1;	vpMonthStyle->setData( &info );		XPFontPtr	pFontServer;	pFontServer = XPFont::getFontServer();	vpMonthStyle->activateStyle( pFontServer );	vnDayWidth = pFontServer->getStringWidth( "99" );	if ( vnColWidth < vnDayWidth + BOX_MARGIN )	{		info.font.size = info.font.size * vnColWidth / (vnDayWidth + BOX_MARGIN);		vpMonthStyle->setData( &info );		vpMonthStyle->activateStyle( pFontServer );		vnDayWidth = pFontServer->getStringWidth( "99" );	}	info.nColor = COLOR_Gray_45;	vpGrayStyle->setData( &info );	info.font.face |= FONTFACE_Bold;	info.nColor = COLOR_Red;	vpRedStyle->setData( &info );}/*---------------------------------------------------------------------+\ *  NAME:	mouseDown - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/void	RemindViewCalendar::mouseDown		(		const MouseEventRef	mouse		){	Pixel	x, y;	int		nRow, nCol;	int		nBox;	Long	nStart;	Long	nJulian;		x = mouse.pt.x;	y = mouse.pt.y;		if ( x < vnMatrixLeft  ||  (vnMatrixLeft + vnColWidth*7) < x )		return;		if ( y < vnMatrixTop  ||  (vnMatrixTop + vnHeight*6) < y )		return;		//	first find which box the point is in		x -= vnMatrixLeft;	y -= vnMatrixTop;	nCol = x / vnColWidth;	nRow = y / vnHeight;		nBox = nRow * 7 + nCol;	nStart = vnStart;	nJulian = nStart + nBox;	setDate( nJulian );	if ( nStart != vnStart )		viewRefresh();	//hiliteDates( nJulian, nJulian );	postDate( nJulian );}/*---------------------------------------------------------------------+\ *  NAME:	 someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/