/*---------------------------------------------------------------------+\|																		||				Copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||						  All Rights Reserved							||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	datewmy.cpp  --  brief description of what datewmy.c is for||	Purpose:|	Author and Date:	J.Griswold			03-May-1995|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	03-May-1995			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*///#include "stdafx.h"		// must be first include for MFC#include <string.h>#include "strform.h"#include "datewmy.h"#include "dkeyword.h"#include "julian.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	DateMmmYyyy/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0____class____(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 DateWMY - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-May-1995\+---------------------------------------------------------------------*/DateWMY::DateWMY		(		void		)		: INHERITED(){	vnWeekNumber = 0;	vnWeekDay = 0;}/*---------------------------------------------------------------------+\ *  NAME:	 DateWMY - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-May-1995\+---------------------------------------------------------------------*/DateWMY::DateWMY		(		int		nWeekNum,		int		nWeekDay,		int		nMonth,		int		nYear		)		: INHERITED( nMonth, nYear){	vnWeekNumber = nWeekNum;	vnWeekDay = nWeekDay;}/*---------------------------------------------------------------------+\ *  NAME:	 DateWMY - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-May-1995\+---------------------------------------------------------------------*/DateWMY::DateWMY		(		int		nWeekNum,		int		nWeekDay,		int		nMonth,		int		nCycle,		int		nYear,		int		nAnniv		)		: INHERITED( nMonth, nCycle, nYear, nAnniv ){	vnWeekNumber = nWeekNum;	vnWeekDay = nWeekDay;}/*---------------------------------------------------------------------+\ *  NAME:	 ~DateWMY - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	03-May-1995\+---------------------------------------------------------------------*/DateWMY::~DateWMY		(		void		){}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0____public____(){}#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0____protected____(){}#endif/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0____private____(){}#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0________Overrides________(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 getDateType - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	06-May-1995\+---------------------------------------------------------------------*/DateEnum		DateWMY::getDateType		(		void		){	return DATE_WMY;}/*---------------------------------------------------------------------+\ *  NAME:	 caldDateList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	09-May-1995\+---------------------------------------------------------------------*/int		DateWMY::calcDateList		(		Long	list[],		Long	nEarly,		Long	nLate		){	int		numDates = 0;	//	number of julian dates generated	int		nStartMonth;	int		nStartYear;	int		dd;	int		mm;	int		yy;	Long	jdate = 0;		::julianDate_gregorianFromNumber( &dd, &nStartMonth, &nStartYear, nEarly );	mm = yy = 0;	while ( calcYear( &yy, nStartYear ) )	{		while( calcMonth( &mm, nStartMonth ) )		{			jdate = ::julianDate_numberFromWeeklyGregorian( vnWeekNumber, vnWeekDay, mm, yy );			if ( nLate < jdate )				return numDates;						if ( nEarly <= jdate )				list[numDates++] = jdate;		}		if ( nLate < jdate )			return numDates;		nStartMonth = 1;		mm = 0;	}		return numDates;}/*---------------------------------------------------------------------+\ *  NAME:	 getSaveString - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	29-Aug-1995\+---------------------------------------------------------------------*/int		DateWMY::getSaveString		(		CharPtr	string,		int		nMaxString		){	CharPtr	start = string;	int		i;	CharPtr	p;		i = ::strFormat_decimal( string, (long)vnWeekNumber );	string += i;		::strcpy( string, ":" );	++string;		p = dkeyword_strWeekday( vnWeekDay );	::strcpy( string, p );	string += 3;	*string = '\0';		i = INHERITED::getSaveString( string, nMaxString-i );	string += i;	return string - start;}/*---------------------------------------------------------------------+\ *  NAME:	 somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1995\+---------------------------------------------------------------------*/