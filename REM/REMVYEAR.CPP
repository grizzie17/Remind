/*---------------------------------------------------------------------+\|																		||				copyright 1986 .. 1997 Grizzly Software					||					a division of Bear Consulting Group					||																		||	This software-file/document, in whole or in part, including			||	the structures and the procedures described herein, may not			||	be provided or otherwise made available without prior written		||	authorization.  In case of authorized or unauthorized				||	publication or duplication, copyright is claimed.					||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	remvyear.cpp  --  view class for yearly messages||	Purpose:|	Author and Date:	J.Griswold			18-Mar-1997|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\||	Revision History:|	25-Mar-1997			J.Griswold		Change cmdSetDate so that it only updates the members if the		new values would require them to change.	18-Mar-1997			J.Griswold		Initial Revision|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Include Files														||																		|\+---------------------------------------------------------------------*/#include "stdafx.h"		// must be first include for MFC#include <string.h>#include <ctype.h>#include "beardefs.h"#include "strform.h"#include "remappl.h"#include "remvyear.h"#include "remdoc.h"#include "datevalu.h"#include "dkeyword.h"/*---------------------------------------------------------------------+\|																		||	Local defines / constants											||																		|\+---------------------------------------------------------------------*/#define INHERITED	RemindViewBase/*---------------------------------------------------------------------+\|																		||	Local type definitions												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Private Global variables											||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	Public Global variables												||																		|\+---------------------------------------------------------------------*//*---------------------------------------------------------------------+\|																		||	External variables													||																		|\+---------------------------------------------------------------------*//*=====================================================================+\||																		|||	 Code																|||																		|\+=====================================================================*/#if 0#pragma mark ____YearlyDrawDate____#endif/*---------------------------------------------------------------------+\ *  NAME:	displayDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	YearlyDrawJDay::displayDate		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y,		NodeJDayPtr	pList		){	int				nHeight;	int				nLabelHeight;	int				nLabelAscent;	NodeJDayPtr		pItem;	Long			nJulian;	URect			r;	TextRangeInfo	tRange;	ZTextServerPtr	pTextServer;	XPColor			black( 0, 0, 0 );	char			sDate[20];	char			sWeekday[20];		UNREFERENCED_PARAMETER( x );		pTextServer = ZTextServer::getTextServer();	pDraw->getUpdateRect( &r );	nLabelHeight = vpLabelStyle->getHeight();	nLabelAscent = vpLabelStyle->getAscent();		for ( pItem = pList; pItem; pItem = (NodeJDayPtr)pItem->getNext() )	{		if ( r.bottom < y )			break;				pItem->getDisplaySize( &tRange );		nHeight = tRange.rect.bottom - tRange.rect.top;				if ( r.top				< (y + ((nHeight < nLabelHeight) ? nLabelHeight : nHeight))				)		{			nJulian = pItem->getJulianDay();			strDate_weekdayFromJulian( sWeekday, nJulian );	    	strDate_ddmmmyyyyFromJulian( sDate, nJulian );	    	pTextServer->displayString( pDraw,	    							vnDayName, y,	    							vpLabelStyle,	    							sWeekday, 0, TEXTJUST_TopLeft );	    	pTextServer->displayString( pDraw,	    							vnDate, y,	    							vpLabelStyle,	    							sDate, 2, TEXTJUST_TopLeft );    	}		if ( nHeight < nLabelHeight )		{			pItem->drawAt( pDraw, vnMessage, y + nLabelAscent - tRange.nAscender );			y += nLabelHeight;		}		else		{			pItem->drawAt( pDraw, vnMessage, y );			y += nHeight;		}	}}/*---------------------------------------------------------------------+\ *  NAME:	gatherRange - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	YearlyDrawJDay::gatherRange		(		UPointPtr	pSize,		NodeJDayPtr	pList		){	pList->getDisplayExtents( pSize );	pSize->x += vnMessage;	if ( pSize->y < vpLabelStyle->getHeight() )		pSize->y = vpLabelStyle->getHeight();}#if 0#pragma mark ____YearlyDrawMonth____#endif/*---------------------------------------------------------------------+\ *  NAME:	displayJDayList - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	YearlyDrawMonth::displayJDayList		(		XPDrawPtr	pDraw,		Pixel		x,		Pixel		y,		NodeJDayOwnerPtr	pList		){	NodeJDayPtr		pItem;	NodeJDayPtr		pNext;	UPoint			range;	URect			r;	URect			rBox;	Bool			bBox;	ZTextServerPtr	pTextServer;	Long			nJulianMonth;	int				dd, mm, yy;	char			sMonth[20];	Pixel			nHeight;		pTextServer = ZTextServer::getTextServer();		pDraw->getUpdateRect( &r );	nHeight = vpMonthStyle->getHeight();		rBox.top = y;	rBox.bottom = y + nHeight + VIEW_MARGIN_TOP * 2;	rBox.left = r.left;	rBox.right = r.right + 1;	pDraw->setForeColor( XPColor( COLOR_Gray_25 ) );	pDraw->drawFillRect( &rBox );		y += VIEW_MARGIN_TOP;	nJulianMonth = pList->getJulianDay();	julianDate_gregorianFromNumber( &dd, &mm, &yy, nJulianMonth );	::strcpy( sMonth, dkeyword_strMonth( mm ) );	sMonth[0] = toupper( sMonth[0] );	pTextServer->displayString( pDraw,							((YearlyDrawJDay*)vpDrawJDay)->vnLine - VIEW_MARGIN_TOP, y,							vpMonthStyle,							sMonth, 0, TEXTJUST_TopRight );	y += VIEW_MARGIN_TOP + nHeight;	pDraw->setWidth( 1 );	pDraw->setForeColor( XPColor( COLOR_Gray_45 ) );	pDraw->drawMoveTo( 0, y );	pDraw->drawLineTo( r.right, y );	y += VIEW_MARGIN_TOP;		bBox = NO;	pItem = pList->getJDayList();	while ( pItem )	{		if ( r.bottom < y )			break;		pNext = (NodeJDayPtr)pItem->getNext();		vpDrawJDay->gatherRange( &range, pItem );		if ( r.top <= y + range.y )		{			if ( bBox )			{				rBox.top = y;				rBox.bottom = y + range.y;				if ( NULL == pNext )					rBox.bottom += VIEW_MARGIN_TOP;				pDraw->setForeColor( XPColor( COLOR_Gray_5 ) );				pDraw->drawFillRect( &rBox );			}			vpDrawJDay->displayDate( pDraw, x, y, pItem );		}		y += range.y;		bBox = !bBox;		pItem = pNext;	}	if ( pList->getNext() )	{		XPColor	black( 0, 0, 0 );				y += VIEW_MARGIN_TOP;		pDraw->setWidth( 1 );		pDraw->setForeColor( black );		pDraw->drawMoveTo( 0, y );		pDraw->drawLineTo( r.right, y );	}}/*---------------------------------------------------------------------+\ *  NAME:	gatherRange - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	YearlyDrawMonth::gatherRange		(		UPointPtr			pSize,		NodeJDayOwnerPtr	pList		){	NodeJDayPtr		pItem;	UPoint			range;		pSize->x = 0;	pSize->y = 0;		pItem = pList->getJDayList();	while ( pItem )	{		vpDrawJDay->gatherRange( &range, pItem );		if ( range.x > pSize->x )			pSize->x = range.x;		pSize->y += range.y;		pItem = (NodeJDayPtr)pItem->getNext();	}	pSize->y += VIEW_MARGIN_TOP * 2;	pSize->y += vpDrawJDay->vpLabelStyle->getHeight();	pSize->y += VIEW_MARGIN_TOP * 2;}#if 0#pragma mark ____class____#endifIMPL_StreamCreate( RemindViewYearly, INHERITED )#if 0_(){}#endif/*---------------------------------------------------------------------+\ *  NAME:	 initRemindViewYearly - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::initRemindViewYearly		(		void		){	vJulianSunday = 0;	vNumWeeks = 2;	vpNodeJDay = NULL;	vpNodeMonth = NULL;}/*---------------------------------------------------------------------+\ *  NAME:	 RemindViewYearly - constructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/RemindViewYearly::RemindViewYearly		(		void		){	initRemindViewYearly();}/*---------------------------------------------------------------------+\ *  NAME:	 ~RemindViewYearly - destructor *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/RemindViewYearly::~RemindViewYearly		(		void		){	if ( vpNodeJDay )		vpNodeJDay->destroyAllLinks();	vpNodeJDay = NULL;	if ( vpNodeMonth )		vpNodeMonth->destroyAllLinks();	vpNodeMonth = NULL;	if ( vDrawJDay.vpLabelStyle )		vDrawJDay.vpLabelStyle->release();	if ( vDrawMonth.vpMonthStyle )		vDrawMonth.vpMonthStyle->release();		//NONPORT_RemindViewYearlyDestructor}/*=====================================================================+\||	 public member functions											|\+=====================================================================*/#if 0#pragma mark ____public____#endif/*=====================================================================+\||	 protected member functions											|\+=====================================================================*/#if 0#pragma mark ____protected____#endif/*---------------------------------------------------------------------+\ *  NAME:	 gatherDisplayExtents - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::gatherDisplayExtents		(		UPointPtr	pExtents		){	NodeMonthPtr	pItem;	UPoint		range;		pExtents->x = 0;	pExtents->y = 0;	range.x = range.y = 0;	pItem = vpNodeMonth;	while ( pItem )	{		vDrawMonth.gatherRange( &range, pItem );		if ( pExtents->x < range.x )			pExtents->x = range.x;		pExtents->y += range.y;		pItem = (NodeMonthPtr)pItem->getNext();	}	pExtents->x += VIEW_MARGIN_LEFT;}/*=====================================================================+\||	 private member functions											|\+=====================================================================*/#if 0#pragma mark ____private____#endif/*=====================================================================+\||																		|||	 Overrides															|||																		|\+=====================================================================*/#if 0#pragma mark ________Overrides________#endif/*---------------------------------------------------------------------+\ *  NAME:	 documentInitialAttachment - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::documentInitialAttachment		(		void		){	Long	nToday;	int		dd;	int		mm;	int		yy;		INHERITED::documentInitialAttachment();	nToday = dateValue_today();	julianDate_gregorianFromNumber( &dd, &mm, &yy, nToday );	vnYear = yy;	vJulianYear = julianDate_numberFromGregorian( 1, 1, yy );			vDrawMonth.vpDrawJDay = &vDrawJDay;	vDrawJDay.vpLabelStyle = ((RemindApplication*)XPApplication::getApplicationPtr())->getStyleDefaultLabel();	if ( vDrawJDay.vpLabelStyle )	{		XPFontPtr	pFontServer;				vDrawJDay.vpLabelStyle->addRef();				pFontServer = XPFont::getFontServer();		vDrawJDay.vpLabelStyle->activateStyle( pFontServer );		vDrawJDay.vnDayName = VIEW_MARGIN_LEFT;		vDrawJDay.vnDate = vDrawJDay.vnDayName + pFontServer->getStringWidth( "Wednesday  " );		vDrawJDay.vnMessage = vDrawJDay.vnDate + pFontServer->getStringWidth( "99   " );		vDrawJDay.vnLine = vDrawJDay.vnMessage - pFontServer->getStringWidth( "   " ) / 2;	}	vDrawMonth.vpMonthStyle = ((RemindApplication*)XPApplication::getApplicationPtr())->getStyleMonthLabel();	if ( vDrawMonth.vpMonthStyle )	{		vDrawMonth.vpMonthStyle->addRef();	}	else	{		vDrawMonth.vpMonthStyle = vDrawJDay.vpLabelStyle;		vDrawMonth.vpMonthStyle->addRef();	}	gatherDates();}#if 0#pragma mark ____RemindViewBase____#endif/*---------------------------------------------------------------------+\ *  NAME:	cmdSetDate - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::cmdSetDate		(		Long	nJulian		){	int		dd;	int		mm;	int		yy;		julianDate_gregorianFromNumber( &dd, &mm, &yy, nJulian );	if ( yy != vnYear )	{		vnYear = yy;		vJulianYear = julianDate_numberFromGregorian( 1, 1, yy );		gatherDates();		imageSetOrigin( 0, 0 );		viewRefresh();	}}/*---------------------------------------------------------------------+\ *  NAME:	calcCalendarHilite - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::calcCalendarHilite		(		void		){	requestCalendarHilite( vJulianYear, vJulianYear );}/*---------------------------------------------------------------------+\ *  NAME:	 buildViewHeader - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::buildViewHeader		(		void		){	Char	sTitle[80];	CharPtr	p;		p = sTitle;	::strcpy( p, "Reminders for " );	p += ::strlen( p );	p += ::strFormat_decimal( p, vnYear );	setCaption( sTitle );}/*---------------------------------------------------------------------+\ *  NAME:	getViewCmd - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/long	RemindViewYearly::getViewCmd		(		void		){	return CMD_NewYearly;}/*---------------------------------------------------------------------+\ *  NAME:	 dateNext - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::dateNext		(		void		){	++vnYear;	vJulianYear = julianDate_numberFromGregorian( 1, 1, vnYear );}/*---------------------------------------------------------------------+\ *  NAME:	 datePrevious - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::datePrevious		(		void		){	--vnYear;	vJulianYear = julianDate_numberFromGregorian( 1, 1, vnYear );}/*---------------------------------------------------------------------+\ *  NAME:	 dateBlockNext - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::dateBlockNext		(		void		){	vnYear += 10;	vJulianYear = julianDate_numberFromGregorian( 1, 1, vnYear );}/*---------------------------------------------------------------------+\ *  NAME:	 dateBlockPrevious - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::dateBlockPrevious		(		void		){	vnYear -= 10;	vJulianYear = julianDate_numberFromGregorian( 1, 1, vnYear );}/*---------------------------------------------------------------------+\ *  NAME:	 gatherDates - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/Bool	RemindViewYearly::gatherDates		(		void		){	Bool			result = NO;	RemindDocument*	pDoc;	NodeJDayPtr		pNodeJDay;	Long			nYearEnd;	buildViewHeader();	pDoc = (RemindDocumentPtr)documentFetch();	if ( pDoc )	{		if ( vpNodeMonth )			vpNodeMonth->destroyAllLinks();				nYearEnd = julianDate_numberFromGregorian( 1, 1, vnYear+1 ) - 1;				pNodeJDay = pDoc->getRange( vJulianYear, nYearEnd );		if ( pNodeJDay )		{			UPoint	pt;						vpNodeMonth = NodeMonth::buildMonthList( pNodeJDay );			result = YES;			gatherDisplayExtents( &pt );			imageSetSize( pt.x, pt.y );		}		else		{			vpNodeMonth = NULL;			imageSetOrigin( 0, 0 );			imageSetSize( 5, 5 );		}		calcCalendarHilite();	}	return result;}/*---------------------------------------------------------------------+\ *  NAME:	 displayJDays - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	18-Mar-1997\+---------------------------------------------------------------------*/void	RemindViewYearly::displayJDays		(		XPDrawPtr	pDraw,		URectPtr	pUpdateRect		){	NodeMonthPtr	pItem;	Long			x, y;	UPoint			range;		pItem = vpNodeMonth;	x = 4;	y = 0;		// first loop through and find the first month that is in the window	while ( pItem )	{		vDrawMonth.gatherRange( &range, pItem );		if ( pUpdateRect->top < y + range.y )			break;		y += range.y;		pItem = (NodeMonthPtr)pItem->getNext();	}		while ( pItem )	{		if ( pUpdateRect->bottom < y )			break;		vDrawMonth.gatherRange( &range, pItem );		vDrawMonth.displayJDayList( pDraw, x, y, pItem );		y += range.y;		pItem = (NodeMonthPtr)pItem->getNext();	}	pDraw->setForeColor( XPColor( COLOR_Black ) );	pDraw->drawMoveTo( vDrawJDay.vnLine, pUpdateRect->top-1 );	pDraw->drawLineTo( vDrawJDay.vnLine, pUpdateRect->bottom+1 );}/*---------------------------------------------------------------------+\ *  NAME:	somePackage_someFunction - brief statement *  DESCRIPTION: *  AUTHOR: J.Griswold			DATE:	dd-mmm-1997\+---------------------------------------------------------------------*/